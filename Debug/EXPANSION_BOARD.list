
EXPANSION_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08006308  08006308  00016308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006714  08006714  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006714  08006714  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006714  08006714  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006714  08006714  00016714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006718  08006718  00016718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800671c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001dc  080068f8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  080068f8  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3b1  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000210f  00000000  00000000  0002c5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002e6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002f160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183ac  00000000  00000000  0002fb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cec4  00000000  00000000  00047ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086763  00000000  00000000  00054da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000db50b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a00  00000000  00000000  000db560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080062ec 	.word	0x080062ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080062ec 	.word	0x080062ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <read8>:

#include "HTS221.h"


static uint8_t read8(hts221_t* sensor, uint8_t Mem_reg)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af04      	add	r7, sp, #16
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	HAL_I2C_Mem_Read(sensor->i2c_handler, sensor->address, Mem_reg, 1, &value, 1, I2C_HTS_TIMEOUT);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	791b      	ldrb	r3, [r3, #4]
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	9302      	str	r3, [sp, #8]
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	9301      	str	r3, [sp, #4]
 8000aac:	f107 030f 	add.w	r3, r7, #15
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	f001 fc5a 	bl	800236c <HAL_I2C_Mem_Read>

	return value;
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <read16>:

static uint16_t read16(hts221_t* sensor, uint8_t Mem_reg)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b088      	sub	sp, #32
 8000ac6:	af04      	add	r7, sp, #16
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	460b      	mov	r3, r1
 8000acc:	70fb      	strb	r3, [r7, #3]
	uint8_t value[2];
	// |n order to read 16 bits register we need to set 1 in MSB in subaddress that we want to read
	HAL_I2C_Mem_Read(sensor->i2c_handler, sensor->address, (Mem_reg | 0x80), I2C_MEMADD_SIZE_8BIT, value, 2, I2C_HTS_TIMEOUT);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6818      	ldr	r0, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	791b      	ldrb	r3, [r3, #4]
 8000ad6:	b299      	uxth	r1, r3
 8000ad8:	78fb      	ldrb	r3, [r7, #3]
 8000ada:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae6:	9302      	str	r3, [sp, #8]
 8000ae8:	2302      	movs	r3, #2
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2301      	movs	r3, #1
 8000af4:	f001 fc3a 	bl	800236c <HAL_I2C_Mem_Read>

	return (((uint16_t)(value[1])) << 8) | (uint16_t)value[0];
 8000af8:	7b7b      	ldrb	r3, [r7, #13]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	b21a      	sxth	r2, r3
 8000afe:	7b3b      	ldrb	r3, [r7, #12]
 8000b00:	b21b      	sxth	r3, r3
 8000b02:	4313      	orrs	r3, r2
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	b29b      	uxth	r3, r3
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <write8>:

static void write8(hts221_t* sensor, uint8_t Mem_reg, uint8_t* data)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af04      	add	r7, sp, #16
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensor->i2c_handler, sensor->address, Mem_reg, 1, data, 1, I2C_HTS_TIMEOUT);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	791b      	ldrb	r3, [r3, #4]
 8000b26:	b299      	uxth	r1, r3
 8000b28:	7afb      	ldrb	r3, [r7, #11]
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b30:	9302      	str	r3, [sp, #8]
 8000b32:	2301      	movs	r3, #1
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	f001 fb1c 	bl	8002178 <HAL_I2C_Mem_Write>
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <HTS221_set_power_mode>:

/////////////////////////////////////////////


void HTS221_set_power_mode(hts221_t* sensor, bool mode)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	70fb      	strb	r3, [r7, #3]
	// mode 1 - Active,  0 - Power down
	uint8_t tmp;
	tmp = read8(sensor, CTRL_REG1);
 8000b54:	2120      	movs	r1, #32
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ff96 	bl	8000a88 <read8>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	73fb      	strb	r3, [r7, #15]

	if(mode == 0) tmp &= 0x7F; // 0xxx xxxx
 8000b60:	78fb      	ldrb	r3, [r7, #3]
 8000b62:	f083 0301 	eor.w	r3, r3, #1
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d005      	beq.n	8000b78 <HTS221_set_power_mode+0x30>
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	73fb      	strb	r3, [r7, #15]
 8000b76:	e004      	b.n	8000b82 <HTS221_set_power_mode+0x3a>
	else
	{
		tmp |= 0x80;
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	73fb      	strb	r3, [r7, #15]
	}

	write8(sensor, CTRL_REG1, &tmp);
 8000b82:	f107 030f 	add.w	r3, r7, #15
 8000b86:	461a      	mov	r2, r3
 8000b88:	2120      	movs	r1, #32
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffc0 	bl	8000b10 <write8>
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <HTS221_set_output_data_rate>:



void HTS221_set_output_data_rate(hts221_t* sensor, uint8_t data_rate)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]
	if(data_rate > 3) data_rate = 3;
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d901      	bls.n	8000bae <HTS221_set_output_data_rate+0x16>
 8000baa:	2303      	movs	r3, #3
 8000bac:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, CTRL_REG1);
 8000bae:	2120      	movs	r1, #32
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff69 	bl	8000a88 <read8>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xFC; // XXXX XX00
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	f023 0303 	bic.w	r3, r3, #3
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	73fb      	strb	r3, [r7, #15]
	tmp |= data_rate & 0x03; // double protection for writing wrong number
 8000bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	b25a      	sxtb	r2, r3
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	73fb      	strb	r3, [r7, #15]

	write8(sensor, CTRL_REG1, &tmp);
 8000bda:	f107 030f 	add.w	r3, r7, #15
 8000bde:	461a      	mov	r2, r3
 8000be0:	2120      	movs	r1, #32
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ff94 	bl	8000b10 <write8>
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HTS221_set_temp_sample>:



void HTS221_set_temp_sample(hts221_t* sensor, uint8_t sample_mode)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	70fb      	strb	r3, [r7, #3]
	if(sample_mode > 7) sample_mode = 7;
 8000bfc:	78fb      	ldrb	r3, [r7, #3]
 8000bfe:	2b07      	cmp	r3, #7
 8000c00:	d901      	bls.n	8000c06 <HTS221_set_temp_sample+0x16>
 8000c02:	2307      	movs	r3, #7
 8000c04:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, AV_CONF);
 8000c06:	2110      	movs	r1, #16
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff3d 	bl	8000a88 <read8>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	73fb      	strb	r3, [r7, #15]

	tmp &= 0xC7; // 0bXX00 0xxx
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	73fb      	strb	r3, [r7, #15]
	tmp |= (sample_mode) << 3;
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	b25a      	sxtb	r2, r3
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	73fb      	strb	r3, [r7, #15]

	write8(sensor, AV_CONF, &tmp);
 8000c2e:	f107 030f 	add.w	r3, r7, #15
 8000c32:	461a      	mov	r2, r3
 8000c34:	2110      	movs	r1, #16
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ff6a 	bl	8000b10 <write8>
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HTS221_set_humidity_sample>:

void HTS221_set_humidity_sample(hts221_t* sensor, uint8_t sample_mode)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
	if(sample_mode > 7) sample_mode = 7;
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2b07      	cmp	r3, #7
 8000c54:	d901      	bls.n	8000c5a <HTS221_set_humidity_sample+0x16>
 8000c56:	2307      	movs	r3, #7
 8000c58:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, AV_CONF);
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff13 	bl	8000a88 <read8>
 8000c62:	4603      	mov	r3, r0
 8000c64:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xF8; // 0bXXXXX000
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	f023 0307 	bic.w	r3, r3, #7
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	73fb      	strb	r3, [r7, #15]

	tmp |= (sample_mode) & 0x07; // protection for writing number bigger than 7
 8000c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c74:	f003 0307 	and.w	r3, r3, #7
 8000c78:	b25a      	sxtb	r2, r3
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	b25b      	sxtb	r3, r3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	73fb      	strb	r3, [r7, #15]

	write8(sensor, AV_CONF, &tmp);
 8000c86:	f107 030f 	add.w	r3, r7, #15
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ff3e 	bl	8000b10 <write8>

}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HTS221_Init>:
	write8(sensor, CTRL_REG2, &tmp);
}


uint8_t HTS221_Init(hts221_t* sensor, I2C_HandleTypeDef* hi2c,  uint8_t Address)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	71fb      	strb	r3, [r7, #7]
	sensor->i2c_handler = hi2c;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	601a      	str	r2, [r3, #0]
	sensor->address = (Address << 1);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	711a      	strb	r2, [r3, #4]

	// check sensor ID
	uint8_t sensor_id;
	sensor_id = read8(sensor, WHO_AM_I);
 8000cba:	210f      	movs	r1, #15
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f7ff fee3 	bl	8000a88 <read8>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	75fb      	strb	r3, [r7, #23]
	if(sensor_id != 0xBC)
 8000cc6:	7dfb      	ldrb	r3, [r7, #23]
 8000cc8:	2bbc      	cmp	r3, #188	; 0xbc
 8000cca:	d001      	beq.n	8000cd0 <HTS221_Init+0x34>
	{
		return 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e08a      	b.n	8000de6 <HTS221_Init+0x14a>
	}

	// read calibration coefficients
	// 1. Temperature
	sensor->T0_degc_x8 = read8(sensor, T0_degC_x8);
 8000cd0:	2132      	movs	r1, #50	; 0x32
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f7ff fed8 	bl	8000a88 <read8>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	715a      	strb	r2, [r3, #5]
	sensor->T1_degc_x8 = read8(sensor, T1_degC_x8);
 8000ce0:	2133      	movs	r1, #51	; 0x33
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff fed0 	bl	8000a88 <read8>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	719a      	strb	r2, [r3, #6]
	sensor->T0_out = (int16_t)read16(sensor, T0_OUT);
 8000cf0:	213c      	movs	r1, #60	; 0x3c
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f7ff fee5 	bl	8000ac2 <read16>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	811a      	strh	r2, [r3, #8]
	sensor->T1_out = (int16_t)read16(sensor, T1_OUT);
 8000d00:	213e      	movs	r1, #62	; 0x3e
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f7ff fedd 	bl	8000ac2 <read16>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	815a      	strh	r2, [r3, #10]

	sensor->T0_MSB = (read8(sensor, T0_T1_MSB) & 0x3) << 8;
 8000d10:	2135      	movs	r1, #53	; 0x35
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f7ff feb8 	bl	8000a88 <read8>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	021b      	lsls	r3, r3, #8
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	819a      	strh	r2, [r3, #12]
	sensor->T1_MSB = (read8(sensor, T0_T1_MSB) & 0x0C) << 6;
 8000d28:	2135      	movs	r1, #53	; 0x35
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f7ff feac 	bl	8000a88 <read8>
 8000d30:	4603      	mov	r3, r0
 8000d32:	019b      	lsls	r3, r3, #6
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	81da      	strh	r2, [r3, #14]

	sensor->T1_degc = ((sensor->T1_MSB) | (uint16_t)(sensor->T1_degc_x8)) >> 3;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	89db      	ldrh	r3, [r3, #14]
 8000d44:	461a      	mov	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	799b      	ldrb	r3, [r3, #6]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	10db      	asrs	r3, r3, #3
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	839a      	strh	r2, [r3, #28]
	sensor->T0_degc = ((sensor->T0_MSB) | (uint16_t)(sensor->T0_degc_x8)) >> 3;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	899b      	ldrh	r3, [r3, #12]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	795b      	ldrb	r3, [r3, #5]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	10db      	asrs	r3, r3, #3
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	835a      	strh	r2, [r3, #26]

	// 2. Humidity
	sensor->H0_rh_x2 = read8(sensor, H0_rH_x2);
 8000d68:	2130      	movs	r1, #48	; 0x30
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f7ff fe8c 	bl	8000a88 <read8>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	741a      	strb	r2, [r3, #16]
	sensor->H1_rh_x2 = read8(sensor, H1_rH_x2);
 8000d78:	2131      	movs	r1, #49	; 0x31
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f7ff fe84 	bl	8000a88 <read8>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	745a      	strb	r2, [r3, #17]
	sensor->H0_T0_out = (int16_t)read16(sensor, H0_T0_OUT);
 8000d88:	2136      	movs	r1, #54	; 0x36
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f7ff fe99 	bl	8000ac2 <read16>
 8000d90:	4603      	mov	r3, r0
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	825a      	strh	r2, [r3, #18]
	sensor->H1_T0_out = (int16_t)read16(sensor, H1_T0_OUT);
 8000d98:	213a      	movs	r1, #58	; 0x3a
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f7ff fe91 	bl	8000ac2 <read16>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	829a      	strh	r2, [r3, #20]
	sensor->H0_rh = (sensor->H0_rh_x2) >> 1;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	7c1b      	ldrb	r3, [r3, #16]
 8000dac:	085b      	lsrs	r3, r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	82da      	strh	r2, [r3, #22]
	sensor->H1_rh = (sensor->H1_rh_x2) >> 1;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	7c5b      	ldrb	r3, [r3, #17]
 8000dba:	085b      	lsrs	r3, r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	831a      	strh	r2, [r3, #24]


	// set sample mode
	HTS221_set_temp_sample(sensor, TEMP_256);
 8000dc4:	2107      	movs	r1, #7
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f7ff ff12 	bl	8000bf0 <HTS221_set_temp_sample>
	HTS221_set_humidity_sample(sensor, HUM_512);
 8000dcc:	2107      	movs	r1, #7
 8000dce:	68f8      	ldr	r0, [r7, #12]
 8000dd0:	f7ff ff38 	bl	8000c44 <HTS221_set_humidity_sample>
	// set output data rate
	HTS221_set_output_data_rate(sensor, ONESHOT);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f7ff fede 	bl	8000b98 <HTS221_set_output_data_rate>
	// Turn on the device
 	HTS221_set_power_mode(sensor, 1);
 8000ddc:	2101      	movs	r1, #1
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f7ff feb2 	bl	8000b48 <HTS221_set_power_mode>
	return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HTS221_get_data>:


void HTS221_get_data(hts221_t* sensor, int16_t* temperature_value, uint16_t* humidity_val)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b088      	sub	sp, #32
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
	int32_t tmp_t, tmp_h;
	int16_t h_out, t_out;

	// wait for end of conversion

	t_out = read16(sensor, T_OUT);
 8000dfa:	212a      	movs	r1, #42	; 0x2a
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f7ff fe60 	bl	8000ac2 <read16>
 8000e02:	4603      	mov	r3, r0
 8000e04:	83fb      	strh	r3, [r7, #30]
	h_out = read16(sensor, H_OUT);
 8000e06:	2128      	movs	r1, #40	; 0x28
 8000e08:	68f8      	ldr	r0, [r7, #12]
 8000e0a:	f7ff fe5a 	bl	8000ac2 <read16>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	83bb      	strh	r3, [r7, #28]

	// humidity calculations
	tmp_h = ((int32_t)(h_out - sensor->H0_T0_out)) * ((int32_t)(sensor->H1_rh - sensor->H0_rh));
 8000e12:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8000e1c:	1a9b      	subs	r3, r3, r2
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8000e24:	4611      	mov	r1, r2
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8000e2c:	1a8a      	subs	r2, r1, r2
 8000e2e:	fb02 f303 	mul.w	r3, r2, r3
 8000e32:	61bb      	str	r3, [r7, #24]
	*humidity_val =  (uint16_t)(tmp_h/(sensor->H1_T0_out - sensor->H0_T0_out) + sensor->H0_rh);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	801a      	strh	r2, [r3, #0]

	// temperature calculations
	tmp_t = ((int32_t)(t_out - sensor->T0_out)) * ((int32_t)(sensor->T1_degc - sensor->T0_degc));
 8000e5c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8000e66:	1a9b      	subs	r3, r3, r2
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	8b92      	ldrh	r2, [r2, #28]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	8b52      	ldrh	r2, [r2, #26]
 8000e72:	1a8a      	subs	r2, r1, r2
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	617b      	str	r3, [r7, #20]
	*temperature_value = tmp_t /(sensor->T1_out - sensor->T0_out) + sensor->T0_degc;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e80:	461a      	mov	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	8b5b      	ldrh	r3, [r3, #26]
 8000e96:	4413      	add	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	b21a      	sxth	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	801a      	strh	r2, [r3, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HTS221_DRDY_Enable>:
	HTS221_get_data(sensor, temperature_value, humidity_val);
}


void HTS221_DRDY_Enable(hts221_t* sensor, uint8_t PP_OD, uint8_t DRDY_H_L)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70fb      	strb	r3, [r7, #3]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = read8(sensor, CTRL_REG3);
 8000eb8:	2122      	movs	r1, #34	; 0x22
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fde4 	bl	8000a88 <read8>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	73fb      	strb	r3, [r7, #15]

	// clear byte
	tmp &= 0x3B;  // 0b00XXX0XX
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	f003 033b 	and.w	r3, r3, #59	; 0x3b
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	73fb      	strb	r3, [r7, #15]

	// Enable DRDY pin
	tmp |= 0x04;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	73fb      	strb	r3, [r7, #15]

	// Set output type 0 - push pull, 1 - open drain
	if(PP_OD == OPEN_DRAIN)
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d104      	bne.n	8000ee8 <HTS221_DRDY_Enable+0x40>
	{
		tmp |= 0x40;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	73fb      	strb	r3, [r7, #15]
	}

	if(DRDY_H_L == ACTIVE_LOW)
 8000ee8:	78bb      	ldrb	r3, [r7, #2]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d104      	bne.n	8000ef8 <HTS221_DRDY_Enable+0x50>
	{
		tmp |= 0x80;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	73fb      	strb	r3, [r7, #15]
	}

	write8(sensor, CTRL_REG3, &tmp);
 8000ef8:	f107 030f 	add.w	r3, r7, #15
 8000efc:	461a      	mov	r2, r3
 8000efe:	2122      	movs	r1, #34	; 0x22
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fe05 	bl	8000b10 <write8>

}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <read8>:


#include "LPS22HB.h"

static uint8_t read8(LPS22HB_t* sensor, uint8_t reg_addr)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b088      	sub	sp, #32
 8000f12:	af04      	add	r7, sp, #16
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	460b      	mov	r3, r1
 8000f18:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	HAL_I2C_Mem_Read(sensor->i2c_handler, sensor->DEVICE_ADDR, reg_addr, 1, &tmp, 1, 1000);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	791b      	ldrb	r3, [r3, #4]
 8000f22:	b299      	uxth	r1, r3
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	f107 030f 	add.w	r3, r7, #15
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	f001 fa17 	bl	800236c <HAL_I2C_Mem_Read>
	return tmp;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <write8>:

static void write8(LPS22HB_t* sensor, uint8_t reg_addr, uint8_t* data)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	460b      	mov	r3, r1
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensor->i2c_handler, sensor->DEVICE_ADDR, reg_addr, 1, data, 1, 1000);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	b299      	uxth	r1, r3
 8000f60:	7afb      	ldrb	r3, [r7, #11]
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2301      	movs	r3, #1
 8000f74:	f001 f900 	bl	8002178 <HAL_I2C_Mem_Write>
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <read24>:


static int32_t read24(LPS22HB_t* sensor, uint8_t reg_addr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af04      	add	r7, sp, #16
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[3];
	HAL_I2C_Mem_Read(sensor->i2c_handler, sensor->DEVICE_ADDR, reg_addr, 1, buff, 3, 1000);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	b299      	uxth	r1, r3
 8000f96:	78fb      	ldrb	r3, [r7, #3]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	f001 f9de 	bl	800236c <HAL_I2C_Mem_Read>
	return (int32_t)(buff[2] << 16) | (buff[1] << 8) | buff[0];
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	041a      	lsls	r2, r3, #16
 8000fb4:	7b7b      	ldrb	r3, [r7, #13]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	7b3a      	ldrb	r2, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <read16>:

static int16_t read16(LPS22HB_t* sensor, uint8_t reg_addr)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b088      	sub	sp, #32
 8000fca:	af04      	add	r7, sp, #16
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[2];
	HAL_I2C_Mem_Read(sensor->i2c_handler, sensor->DEVICE_ADDR, reg_addr, 1, buff, 2, 1000);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	791b      	ldrb	r3, [r3, #4]
 8000fda:	b299      	uxth	r1, r3
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	f001 f9bb 	bl	800236c <HAL_I2C_Mem_Read>
	return (int16_t)(buff[1] << 8) | (buff[0]);
 8000ff6:	7b7b      	ldrb	r3, [r7, #13]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b21b      	sxth	r3, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <LPS22HB_Init>:




uint8_t LPS22HB_Init(LPS22HB_t* sensor, uint8_t device_address, I2C_HandleTypeDef* i2c_handler)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	460b      	mov	r3, r1
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	72fb      	strb	r3, [r7, #11]
	sensor->i2c_handler = i2c_handler;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	601a      	str	r2, [r3, #0]
	sensor->DEVICE_ADDR = device_address << 1;
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	b2da      	uxtb	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	711a      	strb	r2, [r3, #4]

	// check sensor ID
	uint8_t sensor_id;
	sensor_id = read8(sensor, LPS_WHO_AM_I);
 800102a:	210f      	movs	r1, #15
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f7ff ff6e 	bl	8000f0e <read8>
 8001032:	4603      	mov	r3, r0
 8001034:	75fb      	strb	r3, [r7, #23]
	if(sensor_id != LPS_ID)
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	2bb1      	cmp	r3, #177	; 0xb1
 800103a:	d001      	beq.n	8001040 <LPS22HB_Init+0x34>
	{
		return 1; // error
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <LPS22HB_Init+0x36>
	}


	return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <LPS22HB_GetData>:
	*pressure_data = press_raw / PRESSURE_ACCURACY;
	*temperature_data = temp_raw / TEMPERATURE_ACCURACY;
}

void LPS22HB_GetData(LPS22HB_t* sensor, int32_t* pressure_data, uint16_t* temperature_data)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
	// pull data from registers
	int32_t press_raw = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
	int16_t temp_raw = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	827b      	strh	r3, [r7, #18]

	press_raw = read24(sensor, PRESS_OUT_XL);
 8001060:	2128      	movs	r1, #40	; 0x28
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f7ff ff8c 	bl	8000f80 <read24>
 8001068:	6178      	str	r0, [r7, #20]
	temp_raw = read16(sensor, TEMP_OUT_L);
 800106a:	212b      	movs	r1, #43	; 0x2b
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff ffaa 	bl	8000fc6 <read16>
 8001072:	4603      	mov	r3, r0
 8001074:	827b      	strh	r3, [r7, #18]

	// calculations
	*pressure_data = press_raw / PRESSURE_ACCURACY;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b00      	cmp	r3, #0
 800107a:	da01      	bge.n	8001080 <LPS22HB_GetData+0x34>
 800107c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001080:	131b      	asrs	r3, r3, #12
 8001082:	461a      	mov	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	601a      	str	r2, [r3, #0]
	*temperature_data = temp_raw / TEMPERATURE_ACCURACY;
 8001088:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <LPS22HB_GetData+0x5c>)
 800108e:	fb82 1203 	smull	r1, r2, r2, r3
 8001092:	1152      	asrs	r2, r2, #5
 8001094:	17db      	asrs	r3, r3, #31
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	b21b      	sxth	r3, r3
 800109a:	b29a      	uxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	801a      	strh	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	51eb851f 	.word	0x51eb851f

080010ac <LPS22HB_Set_ODR>:




void LPS22HB_Set_ODR(LPS22HB_t* sensor, uint8_t ODR)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70fb      	strb	r3, [r7, #3]
	if(ODR > 5) ODR = 5;
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	2b05      	cmp	r3, #5
 80010bc:	d901      	bls.n	80010c2 <LPS22HB_Set_ODR+0x16>
 80010be:	2305      	movs	r3, #5
 80010c0:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, LPS_CTRL_REG1);
 80010c2:	2110      	movs	r1, #16
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff22 	bl	8000f0e <read8>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
	tmp &= 0x8F; // mask ODR bits
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	73fb      	strb	r3, [r7, #15]

	tmp |= (ODR << 4);
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	b25a      	sxtb	r2, r3
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	73fb      	strb	r3, [r7, #15]
	write8(sensor, LPS_CTRL_REG1, &tmp);
 80010ea:	f107 030f 	add.w	r3, r7, #15
 80010ee:	461a      	mov	r2, r3
 80010f0:	2110      	movs	r1, #16
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff28 	bl	8000f48 <write8>
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <LPS22HB_Set_DRDY_Signal>:

void LPS22HB_Set_DRDY_Signal(LPS22HB_t* sensor, uint8_t active_level, uint8_t output_type, uint8_t enable)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	4608      	mov	r0, r1
 800110a:	4611      	mov	r1, r2
 800110c:	461a      	mov	r2, r3
 800110e:	4603      	mov	r3, r0
 8001110:	70fb      	strb	r3, [r7, #3]
 8001112:	460b      	mov	r3, r1
 8001114:	70bb      	strb	r3, [r7, #2]
 8001116:	4613      	mov	r3, r2
 8001118:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	tmp = read8(sensor, LPS_CTRL_REG3);
 800111a:	2112      	movs	r1, #18
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fef6 	bl	8000f0e <read8>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]

	tmp &= 0x38; // xx111xxx clear register
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800112c:	b2db      	uxtb	r3, r3
 800112e:	73fb      	strb	r3, [r7, #15]

	if(enable != 0)
 8001130:	787b      	ldrb	r3, [r7, #1]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d004      	beq.n	8001140 <LPS22HB_Set_DRDY_Signal+0x40>
	{
		tmp |= 0x04; // set 1 on DRDY bit
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	b2db      	uxtb	r3, r3
 800113e:	73fb      	strb	r3, [r7, #15]
	}

	if(output_type == DRDY_OpenDrain)
 8001140:	78bb      	ldrb	r3, [r7, #2]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d104      	bne.n	8001150 <LPS22HB_Set_DRDY_Signal+0x50>
	{
		tmp |= (1 << 6); // set 1 on PP_OD bit
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800114c:	b2db      	uxtb	r3, r3
 800114e:	73fb      	strb	r3, [r7, #15]
	}

	if(active_level == DRDY_ActiveLow)
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d104      	bne.n	8001160 <LPS22HB_Set_DRDY_Signal+0x60>
	{
		tmp |= (1 << 7); // set 1 on INT_H_L bit
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800115c:	b2db      	uxtb	r3, r3
 800115e:	73fb      	strb	r3, [r7, #15]
	}

	write8(sensor, LPS_CTRL_REG3, &tmp);
 8001160:	f107 030f 	add.w	r3, r7, #15
 8001164:	461a      	mov	r2, r3
 8001166:	2112      	movs	r1, #18
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff feed 	bl	8000f48 <write8>
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118c:	4b3a      	ldr	r3, [pc, #232]	; (8001278 <MX_GPIO_Init+0x100>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a39      	ldr	r2, [pc, #228]	; (8001278 <MX_GPIO_Init+0x100>)
 8001192:	f043 0310 	orr.w	r3, r3, #16
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b37      	ldr	r3, [pc, #220]	; (8001278 <MX_GPIO_Init+0x100>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a4:	4b34      	ldr	r3, [pc, #208]	; (8001278 <MX_GPIO_Init+0x100>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a33      	ldr	r2, [pc, #204]	; (8001278 <MX_GPIO_Init+0x100>)
 80011aa:	f043 0320 	orr.w	r3, r3, #32
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b31      	ldr	r3, [pc, #196]	; (8001278 <MX_GPIO_Init+0x100>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <MX_GPIO_Init+0x100>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a2d      	ldr	r2, [pc, #180]	; (8001278 <MX_GPIO_Init+0x100>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <MX_GPIO_Init+0x100>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <MX_GPIO_Init+0x100>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a27      	ldr	r2, [pc, #156]	; (8001278 <MX_GPIO_Init+0x100>)
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b25      	ldr	r3, [pc, #148]	; (8001278 <MX_GPIO_Init+0x100>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2120      	movs	r1, #32
 80011f0:	4822      	ldr	r0, [pc, #136]	; (800127c <MX_GPIO_Init+0x104>)
 80011f2:	f000 fe4c 	bl	8001e8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fc:	4b20      	ldr	r3, [pc, #128]	; (8001280 <MX_GPIO_Init+0x108>)
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4619      	mov	r1, r3
 800120a:	481e      	ldr	r0, [pc, #120]	; (8001284 <MX_GPIO_Init+0x10c>)
 800120c:	f000 fca4 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001210:	2320      	movs	r3, #32
 8001212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2302      	movs	r3, #2
 800121e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4619      	mov	r1, r3
 8001226:	4815      	ldr	r0, [pc, #84]	; (800127c <MX_GPIO_Init+0x104>)
 8001228:	f000 fc96 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LPS22HB_DRDY_Pin;
 800122c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LPS22HB_DRDY_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	4619      	mov	r1, r3
 8001240:	4811      	ldr	r0, [pc, #68]	; (8001288 <MX_GPIO_Init+0x110>)
 8001242:	f000 fc89 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HTS221_DRDY_Pin;
 8001246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800124a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_GPIO_Init+0x114>)
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HTS221_DRDY_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4619      	mov	r1, r3
 800125a:	4808      	ldr	r0, [pc, #32]	; (800127c <MX_GPIO_Init+0x104>)
 800125c:	f000 fc7c 	bl	8001b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	2028      	movs	r0, #40	; 0x28
 8001266:	f000 fc40 	bl	8001aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800126a:	2028      	movs	r0, #40	; 0x28
 800126c:	f000 fc59 	bl	8001b22 <HAL_NVIC_EnableIRQ>

}
 8001270:	bf00      	nop
 8001272:	3720      	adds	r7, #32
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021000 	.word	0x40021000
 800127c:	40010800 	.word	0x40010800
 8001280:	10110000 	.word	0x10110000
 8001284:	40011000 	.word	0x40011000
 8001288:	40010c00 	.word	0x40010c00
 800128c:	10210000 	.word	0x10210000

08001290 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_I2C1_Init+0x50>)
 8001296:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <MX_I2C1_Init+0x54>)
 8001298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_I2C1_Init+0x50>)
 800129c:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <MX_I2C1_Init+0x58>)
 800129e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012ce:	f000 fe0f 	bl	8001ef0 <HAL_I2C_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012d8:	f000 f90e 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000204 	.word	0x20000204
 80012e4:	40005400 	.word	0x40005400
 80012e8:	000186a0 	.word	0x000186a0

080012ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_I2C_MspInit+0x90>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d132      	bne.n	8001372 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <HAL_I2C_MspInit+0x94>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <HAL_I2C_MspInit+0x94>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_I2C_MspInit+0x94>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001324:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132a:	2312      	movs	r3, #18
 800132c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	4812      	ldr	r0, [pc, #72]	; (8001384 <HAL_I2C_MspInit+0x98>)
 800133a:	f000 fc0d 	bl	8001b58 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_I2C_MspInit+0x9c>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
 8001354:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <HAL_I2C_MspInit+0x9c>)
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_I2C_MspInit+0x94>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_I2C_MspInit+0x94>)
 8001360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_I2C_MspInit+0x94>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40005400 	.word	0x40005400
 8001380:	40021000 	.word	0x40021000
 8001384:	40010c00 	.word	0x40010c00
 8001388:	40010000 	.word	0x40010000

0800138c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001390:	f000 fa72 	bl	8001878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001394:	f000 f85a 	bl	800144c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001398:	f7ff feee 	bl	8001178 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800139c:	f000 f9de 	bl	800175c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013a0:	f7ff ff76 	bl	8001290 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HTS221_Init(&HTS221, &hi2c1, DEV_ADDR);
 80013a4:	225f      	movs	r2, #95	; 0x5f
 80013a6:	4920      	ldr	r1, [pc, #128]	; (8001428 <main+0x9c>)
 80013a8:	4820      	ldr	r0, [pc, #128]	; (800142c <main+0xa0>)
 80013aa:	f7ff fc77 	bl	8000c9c <HTS221_Init>
  LPS22HB_Init(&LPS22HB, LPS_DEV_ADDR, &hi2c1);
 80013ae:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <main+0x9c>)
 80013b0:	215d      	movs	r1, #93	; 0x5d
 80013b2:	481f      	ldr	r0, [pc, #124]	; (8001430 <main+0xa4>)
 80013b4:	f7ff fe2a 	bl	800100c <LPS22HB_Init>

  HTS221_DRDY_Enable(&HTS221, OPEN_DRAIN, ACTIVE_LOW);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2101      	movs	r1, #1
 80013bc:	481b      	ldr	r0, [pc, #108]	; (800142c <main+0xa0>)
 80013be:	f7ff fd73 	bl	8000ea8 <HTS221_DRDY_Enable>
  HTS221_set_output_data_rate(&HTS221, Hz_1);
 80013c2:	2101      	movs	r1, #1
 80013c4:	4819      	ldr	r0, [pc, #100]	; (800142c <main+0xa0>)
 80013c6:	f7ff fbe7 	bl	8000b98 <HTS221_set_output_data_rate>
  HTS221_get_data(&HTS221, &temp, &humidity);
 80013ca:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <main+0xa8>)
 80013cc:	491a      	ldr	r1, [pc, #104]	; (8001438 <main+0xac>)
 80013ce:	4817      	ldr	r0, [pc, #92]	; (800142c <main+0xa0>)
 80013d0:	f7ff fd0d 	bl	8000dee <HTS221_get_data>

  LPS22HB_Set_ODR(&LPS22HB, rate_1Hz);
 80013d4:	2101      	movs	r1, #1
 80013d6:	4816      	ldr	r0, [pc, #88]	; (8001430 <main+0xa4>)
 80013d8:	f7ff fe68 	bl	80010ac <LPS22HB_Set_ODR>
  LPS22HB_Set_DRDY_Signal(&LPS22HB, DRDY_ActiveLow, DRDY_OpenDrain, 1);
 80013dc:	2301      	movs	r3, #1
 80013de:	2201      	movs	r2, #1
 80013e0:	2101      	movs	r1, #1
 80013e2:	4813      	ldr	r0, [pc, #76]	; (8001430 <main+0xa4>)
 80013e4:	f7ff fe8c 	bl	8001100 <LPS22HB_Set_DRDY_Signal>
  LPS22HB_GetData(&LPS22HB, &pressure, &tempa);
 80013e8:	4a14      	ldr	r2, [pc, #80]	; (800143c <main+0xb0>)
 80013ea:	4915      	ldr	r1, [pc, #84]	; (8001440 <main+0xb4>)
 80013ec:	4810      	ldr	r0, [pc, #64]	; (8001430 <main+0xa4>)
 80013ee:	f7ff fe2d 	bl	800104c <LPS22HB_GetData>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(DATA_READY_FLAG == 1)
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <main+0xb8>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d107      	bne.n	800140c <main+0x80>
	  {
		HTS221_get_data(&HTS221, &temp, &humidity);
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <main+0xa8>)
 80013fe:	490e      	ldr	r1, [pc, #56]	; (8001438 <main+0xac>)
 8001400:	480a      	ldr	r0, [pc, #40]	; (800142c <main+0xa0>)
 8001402:	f7ff fcf4 	bl	8000dee <HTS221_get_data>
		DATA_READY_FLAG = 0;
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <main+0xb8>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
	  }

	  if(HAL_GPIO_ReadPin(LPS22HB_DRDY_GPIO_Port, LPS22HB_DRDY_Pin) == GPIO_PIN_RESET)
 800140c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <main+0xbc>)
 8001412:	f000 fd25 	bl	8001e60 <HAL_GPIO_ReadPin>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1ea      	bne.n	80013f2 <main+0x66>
	  {
		  LPS22HB_GetData(&LPS22HB, &pressure, &tempa);
 800141c:	4a07      	ldr	r2, [pc, #28]	; (800143c <main+0xb0>)
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <main+0xb4>)
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <main+0xa4>)
 8001422:	f7ff fe13 	bl	800104c <LPS22HB_GetData>
	  if(DATA_READY_FLAG == 1)
 8001426:	e7e4      	b.n	80013f2 <main+0x66>
 8001428:	20000204 	.word	0x20000204
 800142c:	20000270 	.word	0x20000270
 8001430:	2000025c 	.word	0x2000025c
 8001434:	2000026c 	.word	0x2000026c
 8001438:	20000264 	.word	0x20000264
 800143c:	20000266 	.word	0x20000266
 8001440:	20000268 	.word	0x20000268
 8001444:	20000258 	.word	0x20000258
 8001448:	40010c00 	.word	0x40010c00

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b090      	sub	sp, #64	; 0x40
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 0318 	add.w	r3, r7, #24
 8001456:	2228      	movs	r2, #40	; 0x28
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f002 fa68 	bl	8003930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001472:	2301      	movs	r3, #1
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001476:	2310      	movs	r3, #16
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147a:	2302      	movs	r3, #2
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800147e:	2300      	movs	r3, #0
 8001480:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001482:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001486:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	4618      	mov	r0, r3
 800148e:	f001 fd2f 	bl	8002ef0 <HAL_RCC_OscConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001498:	f000 f82e 	bl	80014f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149c:	230f      	movs	r3, #15
 800149e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a0:	2302      	movs	r3, #2
 80014a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2102      	movs	r1, #2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 ff9a 	bl	80033f0 <HAL_RCC_ClockConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80014c2:	f000 f819 	bl	80014f8 <Error_Handler>
  }
}
 80014c6:	bf00      	nop
 80014c8:	3740      	adds	r7, #64	; 0x40
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == HTS221_DRDY_Pin)
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e0:	d102      	bne.n	80014e8 <HAL_GPIO_EXTI_Callback+0x18>
	{
		DATA_READY_FLAG = 1;
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x24>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
	}

}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000258 	.word	0x20000258

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	e7fe      	b.n	8001500 <Error_Handler+0x8>
	...

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_MspInit+0x5c>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4a14      	ldr	r2, [pc, #80]	; (8001560 <HAL_MspInit+0x5c>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6193      	str	r3, [r2, #24]
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_MspInit+0x5c>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_MspInit+0x5c>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <HAL_MspInit+0x5c>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_MspInit+0x5c>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_MspInit+0x60>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_MspInit+0x60>)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000
 8001564:	40010000 	.word	0x40010000

08001568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800156c:	e7fe      	b.n	800156c <NMI_Handler+0x4>

0800156e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <HardFault_Handler+0x4>

08001574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <MemManage_Handler+0x4>

0800157a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <BusFault_Handler+0x4>

08001580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <UsageFault_Handler+0x4>

08001586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ae:	f000 f9a9 	bl	8001904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80015ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015be:	f000 fc7f 	bl	8001ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015c2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015c6:	f000 fc7b 	bl	8001ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
	return 1;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <_kill>:

int _kill(int pid, int sig)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015e6:	f002 f979 	bl	80038dc <__errno>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2216      	movs	r2, #22
 80015ee:	601a      	str	r2, [r3, #0]
	return -1;
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_exit>:

void _exit (int status)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001604:	f04f 31ff 	mov.w	r1, #4294967295
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ffe7 	bl	80015dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800160e:	e7fe      	b.n	800160e <_exit+0x12>

08001610 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e00a      	b.n	8001638 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001622:	f3af 8000 	nop.w
 8001626:	4601      	mov	r1, r0
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	b2ca      	uxtb	r2, r1
 8001630:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbf0      	blt.n	8001622 <_read+0x12>
	}

return len;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e009      	b.n	8001670 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf1      	blt.n	800165c <_write+0x12>
	}
	return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_close>:

int _close(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
	return -1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a8:	605a      	str	r2, [r3, #4]
	return 0;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <_isatty>:

int _isatty(int file)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
	return 1;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
	return 0;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
	...

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f002 f8e2 	bl	80038dc <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20005000 	.word	0x20005000
 8001744:	00000400 	.word	0x00000400
 8001748:	200001f8 	.word	0x200001f8
 800174c:	200002e8 	.word	0x200002e8

08001750 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <MX_USART2_UART_Init+0x50>)
 8001764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800176c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001794:	f001 ffc6 	bl	8003724 <HAL_UART_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800179e:	f7ff feab 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000290 	.word	0x20000290
 80017ac:	40004400 	.word	0x40004400

080017b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a15      	ldr	r2, [pc, #84]	; (8001820 <HAL_UART_MspInit+0x70>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d123      	bne.n	8001818 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <HAL_UART_MspInit+0x74>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	4a13      	ldr	r2, [pc, #76]	; (8001824 <HAL_UART_MspInit+0x74>)
 80017d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017da:	61d3      	str	r3, [r2, #28]
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_UART_MspInit+0x74>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_UART_MspInit+0x74>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <HAL_UART_MspInit+0x74>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_UART_MspInit+0x74>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001800:	230c      	movs	r3, #12
 8001802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2302      	movs	r3, #2
 800180a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4619      	mov	r1, r3
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <HAL_UART_MspInit+0x78>)
 8001814:	f000 f9a0 	bl	8001b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40004400 	.word	0x40004400
 8001824:	40021000 	.word	0x40021000
 8001828:	40010800 	.word	0x40010800

0800182c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800182e:	490d      	ldr	r1, [pc, #52]	; (8001864 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001834:	e002      	b.n	800183c <LoopCopyDataInit>

08001836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183a:	3304      	adds	r3, #4

0800183c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800183c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001840:	d3f9      	bcc.n	8001836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001844:	4c0a      	ldr	r4, [pc, #40]	; (8001870 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001848:	e001      	b.n	800184e <LoopFillZerobss>

0800184a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800184c:	3204      	adds	r2, #4

0800184e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001850:	d3fb      	bcc.n	800184a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001852:	f7ff ff7d 	bl	8001750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001856:	f002 f847 	bl	80038e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800185a:	f7ff fd97 	bl	800138c <main>
  bx lr
 800185e:	4770      	bx	lr
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001868:	0800671c 	.word	0x0800671c
  ldr r2, =_sbss
 800186c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001870:	200002e8 	.word	0x200002e8

08001874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC1_2_IRQHandler>
	...

08001878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_Init+0x28>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_Init+0x28>)
 8001882:	f043 0310 	orr.w	r3, r3, #16
 8001886:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001888:	2003      	movs	r0, #3
 800188a:	f000 f923 	bl	8001ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188e:	2000      	movs	r0, #0
 8001890:	f000 f808 	bl	80018a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001894:	f7ff fe36 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40022000 	.word	0x40022000

080018a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_InitTick+0x54>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x58>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80018be:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f93b 	bl	8001b3e <HAL_SYSTICK_Config>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00e      	b.n	80018f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b0f      	cmp	r3, #15
 80018d6:	d80a      	bhi.n	80018ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d8:	2200      	movs	r2, #0
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f000 f903 	bl	8001aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_InitTick+0x5c>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e000      	b.n	80018f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000008 	.word	0x20000008
 8001900:	20000004 	.word	0x20000004

08001904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_IncTick+0x1c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_IncTick+0x20>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
 8001914:	4a03      	ldr	r2, [pc, #12]	; (8001924 <HAL_IncTick+0x20>)
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	20000008 	.word	0x20000008
 8001924:	200002d4 	.word	0x200002d4

08001928 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b02      	ldr	r3, [pc, #8]	; (8001938 <HAL_GetTick+0x10>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	200002d4 	.word	0x200002d4

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196e:	4a04      	ldr	r2, [pc, #16]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60d3      	str	r3, [r2, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	db0b      	blt.n	80019ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	4906      	ldr	r1, [pc, #24]	; (80019d4 <__NVIC_EnableIRQ+0x34>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	2001      	movs	r0, #1
 80019c2:	fa00 f202 	lsl.w	r2, r0, r2
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100

080019d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0a      	blt.n	8001a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	490c      	ldr	r1, [pc, #48]	; (8001a24 <__NVIC_SetPriority+0x4c>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	0112      	lsls	r2, r2, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a00:	e00a      	b.n	8001a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4908      	ldr	r1, [pc, #32]	; (8001a28 <__NVIC_SetPriority+0x50>)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	3b04      	subs	r3, #4
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	440b      	add	r3, r1
 8001a16:	761a      	strb	r2, [r3, #24]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf28      	it	cs
 8001a4a:	2304      	movcs	r3, #4
 8001a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d902      	bls.n	8001a5c <NVIC_EncodePriority+0x30>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3b03      	subs	r3, #3
 8001a5a:	e000      	b.n	8001a5e <NVIC_EncodePriority+0x32>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	4313      	orrs	r3, r2
         );
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa0:	d301      	bcc.n	8001aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00f      	b.n	8001ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <SysTick_Config+0x40>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aae:	210f      	movs	r1, #15
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f7ff ff90 	bl	80019d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <SysTick_Config+0x40>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <SysTick_Config+0x40>)
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	e000e010 	.word	0xe000e010

08001ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff2d 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001afc:	f7ff ff42 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	6978      	ldr	r0, [r7, #20]
 8001b08:	f7ff ff90 	bl	8001a2c <NVIC_EncodePriority>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff5f 	bl	80019d8 <__NVIC_SetPriority>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff35 	bl	80019a0 <__NVIC_EnableIRQ>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffa2 	bl	8001a90 <SysTick_Config>
 8001b4c:	4603      	mov	r3, r0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b08b      	sub	sp, #44	; 0x2c
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6a:	e169      	b.n	8001e40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	f040 8158 	bne.w	8001e3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a9a      	ldr	r2, [pc, #616]	; (8001df8 <HAL_GPIO_Init+0x2a0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d05e      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
 8001b94:	4a98      	ldr	r2, [pc, #608]	; (8001df8 <HAL_GPIO_Init+0x2a0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d875      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001b9a:	4a98      	ldr	r2, [pc, #608]	; (8001dfc <HAL_GPIO_Init+0x2a4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d058      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
 8001ba0:	4a96      	ldr	r2, [pc, #600]	; (8001dfc <HAL_GPIO_Init+0x2a4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d86f      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001ba6:	4a96      	ldr	r2, [pc, #600]	; (8001e00 <HAL_GPIO_Init+0x2a8>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d052      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
 8001bac:	4a94      	ldr	r2, [pc, #592]	; (8001e00 <HAL_GPIO_Init+0x2a8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d869      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001bb2:	4a94      	ldr	r2, [pc, #592]	; (8001e04 <HAL_GPIO_Init+0x2ac>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d04c      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
 8001bb8:	4a92      	ldr	r2, [pc, #584]	; (8001e04 <HAL_GPIO_Init+0x2ac>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d863      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001bbe:	4a92      	ldr	r2, [pc, #584]	; (8001e08 <HAL_GPIO_Init+0x2b0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d046      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
 8001bc4:	4a90      	ldr	r2, [pc, #576]	; (8001e08 <HAL_GPIO_Init+0x2b0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d85d      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001bca:	2b12      	cmp	r3, #18
 8001bcc:	d82a      	bhi.n	8001c24 <HAL_GPIO_Init+0xcc>
 8001bce:	2b12      	cmp	r3, #18
 8001bd0:	d859      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001bd2:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <HAL_GPIO_Init+0x80>)
 8001bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd8:	08001c53 	.word	0x08001c53
 8001bdc:	08001c2d 	.word	0x08001c2d
 8001be0:	08001c3f 	.word	0x08001c3f
 8001be4:	08001c81 	.word	0x08001c81
 8001be8:	08001c87 	.word	0x08001c87
 8001bec:	08001c87 	.word	0x08001c87
 8001bf0:	08001c87 	.word	0x08001c87
 8001bf4:	08001c87 	.word	0x08001c87
 8001bf8:	08001c87 	.word	0x08001c87
 8001bfc:	08001c87 	.word	0x08001c87
 8001c00:	08001c87 	.word	0x08001c87
 8001c04:	08001c87 	.word	0x08001c87
 8001c08:	08001c87 	.word	0x08001c87
 8001c0c:	08001c87 	.word	0x08001c87
 8001c10:	08001c87 	.word	0x08001c87
 8001c14:	08001c87 	.word	0x08001c87
 8001c18:	08001c87 	.word	0x08001c87
 8001c1c:	08001c35 	.word	0x08001c35
 8001c20:	08001c49 	.word	0x08001c49
 8001c24:	4a79      	ldr	r2, [pc, #484]	; (8001e0c <HAL_GPIO_Init+0x2b4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c2a:	e02c      	b.n	8001c86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	623b      	str	r3, [r7, #32]
          break;
 8001c32:	e029      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	623b      	str	r3, [r7, #32]
          break;
 8001c3c:	e024      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	3308      	adds	r3, #8
 8001c44:	623b      	str	r3, [r7, #32]
          break;
 8001c46:	e01f      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	330c      	adds	r3, #12
 8001c4e:	623b      	str	r3, [r7, #32]
          break;
 8001c50:	e01a      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	623b      	str	r3, [r7, #32]
          break;
 8001c5e:	e013      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d105      	bne.n	8001c74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c68:	2308      	movs	r3, #8
 8001c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	611a      	str	r2, [r3, #16]
          break;
 8001c72:	e009      	b.n	8001c88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c74:	2308      	movs	r3, #8
 8001c76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	615a      	str	r2, [r3, #20]
          break;
 8001c7e:	e003      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
          break;
 8001c84:	e000      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          break;
 8001c86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2bff      	cmp	r3, #255	; 0xff
 8001c8c:	d801      	bhi.n	8001c92 <HAL_GPIO_Init+0x13a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	e001      	b.n	8001c96 <HAL_GPIO_Init+0x13e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3304      	adds	r3, #4
 8001c96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2bff      	cmp	r3, #255	; 0xff
 8001c9c:	d802      	bhi.n	8001ca4 <HAL_GPIO_Init+0x14c>
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	e002      	b.n	8001caa <HAL_GPIO_Init+0x152>
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	3b08      	subs	r3, #8
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	210f      	movs	r1, #15
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	401a      	ands	r2, r3
 8001cbc:	6a39      	ldr	r1, [r7, #32]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 80b1 	beq.w	8001e3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cd8:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <HAL_GPIO_Init+0x2b8>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a4c      	ldr	r2, [pc, #304]	; (8001e10 <HAL_GPIO_Init+0x2b8>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <HAL_GPIO_Init+0x2b8>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cf0:	4a48      	ldr	r2, [pc, #288]	; (8001e14 <HAL_GPIO_Init+0x2bc>)
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a40      	ldr	r2, [pc, #256]	; (8001e18 <HAL_GPIO_Init+0x2c0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d013      	beq.n	8001d44 <HAL_GPIO_Init+0x1ec>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a3f      	ldr	r2, [pc, #252]	; (8001e1c <HAL_GPIO_Init+0x2c4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d00d      	beq.n	8001d40 <HAL_GPIO_Init+0x1e8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a3e      	ldr	r2, [pc, #248]	; (8001e20 <HAL_GPIO_Init+0x2c8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d007      	beq.n	8001d3c <HAL_GPIO_Init+0x1e4>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a3d      	ldr	r2, [pc, #244]	; (8001e24 <HAL_GPIO_Init+0x2cc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d101      	bne.n	8001d38 <HAL_GPIO_Init+0x1e0>
 8001d34:	2303      	movs	r3, #3
 8001d36:	e006      	b.n	8001d46 <HAL_GPIO_Init+0x1ee>
 8001d38:	2304      	movs	r3, #4
 8001d3a:	e004      	b.n	8001d46 <HAL_GPIO_Init+0x1ee>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e002      	b.n	8001d46 <HAL_GPIO_Init+0x1ee>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_GPIO_Init+0x1ee>
 8001d44:	2300      	movs	r3, #0
 8001d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d48:	f002 0203 	and.w	r2, r2, #3
 8001d4c:	0092      	lsls	r2, r2, #2
 8001d4e:	4093      	lsls	r3, r2
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d56:	492f      	ldr	r1, [pc, #188]	; (8001e14 <HAL_GPIO_Init+0x2bc>)
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d70:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	492c      	ldr	r1, [pc, #176]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d7e:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	4928      	ldr	r1, [pc, #160]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d006      	beq.n	8001da6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d98:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	4922      	ldr	r1, [pc, #136]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
 8001da4:	e006      	b.n	8001db4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	491e      	ldr	r1, [pc, #120]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	4918      	ldr	r1, [pc, #96]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	4914      	ldr	r1, [pc, #80]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d021      	beq.n	8001e2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	490e      	ldr	r1, [pc, #56]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	60cb      	str	r3, [r1, #12]
 8001df4:	e021      	b.n	8001e3a <HAL_GPIO_Init+0x2e2>
 8001df6:	bf00      	nop
 8001df8:	10320000 	.word	0x10320000
 8001dfc:	10310000 	.word	0x10310000
 8001e00:	10220000 	.word	0x10220000
 8001e04:	10210000 	.word	0x10210000
 8001e08:	10120000 	.word	0x10120000
 8001e0c:	10110000 	.word	0x10110000
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010000 	.word	0x40010000
 8001e18:	40010800 	.word	0x40010800
 8001e1c:	40010c00 	.word	0x40010c00
 8001e20:	40011000 	.word	0x40011000
 8001e24:	40011400 	.word	0x40011400
 8001e28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_GPIO_Init+0x304>)
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	4909      	ldr	r1, [pc, #36]	; (8001e5c <HAL_GPIO_Init+0x304>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f47f ae8e 	bne.w	8001b6c <HAL_GPIO_Init+0x14>
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	372c      	adds	r7, #44	; 0x2c
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	40010400 	.word	0x40010400

08001e60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	887b      	ldrh	r3, [r7, #2]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e001      	b.n	8001e82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	807b      	strh	r3, [r7, #2]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e9e:	787b      	ldrb	r3, [r7, #1]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea4:	887a      	ldrh	r2, [r7, #2]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eaa:	e003      	b.n	8001eb4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eac:	887b      	ldrh	r3, [r7, #2]
 8001eae:	041a      	lsls	r2, r3, #16
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	611a      	str	r2, [r3, #16]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d006      	beq.n	8001ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff faf6 	bl	80014d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e12b      	b.n	800215a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff f9e8 	bl	80012ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2224      	movs	r2, #36	; 0x24
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0201 	bic.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f54:	f001 fba0 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8001f58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4a81      	ldr	r2, [pc, #516]	; (8002164 <HAL_I2C_Init+0x274>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d807      	bhi.n	8001f74 <HAL_I2C_Init+0x84>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4a80      	ldr	r2, [pc, #512]	; (8002168 <HAL_I2C_Init+0x278>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	bf94      	ite	ls
 8001f6c:	2301      	movls	r3, #1
 8001f6e:	2300      	movhi	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	e006      	b.n	8001f82 <HAL_I2C_Init+0x92>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4a7d      	ldr	r2, [pc, #500]	; (800216c <HAL_I2C_Init+0x27c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	bf94      	ite	ls
 8001f7c:	2301      	movls	r3, #1
 8001f7e:	2300      	movhi	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e0e7      	b.n	800215a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4a78      	ldr	r2, [pc, #480]	; (8002170 <HAL_I2C_Init+0x280>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	0c9b      	lsrs	r3, r3, #18
 8001f94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4a6a      	ldr	r2, [pc, #424]	; (8002164 <HAL_I2C_Init+0x274>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d802      	bhi.n	8001fc4 <HAL_I2C_Init+0xd4>
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	e009      	b.n	8001fd8 <HAL_I2C_Init+0xe8>
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fca:	fb02 f303 	mul.w	r3, r2, r3
 8001fce:	4a69      	ldr	r2, [pc, #420]	; (8002174 <HAL_I2C_Init+0x284>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	099b      	lsrs	r3, r3, #6
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	495c      	ldr	r1, [pc, #368]	; (8002164 <HAL_I2C_Init+0x274>)
 8001ff4:	428b      	cmp	r3, r1
 8001ff6:	d819      	bhi.n	800202c <HAL_I2C_Init+0x13c>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1e59      	subs	r1, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fbb1 f3f3 	udiv	r3, r1, r3
 8002006:	1c59      	adds	r1, r3, #1
 8002008:	f640 73fc 	movw	r3, #4092	; 0xffc
 800200c:	400b      	ands	r3, r1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00a      	beq.n	8002028 <HAL_I2C_Init+0x138>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1e59      	subs	r1, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002020:	3301      	adds	r3, #1
 8002022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002026:	e051      	b.n	80020cc <HAL_I2C_Init+0x1dc>
 8002028:	2304      	movs	r3, #4
 800202a:	e04f      	b.n	80020cc <HAL_I2C_Init+0x1dc>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d111      	bne.n	8002058 <HAL_I2C_Init+0x168>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1e58      	subs	r0, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6859      	ldr	r1, [r3, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	440b      	add	r3, r1
 8002042:	fbb0 f3f3 	udiv	r3, r0, r3
 8002046:	3301      	adds	r3, #1
 8002048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf0c      	ite	eq
 8002050:	2301      	moveq	r3, #1
 8002052:	2300      	movne	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	e012      	b.n	800207e <HAL_I2C_Init+0x18e>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1e58      	subs	r0, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	0099      	lsls	r1, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	fbb0 f3f3 	udiv	r3, r0, r3
 800206e:	3301      	adds	r3, #1
 8002070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_I2C_Init+0x196>
 8002082:	2301      	movs	r3, #1
 8002084:	e022      	b.n	80020cc <HAL_I2C_Init+0x1dc>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10e      	bne.n	80020ac <HAL_I2C_Init+0x1bc>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1e58      	subs	r0, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6859      	ldr	r1, [r3, #4]
 8002096:	460b      	mov	r3, r1
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	440b      	add	r3, r1
 800209c:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a0:	3301      	adds	r3, #1
 80020a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020aa:	e00f      	b.n	80020cc <HAL_I2C_Init+0x1dc>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1e58      	subs	r0, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	0099      	lsls	r1, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c2:	3301      	adds	r3, #1
 80020c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	6809      	ldr	r1, [r1, #0]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6911      	ldr	r1, [r2, #16]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68d2      	ldr	r2, [r2, #12]
 8002106:	4311      	orrs	r1, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	430b      	orrs	r3, r1
 800210e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0201 	orr.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2220      	movs	r2, #32
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	000186a0 	.word	0x000186a0
 8002168:	001e847f 	.word	0x001e847f
 800216c:	003d08ff 	.word	0x003d08ff
 8002170:	431bde83 	.word	0x431bde83
 8002174:	10624dd3 	.word	0x10624dd3

08002178 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af02      	add	r7, sp, #8
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	4608      	mov	r0, r1
 8002182:	4611      	mov	r1, r2
 8002184:	461a      	mov	r2, r3
 8002186:	4603      	mov	r3, r0
 8002188:	817b      	strh	r3, [r7, #10]
 800218a:	460b      	mov	r3, r1
 800218c:	813b      	strh	r3, [r7, #8]
 800218e:	4613      	mov	r3, r2
 8002190:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002192:	f7ff fbc9 	bl	8001928 <HAL_GetTick>
 8002196:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	f040 80d9 	bne.w	8002358 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2319      	movs	r3, #25
 80021ac:	2201      	movs	r2, #1
 80021ae:	496d      	ldr	r1, [pc, #436]	; (8002364 <HAL_I2C_Mem_Write+0x1ec>)
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fcc1 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021bc:	2302      	movs	r3, #2
 80021be:	e0cc      	b.n	800235a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_I2C_Mem_Write+0x56>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e0c5      	b.n	800235a <HAL_I2C_Mem_Write+0x1e2>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d007      	beq.n	80021f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002202:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2221      	movs	r2, #33	; 0x21
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2240      	movs	r2, #64	; 0x40
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a3a      	ldr	r2, [r7, #32]
 800221e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002224:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a4d      	ldr	r2, [pc, #308]	; (8002368 <HAL_I2C_Mem_Write+0x1f0>)
 8002234:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002236:	88f8      	ldrh	r0, [r7, #6]
 8002238:	893a      	ldrh	r2, [r7, #8]
 800223a:	8979      	ldrh	r1, [r7, #10]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	4603      	mov	r3, r0
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 faf8 	bl	800283c <I2C_RequestMemoryWrite>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d052      	beq.n	80022f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e081      	b.n	800235a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 fd42 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00d      	beq.n	8002282 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	2b04      	cmp	r3, #4
 800226c:	d107      	bne.n	800227e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e06b      	b.n	800235a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	781a      	ldrb	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d11b      	bne.n	80022f8 <HAL_I2C_Mem_Write+0x180>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d017      	beq.n	80022f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1aa      	bne.n	8002256 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 fd2e 	bl	8002d66 <I2C_WaitOnBTFFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00d      	beq.n	800232c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	2b04      	cmp	r3, #4
 8002316:	d107      	bne.n	8002328 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002326:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e016      	b.n	800235a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800233a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	e000      	b.n	800235a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002358:	2302      	movs	r3, #2
  }
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	00100002 	.word	0x00100002
 8002368:	ffff0000 	.word	0xffff0000

0800236c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08c      	sub	sp, #48	; 0x30
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	4608      	mov	r0, r1
 8002376:	4611      	mov	r1, r2
 8002378:	461a      	mov	r2, r3
 800237a:	4603      	mov	r3, r0
 800237c:	817b      	strh	r3, [r7, #10]
 800237e:	460b      	mov	r3, r1
 8002380:	813b      	strh	r3, [r7, #8]
 8002382:	4613      	mov	r3, r2
 8002384:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800238a:	f7ff facd 	bl	8001928 <HAL_GetTick>
 800238e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b20      	cmp	r3, #32
 800239a:	f040 8244 	bne.w	8002826 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	2319      	movs	r3, #25
 80023a4:	2201      	movs	r2, #1
 80023a6:	4982      	ldr	r1, [pc, #520]	; (80025b0 <HAL_I2C_Mem_Read+0x244>)
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 fbc5 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80023b4:	2302      	movs	r3, #2
 80023b6:	e237      	b.n	8002828 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_I2C_Mem_Read+0x5a>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e230      	b.n	8002828 <HAL_I2C_Mem_Read+0x4bc>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d007      	beq.n	80023ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2222      	movs	r2, #34	; 0x22
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2240      	movs	r2, #64	; 0x40
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002416:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800241c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4a62      	ldr	r2, [pc, #392]	; (80025b4 <HAL_I2C_Mem_Read+0x248>)
 800242c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800242e:	88f8      	ldrh	r0, [r7, #6]
 8002430:	893a      	ldrh	r2, [r7, #8]
 8002432:	8979      	ldrh	r1, [r7, #10]
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	4603      	mov	r3, r0
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fa92 	bl	8002968 <I2C_RequestMemoryRead>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e1ec      	b.n	8002828 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	2b00      	cmp	r3, #0
 8002454:	d113      	bne.n	800247e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e1c0      	b.n	8002800 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002482:	2b01      	cmp	r3, #1
 8002484:	d11e      	bne.n	80024c4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002494:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002496:	b672      	cpsid	i
}
 8002498:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024c0:	b662      	cpsie	i
}
 80024c2:	e035      	b.n	8002530 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d11e      	bne.n	800250a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024dc:	b672      	cpsid	i
}
 80024de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002504:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002506:	b662      	cpsie	i
}
 8002508:	e012      	b.n	8002530 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002518:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002530:	e166      	b.n	8002800 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	2b03      	cmp	r3, #3
 8002538:	f200 811f 	bhi.w	800277a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	2b01      	cmp	r3, #1
 8002542:	d123      	bne.n	800258c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002546:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fc4d 	bl	8002de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e167      	b.n	8002828 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	855a      	strh	r2, [r3, #42]	; 0x2a
 800258a:	e139      	b.n	8002800 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002590:	2b02      	cmp	r3, #2
 8002592:	d152      	bne.n	800263a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259a:	2200      	movs	r2, #0
 800259c:	4906      	ldr	r1, [pc, #24]	; (80025b8 <HAL_I2C_Mem_Read+0x24c>)
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 faca 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e13c      	b.n	8002828 <HAL_I2C_Mem_Read+0x4bc>
 80025ae:	bf00      	nop
 80025b0:	00100002 	.word	0x00100002
 80025b4:	ffff0000 	.word	0xffff0000
 80025b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80025bc:	b672      	cpsid	i
}
 80025be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002602:	b662      	cpsie	i
}
 8002604:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002638:	e0e2      	b.n	8002800 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002640:	2200      	movs	r2, #0
 8002642:	497b      	ldr	r1, [pc, #492]	; (8002830 <HAL_I2C_Mem_Read+0x4c4>)
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fa77 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0e9      	b.n	8002828 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002662:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002664:	b672      	cpsid	i
}
 8002666:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800269a:	4b66      	ldr	r3, [pc, #408]	; (8002834 <HAL_I2C_Mem_Read+0x4c8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	08db      	lsrs	r3, r3, #3
 80026a0:	4a65      	ldr	r2, [pc, #404]	; (8002838 <HAL_I2C_Mem_Read+0x4cc>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	0a1a      	lsrs	r2, r3, #8
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	00da      	lsls	r2, r3, #3
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d118      	bne.n	80026f2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f043 0220 	orr.w	r2, r3, #32
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80026e2:	b662      	cpsie	i
}
 80026e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e09a      	b.n	8002828 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d1d9      	bne.n	80026b4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002742:	b662      	cpsie	i
}
 8002744:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002778:	e042      	b.n	8002800 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800277a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fb32 	bl	8002de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e04c      	b.n	8002828 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d118      	bne.n	8002800 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	2b00      	cmp	r3, #0
 8002806:	f47f ae94 	bne.w	8002532 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	e000      	b.n	8002828 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002826:	2302      	movs	r3, #2
  }
}
 8002828:	4618      	mov	r0, r3
 800282a:	3728      	adds	r7, #40	; 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	00010004 	.word	0x00010004
 8002834:	20000000 	.word	0x20000000
 8002838:	14f8b589 	.word	0x14f8b589

0800283c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	4608      	mov	r0, r1
 8002846:	4611      	mov	r1, r2
 8002848:	461a      	mov	r2, r3
 800284a:	4603      	mov	r3, r0
 800284c:	817b      	strh	r3, [r7, #10]
 800284e:	460b      	mov	r3, r1
 8002850:	813b      	strh	r3, [r7, #8]
 8002852:	4613      	mov	r3, r2
 8002854:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002864:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	2200      	movs	r2, #0
 800286e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f960 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00d      	beq.n	800289a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800288c:	d103      	bne.n	8002896 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e05f      	b.n	800295a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800289a:	897b      	ldrh	r3, [r7, #10]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	6a3a      	ldr	r2, [r7, #32]
 80028ae:	492d      	ldr	r1, [pc, #180]	; (8002964 <I2C_RequestMemoryWrite+0x128>)
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f998 	bl	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e04c      	b.n	800295a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d8:	6a39      	ldr	r1, [r7, #32]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 fa02 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00d      	beq.n	8002902 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d107      	bne.n	80028fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e02b      	b.n	800295a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d105      	bne.n	8002914 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002908:	893b      	ldrh	r3, [r7, #8]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	611a      	str	r2, [r3, #16]
 8002912:	e021      	b.n	8002958 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002914:	893b      	ldrh	r3, [r7, #8]
 8002916:	0a1b      	lsrs	r3, r3, #8
 8002918:	b29b      	uxth	r3, r3
 800291a:	b2da      	uxtb	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002924:	6a39      	ldr	r1, [r7, #32]
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f9dc 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00d      	beq.n	800294e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	2b04      	cmp	r3, #4
 8002938:	d107      	bne.n	800294a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002948:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e005      	b.n	800295a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800294e:	893b      	ldrh	r3, [r7, #8]
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	00010002 	.word	0x00010002

08002968 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	4608      	mov	r0, r1
 8002972:	4611      	mov	r1, r2
 8002974:	461a      	mov	r2, r3
 8002976:	4603      	mov	r3, r0
 8002978:	817b      	strh	r3, [r7, #10]
 800297a:	460b      	mov	r3, r1
 800297c:	813b      	strh	r3, [r7, #8]
 800297e:	4613      	mov	r3, r2
 8002980:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002990:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f8c2 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00d      	beq.n	80029d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c8:	d103      	bne.n	80029d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0aa      	b.n	8002b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029d6:	897b      	ldrh	r3, [r7, #10]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	6a3a      	ldr	r2, [r7, #32]
 80029ea:	4952      	ldr	r1, [pc, #328]	; (8002b34 <I2C_RequestMemoryRead+0x1cc>)
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f8fa 	bl	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e097      	b.n	8002b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a14:	6a39      	ldr	r1, [r7, #32]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f964 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00d      	beq.n	8002a3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d107      	bne.n	8002a3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e076      	b.n	8002b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d105      	bne.n	8002a50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a44:	893b      	ldrh	r3, [r7, #8]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	611a      	str	r2, [r3, #16]
 8002a4e:	e021      	b.n	8002a94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a50:	893b      	ldrh	r3, [r7, #8]
 8002a52:	0a1b      	lsrs	r3, r3, #8
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a60:	6a39      	ldr	r1, [r7, #32]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f93e 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00d      	beq.n	8002a8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d107      	bne.n	8002a86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e050      	b.n	8002b2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a8a:	893b      	ldrh	r3, [r7, #8]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a96:	6a39      	ldr	r1, [r7, #32]
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f923 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00d      	beq.n	8002ac0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d107      	bne.n	8002abc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e035      	b.n	8002b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ace:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f82b 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00d      	beq.n	8002b04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af6:	d103      	bne.n	8002b00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e013      	b.n	8002b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b04:	897b      	ldrh	r3, [r7, #10]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	6a3a      	ldr	r2, [r7, #32]
 8002b18:	4906      	ldr	r1, [pc, #24]	; (8002b34 <I2C_RequestMemoryRead+0x1cc>)
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f863 	bl	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	00010002 	.word	0x00010002

08002b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b48:	e025      	b.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b50:	d021      	beq.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b52:	f7fe fee9 	bl	8001928 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d302      	bcc.n	8002b68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d116      	bne.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f043 0220 	orr.w	r2, r3, #32
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e023      	b.n	8002bde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d10d      	bne.n	8002bbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4013      	ands	r3, r2
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	e00c      	b.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d0b6      	beq.n	8002b4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bf4:	e051      	b.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c04:	d123      	bne.n	8002c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f043 0204 	orr.w	r2, r3, #4
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e046      	b.n	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d021      	beq.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c56:	f7fe fe67 	bl	8001928 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d302      	bcc.n	8002c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d116      	bne.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f043 0220 	orr.w	r2, r3, #32
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e020      	b.n	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d10c      	bne.n	8002cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	43da      	mvns	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	bf14      	ite	ne
 8002cb6:	2301      	movne	r3, #1
 8002cb8:	2300      	moveq	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	e00b      	b.n	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	43da      	mvns	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf14      	ite	ne
 8002cd0:	2301      	movne	r3, #1
 8002cd2:	2300      	moveq	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d18d      	bne.n	8002bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cf0:	e02d      	b.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f8ce 	bl	8002e94 <I2C_IsAcknowledgeFailed>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e02d      	b.n	8002d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d021      	beq.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0a:	f7fe fe0d 	bl	8001928 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d302      	bcc.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d116      	bne.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f043 0220 	orr.w	r2, r3, #32
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e007      	b.n	8002d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	2b80      	cmp	r3, #128	; 0x80
 8002d5a:	d1ca      	bne.n	8002cf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d72:	e02d      	b.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f88d 	bl	8002e94 <I2C_IsAcknowledgeFailed>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e02d      	b.n	8002de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d021      	beq.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8c:	f7fe fdcc 	bl	8001928 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d302      	bcc.n	8002da2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d116      	bne.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e007      	b.n	8002de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d1ca      	bne.n	8002d74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002df4:	e042      	b.n	8002e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d119      	bne.n	8002e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0210 	mvn.w	r2, #16
 8002e0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e029      	b.n	8002e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e38:	f7fe fd76 	bl	8001928 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d302      	bcc.n	8002e4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d116      	bne.n	8002e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e007      	b.n	8002e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b40      	cmp	r3, #64	; 0x40
 8002e88:	d1b5      	bne.n	8002df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eaa:	d11b      	bne.n	8002ee4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f043 0204 	orr.w	r2, r3, #4
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e26c      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 8087 	beq.w	800301e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f10:	4b92      	ldr	r3, [pc, #584]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d00c      	beq.n	8002f36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f1c:	4b8f      	ldr	r3, [pc, #572]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d112      	bne.n	8002f4e <HAL_RCC_OscConfig+0x5e>
 8002f28:	4b8c      	ldr	r3, [pc, #560]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d10b      	bne.n	8002f4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f36:	4b89      	ldr	r3, [pc, #548]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d06c      	beq.n	800301c <HAL_RCC_OscConfig+0x12c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d168      	bne.n	800301c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e246      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f56:	d106      	bne.n	8002f66 <HAL_RCC_OscConfig+0x76>
 8002f58:	4b80      	ldr	r3, [pc, #512]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a7f      	ldr	r2, [pc, #508]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	e02e      	b.n	8002fc4 <HAL_RCC_OscConfig+0xd4>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x98>
 8002f6e:	4b7b      	ldr	r3, [pc, #492]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a7a      	ldr	r2, [pc, #488]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b78      	ldr	r3, [pc, #480]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a77      	ldr	r2, [pc, #476]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e01d      	b.n	8002fc4 <HAL_RCC_OscConfig+0xd4>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0xbc>
 8002f92:	4b72      	ldr	r3, [pc, #456]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a71      	ldr	r2, [pc, #452]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b6f      	ldr	r3, [pc, #444]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a6e      	ldr	r2, [pc, #440]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0xd4>
 8002fac:	4b6b      	ldr	r3, [pc, #428]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a6a      	ldr	r2, [pc, #424]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b68      	ldr	r3, [pc, #416]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a67      	ldr	r2, [pc, #412]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fe fcac 	bl	8001928 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7fe fca8 	bl	8001928 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e1fa      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b5d      	ldr	r3, [pc, #372]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0xe4>
 8002ff2:	e014      	b.n	800301e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fc98 	bl	8001928 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7fe fc94 	bl	8001928 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e1e6      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	4b53      	ldr	r3, [pc, #332]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x10c>
 800301a:	e000      	b.n	800301e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d063      	beq.n	80030f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800302a:	4b4c      	ldr	r3, [pc, #304]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003036:	4b49      	ldr	r3, [pc, #292]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b08      	cmp	r3, #8
 8003040:	d11c      	bne.n	800307c <HAL_RCC_OscConfig+0x18c>
 8003042:	4b46      	ldr	r3, [pc, #280]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d116      	bne.n	800307c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	4b43      	ldr	r3, [pc, #268]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_RCC_OscConfig+0x176>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e1ba      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b3d      	ldr	r3, [pc, #244]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4939      	ldr	r1, [pc, #228]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307a:	e03a      	b.n	80030f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003084:	4b36      	ldr	r3, [pc, #216]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308a:	f7fe fc4d 	bl	8001928 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003092:	f7fe fc49 	bl	8001928 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e19b      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	4b2d      	ldr	r3, [pc, #180]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b2a      	ldr	r3, [pc, #168]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4927      	ldr	r1, [pc, #156]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
 80030c4:	e015      	b.n	80030f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c6:	4b26      	ldr	r3, [pc, #152]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7fe fc2c 	bl	8001928 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d4:	f7fe fc28 	bl	8001928 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e17a      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d03a      	beq.n	8003174 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d019      	beq.n	800313a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003106:	4b17      	ldr	r3, [pc, #92]	; (8003164 <HAL_RCC_OscConfig+0x274>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310c:	f7fe fc0c 	bl	8001928 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003114:	f7fe fc08 	bl	8001928 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e15a      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003132:	2001      	movs	r0, #1
 8003134:	f000 fad8 	bl	80036e8 <RCC_Delay>
 8003138:	e01c      	b.n	8003174 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_RCC_OscConfig+0x274>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003140:	f7fe fbf2 	bl	8001928 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003146:	e00f      	b.n	8003168 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003148:	f7fe fbee 	bl	8001928 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d908      	bls.n	8003168 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e140      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	42420000 	.word	0x42420000
 8003164:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003168:	4b9e      	ldr	r3, [pc, #632]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e9      	bne.n	8003148 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80a6 	beq.w	80032ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003186:	4b97      	ldr	r3, [pc, #604]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10d      	bne.n	80031ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003192:	4b94      	ldr	r3, [pc, #592]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	4a93      	ldr	r2, [pc, #588]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319c:	61d3      	str	r3, [r2, #28]
 800319e:	4b91      	ldr	r3, [pc, #580]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031aa:	2301      	movs	r3, #1
 80031ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	4b8e      	ldr	r3, [pc, #568]	; (80033e8 <HAL_RCC_OscConfig+0x4f8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d118      	bne.n	80031ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ba:	4b8b      	ldr	r3, [pc, #556]	; (80033e8 <HAL_RCC_OscConfig+0x4f8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a8a      	ldr	r2, [pc, #552]	; (80033e8 <HAL_RCC_OscConfig+0x4f8>)
 80031c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c6:	f7fe fbaf 	bl	8001928 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ce:	f7fe fbab 	bl	8001928 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b64      	cmp	r3, #100	; 0x64
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e0fd      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	4b81      	ldr	r3, [pc, #516]	; (80033e8 <HAL_RCC_OscConfig+0x4f8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d106      	bne.n	8003202 <HAL_RCC_OscConfig+0x312>
 80031f4:	4b7b      	ldr	r3, [pc, #492]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	4a7a      	ldr	r2, [pc, #488]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6213      	str	r3, [r2, #32]
 8003200:	e02d      	b.n	800325e <HAL_RCC_OscConfig+0x36e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x334>
 800320a:	4b76      	ldr	r3, [pc, #472]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4a75      	ldr	r2, [pc, #468]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	6213      	str	r3, [r2, #32]
 8003216:	4b73      	ldr	r3, [pc, #460]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a72      	ldr	r2, [pc, #456]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800321c:	f023 0304 	bic.w	r3, r3, #4
 8003220:	6213      	str	r3, [r2, #32]
 8003222:	e01c      	b.n	800325e <HAL_RCC_OscConfig+0x36e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b05      	cmp	r3, #5
 800322a:	d10c      	bne.n	8003246 <HAL_RCC_OscConfig+0x356>
 800322c:	4b6d      	ldr	r3, [pc, #436]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4a6c      	ldr	r2, [pc, #432]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003232:	f043 0304 	orr.w	r3, r3, #4
 8003236:	6213      	str	r3, [r2, #32]
 8003238:	4b6a      	ldr	r3, [pc, #424]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4a69      	ldr	r2, [pc, #420]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6213      	str	r3, [r2, #32]
 8003244:	e00b      	b.n	800325e <HAL_RCC_OscConfig+0x36e>
 8003246:	4b67      	ldr	r3, [pc, #412]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	4a66      	ldr	r2, [pc, #408]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	6213      	str	r3, [r2, #32]
 8003252:	4b64      	ldr	r3, [pc, #400]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4a63      	ldr	r2, [pc, #396]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003258:	f023 0304 	bic.w	r3, r3, #4
 800325c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d015      	beq.n	8003292 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003266:	f7fe fb5f 	bl	8001928 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fe fb5b 	bl	8001928 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	; 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0ab      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003284:	4b57      	ldr	r3, [pc, #348]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ee      	beq.n	800326e <HAL_RCC_OscConfig+0x37e>
 8003290:	e014      	b.n	80032bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003292:	f7fe fb49 	bl	8001928 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fe fb45 	bl	8001928 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e095      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b0:	4b4c      	ldr	r3, [pc, #304]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ee      	bne.n	800329a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d105      	bne.n	80032ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c2:	4b48      	ldr	r3, [pc, #288]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	4a47      	ldr	r2, [pc, #284]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 80032c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8081 	beq.w	80033da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d8:	4b42      	ldr	r3, [pc, #264]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d061      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d146      	bne.n	800337a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ec:	4b3f      	ldr	r3, [pc, #252]	; (80033ec <HAL_RCC_OscConfig+0x4fc>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7fe fb19 	bl	8001928 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fe fb15 	bl	8001928 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e067      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330c:	4b35      	ldr	r3, [pc, #212]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d108      	bne.n	8003334 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003322:	4b30      	ldr	r3, [pc, #192]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	492d      	ldr	r1, [pc, #180]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003334:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a19      	ldr	r1, [r3, #32]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	430b      	orrs	r3, r1
 8003346:	4927      	ldr	r1, [pc, #156]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800334c:	4b27      	ldr	r3, [pc, #156]	; (80033ec <HAL_RCC_OscConfig+0x4fc>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003352:	f7fe fae9 	bl	8001928 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335a:	f7fe fae5 	bl	8001928 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e037      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800336c:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x46a>
 8003378:	e02f      	b.n	80033da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <HAL_RCC_OscConfig+0x4fc>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fe fad2 	bl	8001928 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe face 	bl	8001928 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e020      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800339a:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x498>
 80033a6:	e018      	b.n	80033da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e013      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d106      	bne.n	80033d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d001      	beq.n	80033da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40007000 	.word	0x40007000
 80033ec:	42420060 	.word	0x42420060

080033f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0d0      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003404:	4b6a      	ldr	r3, [pc, #424]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d910      	bls.n	8003434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003412:	4b67      	ldr	r3, [pc, #412]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 0207 	bic.w	r2, r3, #7
 800341a:	4965      	ldr	r1, [pc, #404]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003422:	4b63      	ldr	r3, [pc, #396]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d001      	beq.n	8003434 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0b8      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d020      	beq.n	8003482 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800344c:	4b59      	ldr	r3, [pc, #356]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4a58      	ldr	r2, [pc, #352]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003456:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003464:	4b53      	ldr	r3, [pc, #332]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4a52      	ldr	r2, [pc, #328]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800346e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003470:	4b50      	ldr	r3, [pc, #320]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	494d      	ldr	r1, [pc, #308]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	4313      	orrs	r3, r2
 8003480:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d040      	beq.n	8003510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d107      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	4b47      	ldr	r3, [pc, #284]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d115      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e07f      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ae:	4b41      	ldr	r3, [pc, #260]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e073      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	4b3d      	ldr	r3, [pc, #244]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e06b      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ce:	4b39      	ldr	r3, [pc, #228]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f023 0203 	bic.w	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4936      	ldr	r1, [pc, #216]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e0:	f7fe fa22 	bl	8001928 <HAL_GetTick>
 80034e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e8:	f7fe fa1e 	bl	8001928 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e053      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	4b2d      	ldr	r3, [pc, #180]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 020c 	and.w	r2, r3, #12
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	429a      	cmp	r2, r3
 800350e:	d1eb      	bne.n	80034e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003510:	4b27      	ldr	r3, [pc, #156]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d210      	bcs.n	8003540 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b24      	ldr	r3, [pc, #144]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 0207 	bic.w	r2, r3, #7
 8003526:	4922      	ldr	r1, [pc, #136]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	4b20      	ldr	r3, [pc, #128]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e032      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800354c:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	4916      	ldr	r1, [pc, #88]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	4313      	orrs	r3, r2
 800355c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d009      	beq.n	800357e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800356a:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	490e      	ldr	r1, [pc, #56]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800357e:	f000 f821 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 8003582:	4602      	mov	r2, r0
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	490a      	ldr	r1, [pc, #40]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	5ccb      	ldrb	r3, [r1, r3]
 8003592:	fa22 f303 	lsr.w	r3, r2, r3
 8003596:	4a09      	ldr	r2, [pc, #36]	; (80035bc <HAL_RCC_ClockConfig+0x1cc>)
 8003598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800359a:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCC_ClockConfig+0x1d0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe f980 	bl	80018a4 <HAL_InitTick>

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40022000 	.word	0x40022000
 80035b4:	40021000 	.word	0x40021000
 80035b8:	08006318 	.word	0x08006318
 80035bc:	20000000 	.word	0x20000000
 80035c0:	20000004 	.word	0x20000004

080035c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c4:	b490      	push	{r4, r7}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035ca:	4b2a      	ldr	r3, [pc, #168]	; (8003674 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035cc:	1d3c      	adds	r4, r7, #4
 80035ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035d4:	f240 2301 	movw	r3, #513	; 0x201
 80035d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	2300      	movs	r3, #0
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035ee:	4b22      	ldr	r3, [pc, #136]	; (8003678 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d002      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x40>
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d003      	beq.n	800360a <HAL_RCC_GetSysClockFreq+0x46>
 8003602:	e02d      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003604:	4b1d      	ldr	r3, [pc, #116]	; (800367c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003606:	623b      	str	r3, [r7, #32]
      break;
 8003608:	e02d      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	0c9b      	lsrs	r3, r3, #18
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003616:	4413      	add	r3, r2
 8003618:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800361c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003628:	4b13      	ldr	r3, [pc, #76]	; (8003678 <HAL_RCC_GetSysClockFreq+0xb4>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	0c5b      	lsrs	r3, r3, #17
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003636:	4413      	add	r3, r2
 8003638:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800363c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	4a0e      	ldr	r2, [pc, #56]	; (800367c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003642:	fb02 f203 	mul.w	r2, r2, r3
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
 800364e:	e004      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	4a0b      	ldr	r2, [pc, #44]	; (8003680 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003654:	fb02 f303 	mul.w	r3, r2, r3
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	623b      	str	r3, [r7, #32]
      break;
 800365e:	e002      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003662:	623b      	str	r3, [r7, #32]
      break;
 8003664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003666:	6a3b      	ldr	r3, [r7, #32]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3728      	adds	r7, #40	; 0x28
 800366c:	46bd      	mov	sp, r7
 800366e:	bc90      	pop	{r4, r7}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	08006308 	.word	0x08006308
 8003678:	40021000 	.word	0x40021000
 800367c:	007a1200 	.word	0x007a1200
 8003680:	003d0900 	.word	0x003d0900

08003684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003688:	4b02      	ldr	r3, [pc, #8]	; (8003694 <HAL_RCC_GetHCLKFreq+0x10>)
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr
 8003694:	20000000 	.word	0x20000000

08003698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800369c:	f7ff fff2 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	0a1b      	lsrs	r3, r3, #8
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40021000 	.word	0x40021000
 80036bc:	08006328 	.word	0x08006328

080036c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036c4:	f7ff ffde 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	0adb      	lsrs	r3, r3, #11
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4903      	ldr	r1, [pc, #12]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000
 80036e4:	08006328 	.word	0x08006328

080036e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <RCC_Delay+0x34>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <RCC_Delay+0x38>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	0a5b      	lsrs	r3, r3, #9
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	fb02 f303 	mul.w	r3, r2, r3
 8003702:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003704:	bf00      	nop
  }
  while (Delay --);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1e5a      	subs	r2, r3, #1
 800370a:	60fa      	str	r2, [r7, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f9      	bne.n	8003704 <RCC_Delay+0x1c>
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	20000000 	.word	0x20000000
 8003720:	10624dd3 	.word	0x10624dd3

08003724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e03f      	b.n	80037b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fe f830 	bl	80017b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2224      	movs	r2, #36	; 0x24
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f829 	bl	80037c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800377c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800378c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800379c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037fa:	f023 030c 	bic.w	r3, r3, #12
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	68b9      	ldr	r1, [r7, #8]
 8003804:	430b      	orrs	r3, r1
 8003806:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a2c      	ldr	r2, [pc, #176]	; (80038d4 <UART_SetConfig+0x114>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d103      	bne.n	8003830 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003828:	f7ff ff4a 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	e002      	b.n	8003836 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003830:	f7ff ff32 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8003834:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	009a      	lsls	r2, r3, #2
 8003840:	441a      	add	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	4a22      	ldr	r2, [pc, #136]	; (80038d8 <UART_SetConfig+0x118>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	0119      	lsls	r1, r3, #4
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	009a      	lsls	r2, r3, #2
 8003860:	441a      	add	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	fbb2 f2f3 	udiv	r2, r2, r3
 800386c:	4b1a      	ldr	r3, [pc, #104]	; (80038d8 <UART_SetConfig+0x118>)
 800386e:	fba3 0302 	umull	r0, r3, r3, r2
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	2064      	movs	r0, #100	; 0x64
 8003876:	fb00 f303 	mul.w	r3, r0, r3
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	3332      	adds	r3, #50	; 0x32
 8003880:	4a15      	ldr	r2, [pc, #84]	; (80038d8 <UART_SetConfig+0x118>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800388c:	4419      	add	r1, r3
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	009a      	lsls	r2, r3, #2
 8003898:	441a      	add	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <UART_SetConfig+0x118>)
 80038a6:	fba3 0302 	umull	r0, r3, r3, r2
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	2064      	movs	r0, #100	; 0x64
 80038ae:	fb00 f303 	mul.w	r3, r0, r3
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	3332      	adds	r3, #50	; 0x32
 80038b8:	4a07      	ldr	r2, [pc, #28]	; (80038d8 <UART_SetConfig+0x118>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	f003 020f 	and.w	r2, r3, #15
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	440a      	add	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40013800 	.word	0x40013800
 80038d8:	51eb851f 	.word	0x51eb851f

080038dc <__errno>:
 80038dc:	4b01      	ldr	r3, [pc, #4]	; (80038e4 <__errno+0x8>)
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	2000000c 	.word	0x2000000c

080038e8 <__libc_init_array>:
 80038e8:	b570      	push	{r4, r5, r6, lr}
 80038ea:	2600      	movs	r6, #0
 80038ec:	4d0c      	ldr	r5, [pc, #48]	; (8003920 <__libc_init_array+0x38>)
 80038ee:	4c0d      	ldr	r4, [pc, #52]	; (8003924 <__libc_init_array+0x3c>)
 80038f0:	1b64      	subs	r4, r4, r5
 80038f2:	10a4      	asrs	r4, r4, #2
 80038f4:	42a6      	cmp	r6, r4
 80038f6:	d109      	bne.n	800390c <__libc_init_array+0x24>
 80038f8:	f002 fcf8 	bl	80062ec <_init>
 80038fc:	2600      	movs	r6, #0
 80038fe:	4d0a      	ldr	r5, [pc, #40]	; (8003928 <__libc_init_array+0x40>)
 8003900:	4c0a      	ldr	r4, [pc, #40]	; (800392c <__libc_init_array+0x44>)
 8003902:	1b64      	subs	r4, r4, r5
 8003904:	10a4      	asrs	r4, r4, #2
 8003906:	42a6      	cmp	r6, r4
 8003908:	d105      	bne.n	8003916 <__libc_init_array+0x2e>
 800390a:	bd70      	pop	{r4, r5, r6, pc}
 800390c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003910:	4798      	blx	r3
 8003912:	3601      	adds	r6, #1
 8003914:	e7ee      	b.n	80038f4 <__libc_init_array+0xc>
 8003916:	f855 3b04 	ldr.w	r3, [r5], #4
 800391a:	4798      	blx	r3
 800391c:	3601      	adds	r6, #1
 800391e:	e7f2      	b.n	8003906 <__libc_init_array+0x1e>
 8003920:	08006714 	.word	0x08006714
 8003924:	08006714 	.word	0x08006714
 8003928:	08006714 	.word	0x08006714
 800392c:	08006718 	.word	0x08006718

08003930 <memset>:
 8003930:	4603      	mov	r3, r0
 8003932:	4402      	add	r2, r0
 8003934:	4293      	cmp	r3, r2
 8003936:	d100      	bne.n	800393a <memset+0xa>
 8003938:	4770      	bx	lr
 800393a:	f803 1b01 	strb.w	r1, [r3], #1
 800393e:	e7f9      	b.n	8003934 <memset+0x4>

08003940 <__cvt>:
 8003940:	2b00      	cmp	r3, #0
 8003942:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003946:	461f      	mov	r7, r3
 8003948:	bfbb      	ittet	lt
 800394a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800394e:	461f      	movlt	r7, r3
 8003950:	2300      	movge	r3, #0
 8003952:	232d      	movlt	r3, #45	; 0x2d
 8003954:	b088      	sub	sp, #32
 8003956:	4614      	mov	r4, r2
 8003958:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800395a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800395c:	7013      	strb	r3, [r2, #0]
 800395e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003960:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003964:	f023 0820 	bic.w	r8, r3, #32
 8003968:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800396c:	d005      	beq.n	800397a <__cvt+0x3a>
 800396e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003972:	d100      	bne.n	8003976 <__cvt+0x36>
 8003974:	3501      	adds	r5, #1
 8003976:	2302      	movs	r3, #2
 8003978:	e000      	b.n	800397c <__cvt+0x3c>
 800397a:	2303      	movs	r3, #3
 800397c:	aa07      	add	r2, sp, #28
 800397e:	9204      	str	r2, [sp, #16]
 8003980:	aa06      	add	r2, sp, #24
 8003982:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003986:	e9cd 3500 	strd	r3, r5, [sp]
 800398a:	4622      	mov	r2, r4
 800398c:	463b      	mov	r3, r7
 800398e:	f000 fcc7 	bl	8004320 <_dtoa_r>
 8003992:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003996:	4606      	mov	r6, r0
 8003998:	d102      	bne.n	80039a0 <__cvt+0x60>
 800399a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800399c:	07db      	lsls	r3, r3, #31
 800399e:	d522      	bpl.n	80039e6 <__cvt+0xa6>
 80039a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80039a4:	eb06 0905 	add.w	r9, r6, r5
 80039a8:	d110      	bne.n	80039cc <__cvt+0x8c>
 80039aa:	7833      	ldrb	r3, [r6, #0]
 80039ac:	2b30      	cmp	r3, #48	; 0x30
 80039ae:	d10a      	bne.n	80039c6 <__cvt+0x86>
 80039b0:	2200      	movs	r2, #0
 80039b2:	2300      	movs	r3, #0
 80039b4:	4620      	mov	r0, r4
 80039b6:	4639      	mov	r1, r7
 80039b8:	f7fc fff6 	bl	80009a8 <__aeabi_dcmpeq>
 80039bc:	b918      	cbnz	r0, 80039c6 <__cvt+0x86>
 80039be:	f1c5 0501 	rsb	r5, r5, #1
 80039c2:	f8ca 5000 	str.w	r5, [sl]
 80039c6:	f8da 3000 	ldr.w	r3, [sl]
 80039ca:	4499      	add	r9, r3
 80039cc:	2200      	movs	r2, #0
 80039ce:	2300      	movs	r3, #0
 80039d0:	4620      	mov	r0, r4
 80039d2:	4639      	mov	r1, r7
 80039d4:	f7fc ffe8 	bl	80009a8 <__aeabi_dcmpeq>
 80039d8:	b108      	cbz	r0, 80039de <__cvt+0x9e>
 80039da:	f8cd 901c 	str.w	r9, [sp, #28]
 80039de:	2230      	movs	r2, #48	; 0x30
 80039e0:	9b07      	ldr	r3, [sp, #28]
 80039e2:	454b      	cmp	r3, r9
 80039e4:	d307      	bcc.n	80039f6 <__cvt+0xb6>
 80039e6:	4630      	mov	r0, r6
 80039e8:	9b07      	ldr	r3, [sp, #28]
 80039ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80039ec:	1b9b      	subs	r3, r3, r6
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	b008      	add	sp, #32
 80039f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f6:	1c59      	adds	r1, r3, #1
 80039f8:	9107      	str	r1, [sp, #28]
 80039fa:	701a      	strb	r2, [r3, #0]
 80039fc:	e7f0      	b.n	80039e0 <__cvt+0xa0>

080039fe <__exponent>:
 80039fe:	4603      	mov	r3, r0
 8003a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a02:	2900      	cmp	r1, #0
 8003a04:	f803 2b02 	strb.w	r2, [r3], #2
 8003a08:	bfb6      	itet	lt
 8003a0a:	222d      	movlt	r2, #45	; 0x2d
 8003a0c:	222b      	movge	r2, #43	; 0x2b
 8003a0e:	4249      	neglt	r1, r1
 8003a10:	2909      	cmp	r1, #9
 8003a12:	7042      	strb	r2, [r0, #1]
 8003a14:	dd2b      	ble.n	8003a6e <__exponent+0x70>
 8003a16:	f10d 0407 	add.w	r4, sp, #7
 8003a1a:	46a4      	mov	ip, r4
 8003a1c:	270a      	movs	r7, #10
 8003a1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003a22:	460a      	mov	r2, r1
 8003a24:	46a6      	mov	lr, r4
 8003a26:	fb07 1516 	mls	r5, r7, r6, r1
 8003a2a:	2a63      	cmp	r2, #99	; 0x63
 8003a2c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003a30:	4631      	mov	r1, r6
 8003a32:	f104 34ff 	add.w	r4, r4, #4294967295
 8003a36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003a3a:	dcf0      	bgt.n	8003a1e <__exponent+0x20>
 8003a3c:	3130      	adds	r1, #48	; 0x30
 8003a3e:	f1ae 0502 	sub.w	r5, lr, #2
 8003a42:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003a46:	4629      	mov	r1, r5
 8003a48:	1c44      	adds	r4, r0, #1
 8003a4a:	4561      	cmp	r1, ip
 8003a4c:	d30a      	bcc.n	8003a64 <__exponent+0x66>
 8003a4e:	f10d 0209 	add.w	r2, sp, #9
 8003a52:	eba2 020e 	sub.w	r2, r2, lr
 8003a56:	4565      	cmp	r5, ip
 8003a58:	bf88      	it	hi
 8003a5a:	2200      	movhi	r2, #0
 8003a5c:	4413      	add	r3, r2
 8003a5e:	1a18      	subs	r0, r3, r0
 8003a60:	b003      	add	sp, #12
 8003a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a68:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003a6c:	e7ed      	b.n	8003a4a <__exponent+0x4c>
 8003a6e:	2330      	movs	r3, #48	; 0x30
 8003a70:	3130      	adds	r1, #48	; 0x30
 8003a72:	7083      	strb	r3, [r0, #2]
 8003a74:	70c1      	strb	r1, [r0, #3]
 8003a76:	1d03      	adds	r3, r0, #4
 8003a78:	e7f1      	b.n	8003a5e <__exponent+0x60>
	...

08003a7c <_printf_float>:
 8003a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a80:	b091      	sub	sp, #68	; 0x44
 8003a82:	460c      	mov	r4, r1
 8003a84:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003a88:	4616      	mov	r6, r2
 8003a8a:	461f      	mov	r7, r3
 8003a8c:	4605      	mov	r5, r0
 8003a8e:	f001 fa35 	bl	8004efc <_localeconv_r>
 8003a92:	6803      	ldr	r3, [r0, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	9309      	str	r3, [sp, #36]	; 0x24
 8003a98:	f7fc fb5a 	bl	8000150 <strlen>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	930e      	str	r3, [sp, #56]	; 0x38
 8003aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8003aa4:	900a      	str	r0, [sp, #40]	; 0x28
 8003aa6:	3307      	adds	r3, #7
 8003aa8:	f023 0307 	bic.w	r3, r3, #7
 8003aac:	f103 0208 	add.w	r2, r3, #8
 8003ab0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003ab4:	f8d4 b000 	ldr.w	fp, [r4]
 8003ab8:	f8c8 2000 	str.w	r2, [r8]
 8003abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ac4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003ac8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003acc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ace:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad2:	4640      	mov	r0, r8
 8003ad4:	4b9c      	ldr	r3, [pc, #624]	; (8003d48 <_printf_float+0x2cc>)
 8003ad6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ad8:	f7fc ff98 	bl	8000a0c <__aeabi_dcmpun>
 8003adc:	bb70      	cbnz	r0, 8003b3c <_printf_float+0xc0>
 8003ade:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae2:	4640      	mov	r0, r8
 8003ae4:	4b98      	ldr	r3, [pc, #608]	; (8003d48 <_printf_float+0x2cc>)
 8003ae6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ae8:	f7fc ff72 	bl	80009d0 <__aeabi_dcmple>
 8003aec:	bb30      	cbnz	r0, 8003b3c <_printf_float+0xc0>
 8003aee:	2200      	movs	r2, #0
 8003af0:	2300      	movs	r3, #0
 8003af2:	4640      	mov	r0, r8
 8003af4:	4651      	mov	r1, sl
 8003af6:	f7fc ff61 	bl	80009bc <__aeabi_dcmplt>
 8003afa:	b110      	cbz	r0, 8003b02 <_printf_float+0x86>
 8003afc:	232d      	movs	r3, #45	; 0x2d
 8003afe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b02:	4b92      	ldr	r3, [pc, #584]	; (8003d4c <_printf_float+0x2d0>)
 8003b04:	4892      	ldr	r0, [pc, #584]	; (8003d50 <_printf_float+0x2d4>)
 8003b06:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003b0a:	bf94      	ite	ls
 8003b0c:	4698      	movls	r8, r3
 8003b0e:	4680      	movhi	r8, r0
 8003b10:	2303      	movs	r3, #3
 8003b12:	f04f 0a00 	mov.w	sl, #0
 8003b16:	6123      	str	r3, [r4, #16]
 8003b18:	f02b 0304 	bic.w	r3, fp, #4
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	4633      	mov	r3, r6
 8003b20:	4621      	mov	r1, r4
 8003b22:	4628      	mov	r0, r5
 8003b24:	9700      	str	r7, [sp, #0]
 8003b26:	aa0f      	add	r2, sp, #60	; 0x3c
 8003b28:	f000 f9d4 	bl	8003ed4 <_printf_common>
 8003b2c:	3001      	adds	r0, #1
 8003b2e:	f040 8090 	bne.w	8003c52 <_printf_float+0x1d6>
 8003b32:	f04f 30ff 	mov.w	r0, #4294967295
 8003b36:	b011      	add	sp, #68	; 0x44
 8003b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	4653      	mov	r3, sl
 8003b40:	4640      	mov	r0, r8
 8003b42:	4651      	mov	r1, sl
 8003b44:	f7fc ff62 	bl	8000a0c <__aeabi_dcmpun>
 8003b48:	b148      	cbz	r0, 8003b5e <_printf_float+0xe2>
 8003b4a:	f1ba 0f00 	cmp.w	sl, #0
 8003b4e:	bfb8      	it	lt
 8003b50:	232d      	movlt	r3, #45	; 0x2d
 8003b52:	4880      	ldr	r0, [pc, #512]	; (8003d54 <_printf_float+0x2d8>)
 8003b54:	bfb8      	it	lt
 8003b56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b5a:	4b7f      	ldr	r3, [pc, #508]	; (8003d58 <_printf_float+0x2dc>)
 8003b5c:	e7d3      	b.n	8003b06 <_printf_float+0x8a>
 8003b5e:	6863      	ldr	r3, [r4, #4]
 8003b60:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	d142      	bne.n	8003bee <_printf_float+0x172>
 8003b68:	2306      	movs	r3, #6
 8003b6a:	6063      	str	r3, [r4, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	9206      	str	r2, [sp, #24]
 8003b70:	aa0e      	add	r2, sp, #56	; 0x38
 8003b72:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003b76:	aa0d      	add	r2, sp, #52	; 0x34
 8003b78:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003b7c:	9203      	str	r2, [sp, #12]
 8003b7e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003b82:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003b86:	6023      	str	r3, [r4, #0]
 8003b88:	6863      	ldr	r3, [r4, #4]
 8003b8a:	4642      	mov	r2, r8
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	4628      	mov	r0, r5
 8003b90:	4653      	mov	r3, sl
 8003b92:	910b      	str	r1, [sp, #44]	; 0x2c
 8003b94:	f7ff fed4 	bl	8003940 <__cvt>
 8003b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b9a:	4680      	mov	r8, r0
 8003b9c:	2947      	cmp	r1, #71	; 0x47
 8003b9e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ba0:	d108      	bne.n	8003bb4 <_printf_float+0x138>
 8003ba2:	1cc8      	adds	r0, r1, #3
 8003ba4:	db02      	blt.n	8003bac <_printf_float+0x130>
 8003ba6:	6863      	ldr	r3, [r4, #4]
 8003ba8:	4299      	cmp	r1, r3
 8003baa:	dd40      	ble.n	8003c2e <_printf_float+0x1b2>
 8003bac:	f1a9 0902 	sub.w	r9, r9, #2
 8003bb0:	fa5f f989 	uxtb.w	r9, r9
 8003bb4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003bb8:	d81f      	bhi.n	8003bfa <_printf_float+0x17e>
 8003bba:	464a      	mov	r2, r9
 8003bbc:	3901      	subs	r1, #1
 8003bbe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003bc2:	910d      	str	r1, [sp, #52]	; 0x34
 8003bc4:	f7ff ff1b 	bl	80039fe <__exponent>
 8003bc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bca:	4682      	mov	sl, r0
 8003bcc:	1813      	adds	r3, r2, r0
 8003bce:	2a01      	cmp	r2, #1
 8003bd0:	6123      	str	r3, [r4, #16]
 8003bd2:	dc02      	bgt.n	8003bda <_printf_float+0x15e>
 8003bd4:	6822      	ldr	r2, [r4, #0]
 8003bd6:	07d2      	lsls	r2, r2, #31
 8003bd8:	d501      	bpl.n	8003bde <_printf_float+0x162>
 8003bda:	3301      	adds	r3, #1
 8003bdc:	6123      	str	r3, [r4, #16]
 8003bde:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d09b      	beq.n	8003b1e <_printf_float+0xa2>
 8003be6:	232d      	movs	r3, #45	; 0x2d
 8003be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bec:	e797      	b.n	8003b1e <_printf_float+0xa2>
 8003bee:	2947      	cmp	r1, #71	; 0x47
 8003bf0:	d1bc      	bne.n	8003b6c <_printf_float+0xf0>
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1ba      	bne.n	8003b6c <_printf_float+0xf0>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e7b7      	b.n	8003b6a <_printf_float+0xee>
 8003bfa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003bfe:	d118      	bne.n	8003c32 <_printf_float+0x1b6>
 8003c00:	2900      	cmp	r1, #0
 8003c02:	6863      	ldr	r3, [r4, #4]
 8003c04:	dd0b      	ble.n	8003c1e <_printf_float+0x1a2>
 8003c06:	6121      	str	r1, [r4, #16]
 8003c08:	b913      	cbnz	r3, 8003c10 <_printf_float+0x194>
 8003c0a:	6822      	ldr	r2, [r4, #0]
 8003c0c:	07d0      	lsls	r0, r2, #31
 8003c0e:	d502      	bpl.n	8003c16 <_printf_float+0x19a>
 8003c10:	3301      	adds	r3, #1
 8003c12:	440b      	add	r3, r1
 8003c14:	6123      	str	r3, [r4, #16]
 8003c16:	f04f 0a00 	mov.w	sl, #0
 8003c1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8003c1c:	e7df      	b.n	8003bde <_printf_float+0x162>
 8003c1e:	b913      	cbnz	r3, 8003c26 <_printf_float+0x1aa>
 8003c20:	6822      	ldr	r2, [r4, #0]
 8003c22:	07d2      	lsls	r2, r2, #31
 8003c24:	d501      	bpl.n	8003c2a <_printf_float+0x1ae>
 8003c26:	3302      	adds	r3, #2
 8003c28:	e7f4      	b.n	8003c14 <_printf_float+0x198>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e7f2      	b.n	8003c14 <_printf_float+0x198>
 8003c2e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c34:	4299      	cmp	r1, r3
 8003c36:	db05      	blt.n	8003c44 <_printf_float+0x1c8>
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	6121      	str	r1, [r4, #16]
 8003c3c:	07d8      	lsls	r0, r3, #31
 8003c3e:	d5ea      	bpl.n	8003c16 <_printf_float+0x19a>
 8003c40:	1c4b      	adds	r3, r1, #1
 8003c42:	e7e7      	b.n	8003c14 <_printf_float+0x198>
 8003c44:	2900      	cmp	r1, #0
 8003c46:	bfcc      	ite	gt
 8003c48:	2201      	movgt	r2, #1
 8003c4a:	f1c1 0202 	rsble	r2, r1, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	e7e0      	b.n	8003c14 <_printf_float+0x198>
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	055a      	lsls	r2, r3, #21
 8003c56:	d407      	bmi.n	8003c68 <_printf_float+0x1ec>
 8003c58:	6923      	ldr	r3, [r4, #16]
 8003c5a:	4642      	mov	r2, r8
 8003c5c:	4631      	mov	r1, r6
 8003c5e:	4628      	mov	r0, r5
 8003c60:	47b8      	blx	r7
 8003c62:	3001      	adds	r0, #1
 8003c64:	d12b      	bne.n	8003cbe <_printf_float+0x242>
 8003c66:	e764      	b.n	8003b32 <_printf_float+0xb6>
 8003c68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003c6c:	f240 80dd 	bls.w	8003e2a <_printf_float+0x3ae>
 8003c70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c74:	2200      	movs	r2, #0
 8003c76:	2300      	movs	r3, #0
 8003c78:	f7fc fe96 	bl	80009a8 <__aeabi_dcmpeq>
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	d033      	beq.n	8003ce8 <_printf_float+0x26c>
 8003c80:	2301      	movs	r3, #1
 8003c82:	4631      	mov	r1, r6
 8003c84:	4628      	mov	r0, r5
 8003c86:	4a35      	ldr	r2, [pc, #212]	; (8003d5c <_printf_float+0x2e0>)
 8003c88:	47b8      	blx	r7
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	f43f af51 	beq.w	8003b32 <_printf_float+0xb6>
 8003c90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c94:	429a      	cmp	r2, r3
 8003c96:	db02      	blt.n	8003c9e <_printf_float+0x222>
 8003c98:	6823      	ldr	r3, [r4, #0]
 8003c9a:	07d8      	lsls	r0, r3, #31
 8003c9c:	d50f      	bpl.n	8003cbe <_printf_float+0x242>
 8003c9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ca2:	4631      	mov	r1, r6
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	47b8      	blx	r7
 8003ca8:	3001      	adds	r0, #1
 8003caa:	f43f af42 	beq.w	8003b32 <_printf_float+0xb6>
 8003cae:	f04f 0800 	mov.w	r8, #0
 8003cb2:	f104 091a 	add.w	r9, r4, #26
 8003cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	4543      	cmp	r3, r8
 8003cbc:	dc09      	bgt.n	8003cd2 <_printf_float+0x256>
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	079b      	lsls	r3, r3, #30
 8003cc2:	f100 8102 	bmi.w	8003eca <_printf_float+0x44e>
 8003cc6:	68e0      	ldr	r0, [r4, #12]
 8003cc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cca:	4298      	cmp	r0, r3
 8003ccc:	bfb8      	it	lt
 8003cce:	4618      	movlt	r0, r3
 8003cd0:	e731      	b.n	8003b36 <_printf_float+0xba>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	464a      	mov	r2, r9
 8003cd6:	4631      	mov	r1, r6
 8003cd8:	4628      	mov	r0, r5
 8003cda:	47b8      	blx	r7
 8003cdc:	3001      	adds	r0, #1
 8003cde:	f43f af28 	beq.w	8003b32 <_printf_float+0xb6>
 8003ce2:	f108 0801 	add.w	r8, r8, #1
 8003ce6:	e7e6      	b.n	8003cb6 <_printf_float+0x23a>
 8003ce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	dc38      	bgt.n	8003d60 <_printf_float+0x2e4>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	4631      	mov	r1, r6
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <_printf_float+0x2e0>)
 8003cf6:	47b8      	blx	r7
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	f43f af1a 	beq.w	8003b32 <_printf_float+0xb6>
 8003cfe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d02:	4313      	orrs	r3, r2
 8003d04:	d102      	bne.n	8003d0c <_printf_float+0x290>
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	07d9      	lsls	r1, r3, #31
 8003d0a:	d5d8      	bpl.n	8003cbe <_printf_float+0x242>
 8003d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d10:	4631      	mov	r1, r6
 8003d12:	4628      	mov	r0, r5
 8003d14:	47b8      	blx	r7
 8003d16:	3001      	adds	r0, #1
 8003d18:	f43f af0b 	beq.w	8003b32 <_printf_float+0xb6>
 8003d1c:	f04f 0900 	mov.w	r9, #0
 8003d20:	f104 0a1a 	add.w	sl, r4, #26
 8003d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d26:	425b      	negs	r3, r3
 8003d28:	454b      	cmp	r3, r9
 8003d2a:	dc01      	bgt.n	8003d30 <_printf_float+0x2b4>
 8003d2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d2e:	e794      	b.n	8003c5a <_printf_float+0x1de>
 8003d30:	2301      	movs	r3, #1
 8003d32:	4652      	mov	r2, sl
 8003d34:	4631      	mov	r1, r6
 8003d36:	4628      	mov	r0, r5
 8003d38:	47b8      	blx	r7
 8003d3a:	3001      	adds	r0, #1
 8003d3c:	f43f aef9 	beq.w	8003b32 <_printf_float+0xb6>
 8003d40:	f109 0901 	add.w	r9, r9, #1
 8003d44:	e7ee      	b.n	8003d24 <_printf_float+0x2a8>
 8003d46:	bf00      	nop
 8003d48:	7fefffff 	.word	0x7fefffff
 8003d4c:	08006334 	.word	0x08006334
 8003d50:	08006338 	.word	0x08006338
 8003d54:	08006340 	.word	0x08006340
 8003d58:	0800633c 	.word	0x0800633c
 8003d5c:	08006344 	.word	0x08006344
 8003d60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d64:	429a      	cmp	r2, r3
 8003d66:	bfa8      	it	ge
 8003d68:	461a      	movge	r2, r3
 8003d6a:	2a00      	cmp	r2, #0
 8003d6c:	4691      	mov	r9, r2
 8003d6e:	dc37      	bgt.n	8003de0 <_printf_float+0x364>
 8003d70:	f04f 0b00 	mov.w	fp, #0
 8003d74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d78:	f104 021a 	add.w	r2, r4, #26
 8003d7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003d80:	ebaa 0309 	sub.w	r3, sl, r9
 8003d84:	455b      	cmp	r3, fp
 8003d86:	dc33      	bgt.n	8003df0 <_printf_float+0x374>
 8003d88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	db3b      	blt.n	8003e08 <_printf_float+0x38c>
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	07da      	lsls	r2, r3, #31
 8003d94:	d438      	bmi.n	8003e08 <_printf_float+0x38c>
 8003d96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d98:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d9a:	eba2 030a 	sub.w	r3, r2, sl
 8003d9e:	eba2 0901 	sub.w	r9, r2, r1
 8003da2:	4599      	cmp	r9, r3
 8003da4:	bfa8      	it	ge
 8003da6:	4699      	movge	r9, r3
 8003da8:	f1b9 0f00 	cmp.w	r9, #0
 8003dac:	dc34      	bgt.n	8003e18 <_printf_float+0x39c>
 8003dae:	f04f 0800 	mov.w	r8, #0
 8003db2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003db6:	f104 0a1a 	add.w	sl, r4, #26
 8003dba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	eba3 0309 	sub.w	r3, r3, r9
 8003dc4:	4543      	cmp	r3, r8
 8003dc6:	f77f af7a 	ble.w	8003cbe <_printf_float+0x242>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	4652      	mov	r2, sl
 8003dce:	4631      	mov	r1, r6
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	47b8      	blx	r7
 8003dd4:	3001      	adds	r0, #1
 8003dd6:	f43f aeac 	beq.w	8003b32 <_printf_float+0xb6>
 8003dda:	f108 0801 	add.w	r8, r8, #1
 8003dde:	e7ec      	b.n	8003dba <_printf_float+0x33e>
 8003de0:	4613      	mov	r3, r2
 8003de2:	4631      	mov	r1, r6
 8003de4:	4642      	mov	r2, r8
 8003de6:	4628      	mov	r0, r5
 8003de8:	47b8      	blx	r7
 8003dea:	3001      	adds	r0, #1
 8003dec:	d1c0      	bne.n	8003d70 <_printf_float+0x2f4>
 8003dee:	e6a0      	b.n	8003b32 <_printf_float+0xb6>
 8003df0:	2301      	movs	r3, #1
 8003df2:	4631      	mov	r1, r6
 8003df4:	4628      	mov	r0, r5
 8003df6:	920b      	str	r2, [sp, #44]	; 0x2c
 8003df8:	47b8      	blx	r7
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	f43f ae99 	beq.w	8003b32 <_printf_float+0xb6>
 8003e00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e02:	f10b 0b01 	add.w	fp, fp, #1
 8003e06:	e7b9      	b.n	8003d7c <_printf_float+0x300>
 8003e08:	4631      	mov	r1, r6
 8003e0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e0e:	4628      	mov	r0, r5
 8003e10:	47b8      	blx	r7
 8003e12:	3001      	adds	r0, #1
 8003e14:	d1bf      	bne.n	8003d96 <_printf_float+0x31a>
 8003e16:	e68c      	b.n	8003b32 <_printf_float+0xb6>
 8003e18:	464b      	mov	r3, r9
 8003e1a:	4631      	mov	r1, r6
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	eb08 020a 	add.w	r2, r8, sl
 8003e22:	47b8      	blx	r7
 8003e24:	3001      	adds	r0, #1
 8003e26:	d1c2      	bne.n	8003dae <_printf_float+0x332>
 8003e28:	e683      	b.n	8003b32 <_printf_float+0xb6>
 8003e2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e2c:	2a01      	cmp	r2, #1
 8003e2e:	dc01      	bgt.n	8003e34 <_printf_float+0x3b8>
 8003e30:	07db      	lsls	r3, r3, #31
 8003e32:	d537      	bpl.n	8003ea4 <_printf_float+0x428>
 8003e34:	2301      	movs	r3, #1
 8003e36:	4642      	mov	r2, r8
 8003e38:	4631      	mov	r1, r6
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	47b8      	blx	r7
 8003e3e:	3001      	adds	r0, #1
 8003e40:	f43f ae77 	beq.w	8003b32 <_printf_float+0xb6>
 8003e44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e48:	4631      	mov	r1, r6
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	47b8      	blx	r7
 8003e4e:	3001      	adds	r0, #1
 8003e50:	f43f ae6f 	beq.w	8003b32 <_printf_float+0xb6>
 8003e54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f7fc fda4 	bl	80009a8 <__aeabi_dcmpeq>
 8003e60:	b9d8      	cbnz	r0, 8003e9a <_printf_float+0x41e>
 8003e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e64:	f108 0201 	add.w	r2, r8, #1
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	4631      	mov	r1, r6
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	47b8      	blx	r7
 8003e70:	3001      	adds	r0, #1
 8003e72:	d10e      	bne.n	8003e92 <_printf_float+0x416>
 8003e74:	e65d      	b.n	8003b32 <_printf_float+0xb6>
 8003e76:	2301      	movs	r3, #1
 8003e78:	464a      	mov	r2, r9
 8003e7a:	4631      	mov	r1, r6
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	47b8      	blx	r7
 8003e80:	3001      	adds	r0, #1
 8003e82:	f43f ae56 	beq.w	8003b32 <_printf_float+0xb6>
 8003e86:	f108 0801 	add.w	r8, r8, #1
 8003e8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	4543      	cmp	r3, r8
 8003e90:	dcf1      	bgt.n	8003e76 <_printf_float+0x3fa>
 8003e92:	4653      	mov	r3, sl
 8003e94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e98:	e6e0      	b.n	8003c5c <_printf_float+0x1e0>
 8003e9a:	f04f 0800 	mov.w	r8, #0
 8003e9e:	f104 091a 	add.w	r9, r4, #26
 8003ea2:	e7f2      	b.n	8003e8a <_printf_float+0x40e>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	4642      	mov	r2, r8
 8003ea8:	e7df      	b.n	8003e6a <_printf_float+0x3ee>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	464a      	mov	r2, r9
 8003eae:	4631      	mov	r1, r6
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	47b8      	blx	r7
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	f43f ae3c 	beq.w	8003b32 <_printf_float+0xb6>
 8003eba:	f108 0801 	add.w	r8, r8, #1
 8003ebe:	68e3      	ldr	r3, [r4, #12]
 8003ec0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003ec2:	1a5b      	subs	r3, r3, r1
 8003ec4:	4543      	cmp	r3, r8
 8003ec6:	dcf0      	bgt.n	8003eaa <_printf_float+0x42e>
 8003ec8:	e6fd      	b.n	8003cc6 <_printf_float+0x24a>
 8003eca:	f04f 0800 	mov.w	r8, #0
 8003ece:	f104 0919 	add.w	r9, r4, #25
 8003ed2:	e7f4      	b.n	8003ebe <_printf_float+0x442>

08003ed4 <_printf_common>:
 8003ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed8:	4616      	mov	r6, r2
 8003eda:	4699      	mov	r9, r3
 8003edc:	688a      	ldr	r2, [r1, #8]
 8003ede:	690b      	ldr	r3, [r1, #16]
 8003ee0:	4607      	mov	r7, r0
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	bfb8      	it	lt
 8003ee6:	4613      	movlt	r3, r2
 8003ee8:	6033      	str	r3, [r6, #0]
 8003eea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003eee:	460c      	mov	r4, r1
 8003ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ef4:	b10a      	cbz	r2, 8003efa <_printf_common+0x26>
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	6033      	str	r3, [r6, #0]
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	0699      	lsls	r1, r3, #26
 8003efe:	bf42      	ittt	mi
 8003f00:	6833      	ldrmi	r3, [r6, #0]
 8003f02:	3302      	addmi	r3, #2
 8003f04:	6033      	strmi	r3, [r6, #0]
 8003f06:	6825      	ldr	r5, [r4, #0]
 8003f08:	f015 0506 	ands.w	r5, r5, #6
 8003f0c:	d106      	bne.n	8003f1c <_printf_common+0x48>
 8003f0e:	f104 0a19 	add.w	sl, r4, #25
 8003f12:	68e3      	ldr	r3, [r4, #12]
 8003f14:	6832      	ldr	r2, [r6, #0]
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	42ab      	cmp	r3, r5
 8003f1a:	dc28      	bgt.n	8003f6e <_printf_common+0x9a>
 8003f1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f20:	1e13      	subs	r3, r2, #0
 8003f22:	6822      	ldr	r2, [r4, #0]
 8003f24:	bf18      	it	ne
 8003f26:	2301      	movne	r3, #1
 8003f28:	0692      	lsls	r2, r2, #26
 8003f2a:	d42d      	bmi.n	8003f88 <_printf_common+0xb4>
 8003f2c:	4649      	mov	r1, r9
 8003f2e:	4638      	mov	r0, r7
 8003f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f34:	47c0      	blx	r8
 8003f36:	3001      	adds	r0, #1
 8003f38:	d020      	beq.n	8003f7c <_printf_common+0xa8>
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	68e5      	ldr	r5, [r4, #12]
 8003f3e:	f003 0306 	and.w	r3, r3, #6
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	bf18      	it	ne
 8003f46:	2500      	movne	r5, #0
 8003f48:	6832      	ldr	r2, [r6, #0]
 8003f4a:	f04f 0600 	mov.w	r6, #0
 8003f4e:	68a3      	ldr	r3, [r4, #8]
 8003f50:	bf08      	it	eq
 8003f52:	1aad      	subeq	r5, r5, r2
 8003f54:	6922      	ldr	r2, [r4, #16]
 8003f56:	bf08      	it	eq
 8003f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	bfc4      	itt	gt
 8003f60:	1a9b      	subgt	r3, r3, r2
 8003f62:	18ed      	addgt	r5, r5, r3
 8003f64:	341a      	adds	r4, #26
 8003f66:	42b5      	cmp	r5, r6
 8003f68:	d11a      	bne.n	8003fa0 <_printf_common+0xcc>
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	e008      	b.n	8003f80 <_printf_common+0xac>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	4652      	mov	r2, sl
 8003f72:	4649      	mov	r1, r9
 8003f74:	4638      	mov	r0, r7
 8003f76:	47c0      	blx	r8
 8003f78:	3001      	adds	r0, #1
 8003f7a:	d103      	bne.n	8003f84 <_printf_common+0xb0>
 8003f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f84:	3501      	adds	r5, #1
 8003f86:	e7c4      	b.n	8003f12 <_printf_common+0x3e>
 8003f88:	2030      	movs	r0, #48	; 0x30
 8003f8a:	18e1      	adds	r1, r4, r3
 8003f8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f96:	4422      	add	r2, r4
 8003f98:	3302      	adds	r3, #2
 8003f9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f9e:	e7c5      	b.n	8003f2c <_printf_common+0x58>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	4638      	mov	r0, r7
 8003fa8:	47c0      	blx	r8
 8003faa:	3001      	adds	r0, #1
 8003fac:	d0e6      	beq.n	8003f7c <_printf_common+0xa8>
 8003fae:	3601      	adds	r6, #1
 8003fb0:	e7d9      	b.n	8003f66 <_printf_common+0x92>
	...

08003fb4 <_printf_i>:
 8003fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb8:	460c      	mov	r4, r1
 8003fba:	7e27      	ldrb	r7, [r4, #24]
 8003fbc:	4691      	mov	r9, r2
 8003fbe:	2f78      	cmp	r7, #120	; 0x78
 8003fc0:	4680      	mov	r8, r0
 8003fc2:	469a      	mov	sl, r3
 8003fc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fca:	d807      	bhi.n	8003fdc <_printf_i+0x28>
 8003fcc:	2f62      	cmp	r7, #98	; 0x62
 8003fce:	d80a      	bhi.n	8003fe6 <_printf_i+0x32>
 8003fd0:	2f00      	cmp	r7, #0
 8003fd2:	f000 80d9 	beq.w	8004188 <_printf_i+0x1d4>
 8003fd6:	2f58      	cmp	r7, #88	; 0x58
 8003fd8:	f000 80a4 	beq.w	8004124 <_printf_i+0x170>
 8003fdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fe4:	e03a      	b.n	800405c <_printf_i+0xa8>
 8003fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fea:	2b15      	cmp	r3, #21
 8003fec:	d8f6      	bhi.n	8003fdc <_printf_i+0x28>
 8003fee:	a001      	add	r0, pc, #4	; (adr r0, 8003ff4 <_printf_i+0x40>)
 8003ff0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ff4:	0800404d 	.word	0x0800404d
 8003ff8:	08004061 	.word	0x08004061
 8003ffc:	08003fdd 	.word	0x08003fdd
 8004000:	08003fdd 	.word	0x08003fdd
 8004004:	08003fdd 	.word	0x08003fdd
 8004008:	08003fdd 	.word	0x08003fdd
 800400c:	08004061 	.word	0x08004061
 8004010:	08003fdd 	.word	0x08003fdd
 8004014:	08003fdd 	.word	0x08003fdd
 8004018:	08003fdd 	.word	0x08003fdd
 800401c:	08003fdd 	.word	0x08003fdd
 8004020:	0800416f 	.word	0x0800416f
 8004024:	08004091 	.word	0x08004091
 8004028:	08004151 	.word	0x08004151
 800402c:	08003fdd 	.word	0x08003fdd
 8004030:	08003fdd 	.word	0x08003fdd
 8004034:	08004191 	.word	0x08004191
 8004038:	08003fdd 	.word	0x08003fdd
 800403c:	08004091 	.word	0x08004091
 8004040:	08003fdd 	.word	0x08003fdd
 8004044:	08003fdd 	.word	0x08003fdd
 8004048:	08004159 	.word	0x08004159
 800404c:	680b      	ldr	r3, [r1, #0]
 800404e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004052:	1d1a      	adds	r2, r3, #4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	600a      	str	r2, [r1, #0]
 8004058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800405c:	2301      	movs	r3, #1
 800405e:	e0a4      	b.n	80041aa <_printf_i+0x1f6>
 8004060:	6825      	ldr	r5, [r4, #0]
 8004062:	6808      	ldr	r0, [r1, #0]
 8004064:	062e      	lsls	r6, r5, #24
 8004066:	f100 0304 	add.w	r3, r0, #4
 800406a:	d50a      	bpl.n	8004082 <_printf_i+0xce>
 800406c:	6805      	ldr	r5, [r0, #0]
 800406e:	600b      	str	r3, [r1, #0]
 8004070:	2d00      	cmp	r5, #0
 8004072:	da03      	bge.n	800407c <_printf_i+0xc8>
 8004074:	232d      	movs	r3, #45	; 0x2d
 8004076:	426d      	negs	r5, r5
 8004078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800407c:	230a      	movs	r3, #10
 800407e:	485e      	ldr	r0, [pc, #376]	; (80041f8 <_printf_i+0x244>)
 8004080:	e019      	b.n	80040b6 <_printf_i+0x102>
 8004082:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004086:	6805      	ldr	r5, [r0, #0]
 8004088:	600b      	str	r3, [r1, #0]
 800408a:	bf18      	it	ne
 800408c:	b22d      	sxthne	r5, r5
 800408e:	e7ef      	b.n	8004070 <_printf_i+0xbc>
 8004090:	680b      	ldr	r3, [r1, #0]
 8004092:	6825      	ldr	r5, [r4, #0]
 8004094:	1d18      	adds	r0, r3, #4
 8004096:	6008      	str	r0, [r1, #0]
 8004098:	0628      	lsls	r0, r5, #24
 800409a:	d501      	bpl.n	80040a0 <_printf_i+0xec>
 800409c:	681d      	ldr	r5, [r3, #0]
 800409e:	e002      	b.n	80040a6 <_printf_i+0xf2>
 80040a0:	0669      	lsls	r1, r5, #25
 80040a2:	d5fb      	bpl.n	800409c <_printf_i+0xe8>
 80040a4:	881d      	ldrh	r5, [r3, #0]
 80040a6:	2f6f      	cmp	r7, #111	; 0x6f
 80040a8:	bf0c      	ite	eq
 80040aa:	2308      	moveq	r3, #8
 80040ac:	230a      	movne	r3, #10
 80040ae:	4852      	ldr	r0, [pc, #328]	; (80041f8 <_printf_i+0x244>)
 80040b0:	2100      	movs	r1, #0
 80040b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040b6:	6866      	ldr	r6, [r4, #4]
 80040b8:	2e00      	cmp	r6, #0
 80040ba:	bfa8      	it	ge
 80040bc:	6821      	ldrge	r1, [r4, #0]
 80040be:	60a6      	str	r6, [r4, #8]
 80040c0:	bfa4      	itt	ge
 80040c2:	f021 0104 	bicge.w	r1, r1, #4
 80040c6:	6021      	strge	r1, [r4, #0]
 80040c8:	b90d      	cbnz	r5, 80040ce <_printf_i+0x11a>
 80040ca:	2e00      	cmp	r6, #0
 80040cc:	d04d      	beq.n	800416a <_printf_i+0x1b6>
 80040ce:	4616      	mov	r6, r2
 80040d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80040d4:	fb03 5711 	mls	r7, r3, r1, r5
 80040d8:	5dc7      	ldrb	r7, [r0, r7]
 80040da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040de:	462f      	mov	r7, r5
 80040e0:	42bb      	cmp	r3, r7
 80040e2:	460d      	mov	r5, r1
 80040e4:	d9f4      	bls.n	80040d0 <_printf_i+0x11c>
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d10b      	bne.n	8004102 <_printf_i+0x14e>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	07df      	lsls	r7, r3, #31
 80040ee:	d508      	bpl.n	8004102 <_printf_i+0x14e>
 80040f0:	6923      	ldr	r3, [r4, #16]
 80040f2:	6861      	ldr	r1, [r4, #4]
 80040f4:	4299      	cmp	r1, r3
 80040f6:	bfde      	ittt	le
 80040f8:	2330      	movle	r3, #48	; 0x30
 80040fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004102:	1b92      	subs	r2, r2, r6
 8004104:	6122      	str	r2, [r4, #16]
 8004106:	464b      	mov	r3, r9
 8004108:	4621      	mov	r1, r4
 800410a:	4640      	mov	r0, r8
 800410c:	f8cd a000 	str.w	sl, [sp]
 8004110:	aa03      	add	r2, sp, #12
 8004112:	f7ff fedf 	bl	8003ed4 <_printf_common>
 8004116:	3001      	adds	r0, #1
 8004118:	d14c      	bne.n	80041b4 <_printf_i+0x200>
 800411a:	f04f 30ff 	mov.w	r0, #4294967295
 800411e:	b004      	add	sp, #16
 8004120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004124:	4834      	ldr	r0, [pc, #208]	; (80041f8 <_printf_i+0x244>)
 8004126:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800412a:	680e      	ldr	r6, [r1, #0]
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004132:	061f      	lsls	r7, r3, #24
 8004134:	600e      	str	r6, [r1, #0]
 8004136:	d514      	bpl.n	8004162 <_printf_i+0x1ae>
 8004138:	07d9      	lsls	r1, r3, #31
 800413a:	bf44      	itt	mi
 800413c:	f043 0320 	orrmi.w	r3, r3, #32
 8004140:	6023      	strmi	r3, [r4, #0]
 8004142:	b91d      	cbnz	r5, 800414c <_printf_i+0x198>
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	f023 0320 	bic.w	r3, r3, #32
 800414a:	6023      	str	r3, [r4, #0]
 800414c:	2310      	movs	r3, #16
 800414e:	e7af      	b.n	80040b0 <_printf_i+0xfc>
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	f043 0320 	orr.w	r3, r3, #32
 8004156:	6023      	str	r3, [r4, #0]
 8004158:	2378      	movs	r3, #120	; 0x78
 800415a:	4828      	ldr	r0, [pc, #160]	; (80041fc <_printf_i+0x248>)
 800415c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004160:	e7e3      	b.n	800412a <_printf_i+0x176>
 8004162:	065e      	lsls	r6, r3, #25
 8004164:	bf48      	it	mi
 8004166:	b2ad      	uxthmi	r5, r5
 8004168:	e7e6      	b.n	8004138 <_printf_i+0x184>
 800416a:	4616      	mov	r6, r2
 800416c:	e7bb      	b.n	80040e6 <_printf_i+0x132>
 800416e:	680b      	ldr	r3, [r1, #0]
 8004170:	6826      	ldr	r6, [r4, #0]
 8004172:	1d1d      	adds	r5, r3, #4
 8004174:	6960      	ldr	r0, [r4, #20]
 8004176:	600d      	str	r5, [r1, #0]
 8004178:	0635      	lsls	r5, r6, #24
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	d501      	bpl.n	8004182 <_printf_i+0x1ce>
 800417e:	6018      	str	r0, [r3, #0]
 8004180:	e002      	b.n	8004188 <_printf_i+0x1d4>
 8004182:	0671      	lsls	r1, r6, #25
 8004184:	d5fb      	bpl.n	800417e <_printf_i+0x1ca>
 8004186:	8018      	strh	r0, [r3, #0]
 8004188:	2300      	movs	r3, #0
 800418a:	4616      	mov	r6, r2
 800418c:	6123      	str	r3, [r4, #16]
 800418e:	e7ba      	b.n	8004106 <_printf_i+0x152>
 8004190:	680b      	ldr	r3, [r1, #0]
 8004192:	1d1a      	adds	r2, r3, #4
 8004194:	600a      	str	r2, [r1, #0]
 8004196:	681e      	ldr	r6, [r3, #0]
 8004198:	2100      	movs	r1, #0
 800419a:	4630      	mov	r0, r6
 800419c:	6862      	ldr	r2, [r4, #4]
 800419e:	f000 feb9 	bl	8004f14 <memchr>
 80041a2:	b108      	cbz	r0, 80041a8 <_printf_i+0x1f4>
 80041a4:	1b80      	subs	r0, r0, r6
 80041a6:	6060      	str	r0, [r4, #4]
 80041a8:	6863      	ldr	r3, [r4, #4]
 80041aa:	6123      	str	r3, [r4, #16]
 80041ac:	2300      	movs	r3, #0
 80041ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041b2:	e7a8      	b.n	8004106 <_printf_i+0x152>
 80041b4:	4632      	mov	r2, r6
 80041b6:	4649      	mov	r1, r9
 80041b8:	4640      	mov	r0, r8
 80041ba:	6923      	ldr	r3, [r4, #16]
 80041bc:	47d0      	blx	sl
 80041be:	3001      	adds	r0, #1
 80041c0:	d0ab      	beq.n	800411a <_printf_i+0x166>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	079b      	lsls	r3, r3, #30
 80041c6:	d413      	bmi.n	80041f0 <_printf_i+0x23c>
 80041c8:	68e0      	ldr	r0, [r4, #12]
 80041ca:	9b03      	ldr	r3, [sp, #12]
 80041cc:	4298      	cmp	r0, r3
 80041ce:	bfb8      	it	lt
 80041d0:	4618      	movlt	r0, r3
 80041d2:	e7a4      	b.n	800411e <_printf_i+0x16a>
 80041d4:	2301      	movs	r3, #1
 80041d6:	4632      	mov	r2, r6
 80041d8:	4649      	mov	r1, r9
 80041da:	4640      	mov	r0, r8
 80041dc:	47d0      	blx	sl
 80041de:	3001      	adds	r0, #1
 80041e0:	d09b      	beq.n	800411a <_printf_i+0x166>
 80041e2:	3501      	adds	r5, #1
 80041e4:	68e3      	ldr	r3, [r4, #12]
 80041e6:	9903      	ldr	r1, [sp, #12]
 80041e8:	1a5b      	subs	r3, r3, r1
 80041ea:	42ab      	cmp	r3, r5
 80041ec:	dcf2      	bgt.n	80041d4 <_printf_i+0x220>
 80041ee:	e7eb      	b.n	80041c8 <_printf_i+0x214>
 80041f0:	2500      	movs	r5, #0
 80041f2:	f104 0619 	add.w	r6, r4, #25
 80041f6:	e7f5      	b.n	80041e4 <_printf_i+0x230>
 80041f8:	08006346 	.word	0x08006346
 80041fc:	08006357 	.word	0x08006357

08004200 <quorem>:
 8004200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004204:	6903      	ldr	r3, [r0, #16]
 8004206:	690c      	ldr	r4, [r1, #16]
 8004208:	4607      	mov	r7, r0
 800420a:	42a3      	cmp	r3, r4
 800420c:	f2c0 8083 	blt.w	8004316 <quorem+0x116>
 8004210:	3c01      	subs	r4, #1
 8004212:	f100 0514 	add.w	r5, r0, #20
 8004216:	f101 0814 	add.w	r8, r1, #20
 800421a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800421e:	9301      	str	r3, [sp, #4]
 8004220:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004224:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004228:	3301      	adds	r3, #1
 800422a:	429a      	cmp	r2, r3
 800422c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004230:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004234:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004238:	d332      	bcc.n	80042a0 <quorem+0xa0>
 800423a:	f04f 0e00 	mov.w	lr, #0
 800423e:	4640      	mov	r0, r8
 8004240:	46ac      	mov	ip, r5
 8004242:	46f2      	mov	sl, lr
 8004244:	f850 2b04 	ldr.w	r2, [r0], #4
 8004248:	b293      	uxth	r3, r2
 800424a:	fb06 e303 	mla	r3, r6, r3, lr
 800424e:	0c12      	lsrs	r2, r2, #16
 8004250:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004254:	fb06 e202 	mla	r2, r6, r2, lr
 8004258:	b29b      	uxth	r3, r3
 800425a:	ebaa 0303 	sub.w	r3, sl, r3
 800425e:	f8dc a000 	ldr.w	sl, [ip]
 8004262:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004266:	fa1f fa8a 	uxth.w	sl, sl
 800426a:	4453      	add	r3, sl
 800426c:	fa1f fa82 	uxth.w	sl, r2
 8004270:	f8dc 2000 	ldr.w	r2, [ip]
 8004274:	4581      	cmp	r9, r0
 8004276:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800427a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800427e:	b29b      	uxth	r3, r3
 8004280:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004284:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004288:	f84c 3b04 	str.w	r3, [ip], #4
 800428c:	d2da      	bcs.n	8004244 <quorem+0x44>
 800428e:	f855 300b 	ldr.w	r3, [r5, fp]
 8004292:	b92b      	cbnz	r3, 80042a0 <quorem+0xa0>
 8004294:	9b01      	ldr	r3, [sp, #4]
 8004296:	3b04      	subs	r3, #4
 8004298:	429d      	cmp	r5, r3
 800429a:	461a      	mov	r2, r3
 800429c:	d32f      	bcc.n	80042fe <quorem+0xfe>
 800429e:	613c      	str	r4, [r7, #16]
 80042a0:	4638      	mov	r0, r7
 80042a2:	f001 f8cd 	bl	8005440 <__mcmp>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	db25      	blt.n	80042f6 <quorem+0xf6>
 80042aa:	4628      	mov	r0, r5
 80042ac:	f04f 0c00 	mov.w	ip, #0
 80042b0:	3601      	adds	r6, #1
 80042b2:	f858 1b04 	ldr.w	r1, [r8], #4
 80042b6:	f8d0 e000 	ldr.w	lr, [r0]
 80042ba:	b28b      	uxth	r3, r1
 80042bc:	ebac 0303 	sub.w	r3, ip, r3
 80042c0:	fa1f f28e 	uxth.w	r2, lr
 80042c4:	4413      	add	r3, r2
 80042c6:	0c0a      	lsrs	r2, r1, #16
 80042c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80042cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042d6:	45c1      	cmp	r9, r8
 80042d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80042dc:	f840 3b04 	str.w	r3, [r0], #4
 80042e0:	d2e7      	bcs.n	80042b2 <quorem+0xb2>
 80042e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042ea:	b922      	cbnz	r2, 80042f6 <quorem+0xf6>
 80042ec:	3b04      	subs	r3, #4
 80042ee:	429d      	cmp	r5, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	d30a      	bcc.n	800430a <quorem+0x10a>
 80042f4:	613c      	str	r4, [r7, #16]
 80042f6:	4630      	mov	r0, r6
 80042f8:	b003      	add	sp, #12
 80042fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	3b04      	subs	r3, #4
 8004302:	2a00      	cmp	r2, #0
 8004304:	d1cb      	bne.n	800429e <quorem+0x9e>
 8004306:	3c01      	subs	r4, #1
 8004308:	e7c6      	b.n	8004298 <quorem+0x98>
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	3b04      	subs	r3, #4
 800430e:	2a00      	cmp	r2, #0
 8004310:	d1f0      	bne.n	80042f4 <quorem+0xf4>
 8004312:	3c01      	subs	r4, #1
 8004314:	e7eb      	b.n	80042ee <quorem+0xee>
 8004316:	2000      	movs	r0, #0
 8004318:	e7ee      	b.n	80042f8 <quorem+0xf8>
 800431a:	0000      	movs	r0, r0
 800431c:	0000      	movs	r0, r0
	...

08004320 <_dtoa_r>:
 8004320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004324:	4616      	mov	r6, r2
 8004326:	461f      	mov	r7, r3
 8004328:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800432a:	b099      	sub	sp, #100	; 0x64
 800432c:	4605      	mov	r5, r0
 800432e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004332:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004336:	b974      	cbnz	r4, 8004356 <_dtoa_r+0x36>
 8004338:	2010      	movs	r0, #16
 800433a:	f000 fde3 	bl	8004f04 <malloc>
 800433e:	4602      	mov	r2, r0
 8004340:	6268      	str	r0, [r5, #36]	; 0x24
 8004342:	b920      	cbnz	r0, 800434e <_dtoa_r+0x2e>
 8004344:	21ea      	movs	r1, #234	; 0xea
 8004346:	4bae      	ldr	r3, [pc, #696]	; (8004600 <_dtoa_r+0x2e0>)
 8004348:	48ae      	ldr	r0, [pc, #696]	; (8004604 <_dtoa_r+0x2e4>)
 800434a:	f001 fa45 	bl	80057d8 <__assert_func>
 800434e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004352:	6004      	str	r4, [r0, #0]
 8004354:	60c4      	str	r4, [r0, #12]
 8004356:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004358:	6819      	ldr	r1, [r3, #0]
 800435a:	b151      	cbz	r1, 8004372 <_dtoa_r+0x52>
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	2301      	movs	r3, #1
 8004360:	4093      	lsls	r3, r2
 8004362:	604a      	str	r2, [r1, #4]
 8004364:	608b      	str	r3, [r1, #8]
 8004366:	4628      	mov	r0, r5
 8004368:	f000 fe30 	bl	8004fcc <_Bfree>
 800436c:	2200      	movs	r2, #0
 800436e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	1e3b      	subs	r3, r7, #0
 8004374:	bfaf      	iteee	ge
 8004376:	2300      	movge	r3, #0
 8004378:	2201      	movlt	r2, #1
 800437a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800437e:	9305      	strlt	r3, [sp, #20]
 8004380:	bfa8      	it	ge
 8004382:	f8c8 3000 	strge.w	r3, [r8]
 8004386:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800438a:	4b9f      	ldr	r3, [pc, #636]	; (8004608 <_dtoa_r+0x2e8>)
 800438c:	bfb8      	it	lt
 800438e:	f8c8 2000 	strlt.w	r2, [r8]
 8004392:	ea33 0309 	bics.w	r3, r3, r9
 8004396:	d119      	bne.n	80043cc <_dtoa_r+0xac>
 8004398:	f242 730f 	movw	r3, #9999	; 0x270f
 800439c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80043a4:	4333      	orrs	r3, r6
 80043a6:	f000 8580 	beq.w	8004eaa <_dtoa_r+0xb8a>
 80043aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80043ac:	b953      	cbnz	r3, 80043c4 <_dtoa_r+0xa4>
 80043ae:	4b97      	ldr	r3, [pc, #604]	; (800460c <_dtoa_r+0x2ec>)
 80043b0:	e022      	b.n	80043f8 <_dtoa_r+0xd8>
 80043b2:	4b97      	ldr	r3, [pc, #604]	; (8004610 <_dtoa_r+0x2f0>)
 80043b4:	9308      	str	r3, [sp, #32]
 80043b6:	3308      	adds	r3, #8
 80043b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	9808      	ldr	r0, [sp, #32]
 80043be:	b019      	add	sp, #100	; 0x64
 80043c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043c4:	4b91      	ldr	r3, [pc, #580]	; (800460c <_dtoa_r+0x2ec>)
 80043c6:	9308      	str	r3, [sp, #32]
 80043c8:	3303      	adds	r3, #3
 80043ca:	e7f5      	b.n	80043b8 <_dtoa_r+0x98>
 80043cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80043d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80043d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80043d8:	2200      	movs	r2, #0
 80043da:	2300      	movs	r3, #0
 80043dc:	f7fc fae4 	bl	80009a8 <__aeabi_dcmpeq>
 80043e0:	4680      	mov	r8, r0
 80043e2:	b158      	cbz	r0, 80043fc <_dtoa_r+0xdc>
 80043e4:	2301      	movs	r3, #1
 80043e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8559 	beq.w	8004ea4 <_dtoa_r+0xb84>
 80043f2:	4888      	ldr	r0, [pc, #544]	; (8004614 <_dtoa_r+0x2f4>)
 80043f4:	6018      	str	r0, [r3, #0]
 80043f6:	1e43      	subs	r3, r0, #1
 80043f8:	9308      	str	r3, [sp, #32]
 80043fa:	e7df      	b.n	80043bc <_dtoa_r+0x9c>
 80043fc:	ab16      	add	r3, sp, #88	; 0x58
 80043fe:	9301      	str	r3, [sp, #4]
 8004400:	ab17      	add	r3, sp, #92	; 0x5c
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	4628      	mov	r0, r5
 8004406:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800440a:	f001 f8c5 	bl	8005598 <__d2b>
 800440e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004412:	4682      	mov	sl, r0
 8004414:	2c00      	cmp	r4, #0
 8004416:	d07e      	beq.n	8004516 <_dtoa_r+0x1f6>
 8004418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800441c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800441e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004422:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004426:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800442a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800442e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004432:	2200      	movs	r2, #0
 8004434:	4b78      	ldr	r3, [pc, #480]	; (8004618 <_dtoa_r+0x2f8>)
 8004436:	f7fb fe97 	bl	8000168 <__aeabi_dsub>
 800443a:	a36b      	add	r3, pc, #428	; (adr r3, 80045e8 <_dtoa_r+0x2c8>)
 800443c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004440:	f7fc f84a 	bl	80004d8 <__aeabi_dmul>
 8004444:	a36a      	add	r3, pc, #424	; (adr r3, 80045f0 <_dtoa_r+0x2d0>)
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	f7fb fe8f 	bl	800016c <__adddf3>
 800444e:	4606      	mov	r6, r0
 8004450:	4620      	mov	r0, r4
 8004452:	460f      	mov	r7, r1
 8004454:	f7fb ffd6 	bl	8000404 <__aeabi_i2d>
 8004458:	a367      	add	r3, pc, #412	; (adr r3, 80045f8 <_dtoa_r+0x2d8>)
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f7fc f83b 	bl	80004d8 <__aeabi_dmul>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4630      	mov	r0, r6
 8004468:	4639      	mov	r1, r7
 800446a:	f7fb fe7f 	bl	800016c <__adddf3>
 800446e:	4606      	mov	r6, r0
 8004470:	460f      	mov	r7, r1
 8004472:	f7fc fae1 	bl	8000a38 <__aeabi_d2iz>
 8004476:	2200      	movs	r2, #0
 8004478:	4681      	mov	r9, r0
 800447a:	2300      	movs	r3, #0
 800447c:	4630      	mov	r0, r6
 800447e:	4639      	mov	r1, r7
 8004480:	f7fc fa9c 	bl	80009bc <__aeabi_dcmplt>
 8004484:	b148      	cbz	r0, 800449a <_dtoa_r+0x17a>
 8004486:	4648      	mov	r0, r9
 8004488:	f7fb ffbc 	bl	8000404 <__aeabi_i2d>
 800448c:	4632      	mov	r2, r6
 800448e:	463b      	mov	r3, r7
 8004490:	f7fc fa8a 	bl	80009a8 <__aeabi_dcmpeq>
 8004494:	b908      	cbnz	r0, 800449a <_dtoa_r+0x17a>
 8004496:	f109 39ff 	add.w	r9, r9, #4294967295
 800449a:	f1b9 0f16 	cmp.w	r9, #22
 800449e:	d857      	bhi.n	8004550 <_dtoa_r+0x230>
 80044a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044a4:	4b5d      	ldr	r3, [pc, #372]	; (800461c <_dtoa_r+0x2fc>)
 80044a6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80044aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ae:	f7fc fa85 	bl	80009bc <__aeabi_dcmplt>
 80044b2:	2800      	cmp	r0, #0
 80044b4:	d04e      	beq.n	8004554 <_dtoa_r+0x234>
 80044b6:	2300      	movs	r3, #0
 80044b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80044bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80044be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80044c0:	1b1c      	subs	r4, r3, r4
 80044c2:	1e63      	subs	r3, r4, #1
 80044c4:	9309      	str	r3, [sp, #36]	; 0x24
 80044c6:	bf49      	itett	mi
 80044c8:	f1c4 0301 	rsbmi	r3, r4, #1
 80044cc:	2300      	movpl	r3, #0
 80044ce:	9306      	strmi	r3, [sp, #24]
 80044d0:	2300      	movmi	r3, #0
 80044d2:	bf54      	ite	pl
 80044d4:	9306      	strpl	r3, [sp, #24]
 80044d6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80044d8:	f1b9 0f00 	cmp.w	r9, #0
 80044dc:	db3c      	blt.n	8004558 <_dtoa_r+0x238>
 80044de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044e0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80044e4:	444b      	add	r3, r9
 80044e6:	9309      	str	r3, [sp, #36]	; 0x24
 80044e8:	2300      	movs	r3, #0
 80044ea:	930a      	str	r3, [sp, #40]	; 0x28
 80044ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044ee:	2b09      	cmp	r3, #9
 80044f0:	d86c      	bhi.n	80045cc <_dtoa_r+0x2ac>
 80044f2:	2b05      	cmp	r3, #5
 80044f4:	bfc4      	itt	gt
 80044f6:	3b04      	subgt	r3, #4
 80044f8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80044fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044fc:	bfc8      	it	gt
 80044fe:	2400      	movgt	r4, #0
 8004500:	f1a3 0302 	sub.w	r3, r3, #2
 8004504:	bfd8      	it	le
 8004506:	2401      	movle	r4, #1
 8004508:	2b03      	cmp	r3, #3
 800450a:	f200 808b 	bhi.w	8004624 <_dtoa_r+0x304>
 800450e:	e8df f003 	tbb	[pc, r3]
 8004512:	4f2d      	.short	0x4f2d
 8004514:	5b4d      	.short	0x5b4d
 8004516:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800451a:	441c      	add	r4, r3
 800451c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004520:	2b20      	cmp	r3, #32
 8004522:	bfc3      	ittte	gt
 8004524:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004528:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800452c:	fa09 f303 	lslgt.w	r3, r9, r3
 8004530:	f1c3 0320 	rsble	r3, r3, #32
 8004534:	bfc6      	itte	gt
 8004536:	fa26 f000 	lsrgt.w	r0, r6, r0
 800453a:	4318      	orrgt	r0, r3
 800453c:	fa06 f003 	lslle.w	r0, r6, r3
 8004540:	f7fb ff50 	bl	80003e4 <__aeabi_ui2d>
 8004544:	2301      	movs	r3, #1
 8004546:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800454a:	3c01      	subs	r4, #1
 800454c:	9313      	str	r3, [sp, #76]	; 0x4c
 800454e:	e770      	b.n	8004432 <_dtoa_r+0x112>
 8004550:	2301      	movs	r3, #1
 8004552:	e7b3      	b.n	80044bc <_dtoa_r+0x19c>
 8004554:	900f      	str	r0, [sp, #60]	; 0x3c
 8004556:	e7b2      	b.n	80044be <_dtoa_r+0x19e>
 8004558:	9b06      	ldr	r3, [sp, #24]
 800455a:	eba3 0309 	sub.w	r3, r3, r9
 800455e:	9306      	str	r3, [sp, #24]
 8004560:	f1c9 0300 	rsb	r3, r9, #0
 8004564:	930a      	str	r3, [sp, #40]	; 0x28
 8004566:	2300      	movs	r3, #0
 8004568:	930e      	str	r3, [sp, #56]	; 0x38
 800456a:	e7bf      	b.n	80044ec <_dtoa_r+0x1cc>
 800456c:	2300      	movs	r3, #0
 800456e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004570:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004572:	2b00      	cmp	r3, #0
 8004574:	dc59      	bgt.n	800462a <_dtoa_r+0x30a>
 8004576:	f04f 0b01 	mov.w	fp, #1
 800457a:	465b      	mov	r3, fp
 800457c:	f8cd b008 	str.w	fp, [sp, #8]
 8004580:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004584:	2200      	movs	r2, #0
 8004586:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004588:	6042      	str	r2, [r0, #4]
 800458a:	2204      	movs	r2, #4
 800458c:	f102 0614 	add.w	r6, r2, #20
 8004590:	429e      	cmp	r6, r3
 8004592:	6841      	ldr	r1, [r0, #4]
 8004594:	d94f      	bls.n	8004636 <_dtoa_r+0x316>
 8004596:	4628      	mov	r0, r5
 8004598:	f000 fcd8 	bl	8004f4c <_Balloc>
 800459c:	9008      	str	r0, [sp, #32]
 800459e:	2800      	cmp	r0, #0
 80045a0:	d14d      	bne.n	800463e <_dtoa_r+0x31e>
 80045a2:	4602      	mov	r2, r0
 80045a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <_dtoa_r+0x300>)
 80045aa:	e6cd      	b.n	8004348 <_dtoa_r+0x28>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e7de      	b.n	800456e <_dtoa_r+0x24e>
 80045b0:	2300      	movs	r3, #0
 80045b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80045b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045b6:	eb09 0b03 	add.w	fp, r9, r3
 80045ba:	f10b 0301 	add.w	r3, fp, #1
 80045be:	2b01      	cmp	r3, #1
 80045c0:	9302      	str	r3, [sp, #8]
 80045c2:	bfb8      	it	lt
 80045c4:	2301      	movlt	r3, #1
 80045c6:	e7dd      	b.n	8004584 <_dtoa_r+0x264>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e7f2      	b.n	80045b2 <_dtoa_r+0x292>
 80045cc:	2401      	movs	r4, #1
 80045ce:	2300      	movs	r3, #0
 80045d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80045d2:	9322      	str	r3, [sp, #136]	; 0x88
 80045d4:	f04f 3bff 	mov.w	fp, #4294967295
 80045d8:	2200      	movs	r2, #0
 80045da:	2312      	movs	r3, #18
 80045dc:	f8cd b008 	str.w	fp, [sp, #8]
 80045e0:	9223      	str	r2, [sp, #140]	; 0x8c
 80045e2:	e7cf      	b.n	8004584 <_dtoa_r+0x264>
 80045e4:	f3af 8000 	nop.w
 80045e8:	636f4361 	.word	0x636f4361
 80045ec:	3fd287a7 	.word	0x3fd287a7
 80045f0:	8b60c8b3 	.word	0x8b60c8b3
 80045f4:	3fc68a28 	.word	0x3fc68a28
 80045f8:	509f79fb 	.word	0x509f79fb
 80045fc:	3fd34413 	.word	0x3fd34413
 8004600:	08006375 	.word	0x08006375
 8004604:	0800638c 	.word	0x0800638c
 8004608:	7ff00000 	.word	0x7ff00000
 800460c:	08006371 	.word	0x08006371
 8004610:	08006368 	.word	0x08006368
 8004614:	08006345 	.word	0x08006345
 8004618:	3ff80000 	.word	0x3ff80000
 800461c:	08006488 	.word	0x08006488
 8004620:	080063eb 	.word	0x080063eb
 8004624:	2301      	movs	r3, #1
 8004626:	930b      	str	r3, [sp, #44]	; 0x2c
 8004628:	e7d4      	b.n	80045d4 <_dtoa_r+0x2b4>
 800462a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800462e:	465b      	mov	r3, fp
 8004630:	f8cd b008 	str.w	fp, [sp, #8]
 8004634:	e7a6      	b.n	8004584 <_dtoa_r+0x264>
 8004636:	3101      	adds	r1, #1
 8004638:	6041      	str	r1, [r0, #4]
 800463a:	0052      	lsls	r2, r2, #1
 800463c:	e7a6      	b.n	800458c <_dtoa_r+0x26c>
 800463e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004640:	9a08      	ldr	r2, [sp, #32]
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	9b02      	ldr	r3, [sp, #8]
 8004646:	2b0e      	cmp	r3, #14
 8004648:	f200 80a8 	bhi.w	800479c <_dtoa_r+0x47c>
 800464c:	2c00      	cmp	r4, #0
 800464e:	f000 80a5 	beq.w	800479c <_dtoa_r+0x47c>
 8004652:	f1b9 0f00 	cmp.w	r9, #0
 8004656:	dd34      	ble.n	80046c2 <_dtoa_r+0x3a2>
 8004658:	4a9a      	ldr	r2, [pc, #616]	; (80048c4 <_dtoa_r+0x5a4>)
 800465a:	f009 030f 	and.w	r3, r9, #15
 800465e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004662:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004666:	e9d3 3400 	ldrd	r3, r4, [r3]
 800466a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800466e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004672:	d016      	beq.n	80046a2 <_dtoa_r+0x382>
 8004674:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004678:	4b93      	ldr	r3, [pc, #588]	; (80048c8 <_dtoa_r+0x5a8>)
 800467a:	2703      	movs	r7, #3
 800467c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004680:	f7fc f854 	bl	800072c <__aeabi_ddiv>
 8004684:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004688:	f004 040f 	and.w	r4, r4, #15
 800468c:	4e8e      	ldr	r6, [pc, #568]	; (80048c8 <_dtoa_r+0x5a8>)
 800468e:	b954      	cbnz	r4, 80046a6 <_dtoa_r+0x386>
 8004690:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004694:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004698:	f7fc f848 	bl	800072c <__aeabi_ddiv>
 800469c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046a0:	e029      	b.n	80046f6 <_dtoa_r+0x3d6>
 80046a2:	2702      	movs	r7, #2
 80046a4:	e7f2      	b.n	800468c <_dtoa_r+0x36c>
 80046a6:	07e1      	lsls	r1, r4, #31
 80046a8:	d508      	bpl.n	80046bc <_dtoa_r+0x39c>
 80046aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80046ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80046b2:	f7fb ff11 	bl	80004d8 <__aeabi_dmul>
 80046b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80046ba:	3701      	adds	r7, #1
 80046bc:	1064      	asrs	r4, r4, #1
 80046be:	3608      	adds	r6, #8
 80046c0:	e7e5      	b.n	800468e <_dtoa_r+0x36e>
 80046c2:	f000 80a5 	beq.w	8004810 <_dtoa_r+0x4f0>
 80046c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046ca:	f1c9 0400 	rsb	r4, r9, #0
 80046ce:	4b7d      	ldr	r3, [pc, #500]	; (80048c4 <_dtoa_r+0x5a4>)
 80046d0:	f004 020f 	and.w	r2, r4, #15
 80046d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f7fb fefc 	bl	80004d8 <__aeabi_dmul>
 80046e0:	2702      	movs	r7, #2
 80046e2:	2300      	movs	r3, #0
 80046e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046e8:	4e77      	ldr	r6, [pc, #476]	; (80048c8 <_dtoa_r+0x5a8>)
 80046ea:	1124      	asrs	r4, r4, #4
 80046ec:	2c00      	cmp	r4, #0
 80046ee:	f040 8084 	bne.w	80047fa <_dtoa_r+0x4da>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1d2      	bne.n	800469c <_dtoa_r+0x37c>
 80046f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 808b 	beq.w	8004814 <_dtoa_r+0x4f4>
 80046fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004702:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004706:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800470a:	2200      	movs	r2, #0
 800470c:	4b6f      	ldr	r3, [pc, #444]	; (80048cc <_dtoa_r+0x5ac>)
 800470e:	f7fc f955 	bl	80009bc <__aeabi_dcmplt>
 8004712:	2800      	cmp	r0, #0
 8004714:	d07e      	beq.n	8004814 <_dtoa_r+0x4f4>
 8004716:	9b02      	ldr	r3, [sp, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d07b      	beq.n	8004814 <_dtoa_r+0x4f4>
 800471c:	f1bb 0f00 	cmp.w	fp, #0
 8004720:	dd38      	ble.n	8004794 <_dtoa_r+0x474>
 8004722:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004726:	2200      	movs	r2, #0
 8004728:	4b69      	ldr	r3, [pc, #420]	; (80048d0 <_dtoa_r+0x5b0>)
 800472a:	f7fb fed5 	bl	80004d8 <__aeabi_dmul>
 800472e:	465c      	mov	r4, fp
 8004730:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004734:	f109 38ff 	add.w	r8, r9, #4294967295
 8004738:	3701      	adds	r7, #1
 800473a:	4638      	mov	r0, r7
 800473c:	f7fb fe62 	bl	8000404 <__aeabi_i2d>
 8004740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004744:	f7fb fec8 	bl	80004d8 <__aeabi_dmul>
 8004748:	2200      	movs	r2, #0
 800474a:	4b62      	ldr	r3, [pc, #392]	; (80048d4 <_dtoa_r+0x5b4>)
 800474c:	f7fb fd0e 	bl	800016c <__adddf3>
 8004750:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004754:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004758:	9611      	str	r6, [sp, #68]	; 0x44
 800475a:	2c00      	cmp	r4, #0
 800475c:	d15d      	bne.n	800481a <_dtoa_r+0x4fa>
 800475e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004762:	2200      	movs	r2, #0
 8004764:	4b5c      	ldr	r3, [pc, #368]	; (80048d8 <_dtoa_r+0x5b8>)
 8004766:	f7fb fcff 	bl	8000168 <__aeabi_dsub>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004772:	4633      	mov	r3, r6
 8004774:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004776:	f7fc f93f 	bl	80009f8 <__aeabi_dcmpgt>
 800477a:	2800      	cmp	r0, #0
 800477c:	f040 829e 	bne.w	8004cbc <_dtoa_r+0x99c>
 8004780:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004784:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004786:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800478a:	f7fc f917 	bl	80009bc <__aeabi_dcmplt>
 800478e:	2800      	cmp	r0, #0
 8004790:	f040 8292 	bne.w	8004cb8 <_dtoa_r+0x998>
 8004794:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004798:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800479c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f2c0 8153 	blt.w	8004a4a <_dtoa_r+0x72a>
 80047a4:	f1b9 0f0e 	cmp.w	r9, #14
 80047a8:	f300 814f 	bgt.w	8004a4a <_dtoa_r+0x72a>
 80047ac:	4b45      	ldr	r3, [pc, #276]	; (80048c4 <_dtoa_r+0x5a4>)
 80047ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80047b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80047ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f280 80db 	bge.w	8004978 <_dtoa_r+0x658>
 80047c2:	9b02      	ldr	r3, [sp, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f300 80d7 	bgt.w	8004978 <_dtoa_r+0x658>
 80047ca:	f040 8274 	bne.w	8004cb6 <_dtoa_r+0x996>
 80047ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047d2:	2200      	movs	r2, #0
 80047d4:	4b40      	ldr	r3, [pc, #256]	; (80048d8 <_dtoa_r+0x5b8>)
 80047d6:	f7fb fe7f 	bl	80004d8 <__aeabi_dmul>
 80047da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047de:	f7fc f901 	bl	80009e4 <__aeabi_dcmpge>
 80047e2:	9c02      	ldr	r4, [sp, #8]
 80047e4:	4626      	mov	r6, r4
 80047e6:	2800      	cmp	r0, #0
 80047e8:	f040 824a 	bne.w	8004c80 <_dtoa_r+0x960>
 80047ec:	2331      	movs	r3, #49	; 0x31
 80047ee:	9f08      	ldr	r7, [sp, #32]
 80047f0:	f109 0901 	add.w	r9, r9, #1
 80047f4:	f807 3b01 	strb.w	r3, [r7], #1
 80047f8:	e246      	b.n	8004c88 <_dtoa_r+0x968>
 80047fa:	07e2      	lsls	r2, r4, #31
 80047fc:	d505      	bpl.n	800480a <_dtoa_r+0x4ea>
 80047fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004802:	f7fb fe69 	bl	80004d8 <__aeabi_dmul>
 8004806:	2301      	movs	r3, #1
 8004808:	3701      	adds	r7, #1
 800480a:	1064      	asrs	r4, r4, #1
 800480c:	3608      	adds	r6, #8
 800480e:	e76d      	b.n	80046ec <_dtoa_r+0x3cc>
 8004810:	2702      	movs	r7, #2
 8004812:	e770      	b.n	80046f6 <_dtoa_r+0x3d6>
 8004814:	46c8      	mov	r8, r9
 8004816:	9c02      	ldr	r4, [sp, #8]
 8004818:	e78f      	b.n	800473a <_dtoa_r+0x41a>
 800481a:	9908      	ldr	r1, [sp, #32]
 800481c:	4b29      	ldr	r3, [pc, #164]	; (80048c4 <_dtoa_r+0x5a4>)
 800481e:	4421      	add	r1, r4
 8004820:	9112      	str	r1, [sp, #72]	; 0x48
 8004822:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004824:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004828:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800482c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004830:	2900      	cmp	r1, #0
 8004832:	d055      	beq.n	80048e0 <_dtoa_r+0x5c0>
 8004834:	2000      	movs	r0, #0
 8004836:	4929      	ldr	r1, [pc, #164]	; (80048dc <_dtoa_r+0x5bc>)
 8004838:	f7fb ff78 	bl	800072c <__aeabi_ddiv>
 800483c:	463b      	mov	r3, r7
 800483e:	4632      	mov	r2, r6
 8004840:	f7fb fc92 	bl	8000168 <__aeabi_dsub>
 8004844:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004848:	9f08      	ldr	r7, [sp, #32]
 800484a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800484e:	f7fc f8f3 	bl	8000a38 <__aeabi_d2iz>
 8004852:	4604      	mov	r4, r0
 8004854:	f7fb fdd6 	bl	8000404 <__aeabi_i2d>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004860:	f7fb fc82 	bl	8000168 <__aeabi_dsub>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	3430      	adds	r4, #48	; 0x30
 800486a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800486e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004872:	f807 4b01 	strb.w	r4, [r7], #1
 8004876:	f7fc f8a1 	bl	80009bc <__aeabi_dcmplt>
 800487a:	2800      	cmp	r0, #0
 800487c:	d174      	bne.n	8004968 <_dtoa_r+0x648>
 800487e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004882:	2000      	movs	r0, #0
 8004884:	4911      	ldr	r1, [pc, #68]	; (80048cc <_dtoa_r+0x5ac>)
 8004886:	f7fb fc6f 	bl	8000168 <__aeabi_dsub>
 800488a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800488e:	f7fc f895 	bl	80009bc <__aeabi_dcmplt>
 8004892:	2800      	cmp	r0, #0
 8004894:	f040 80b6 	bne.w	8004a04 <_dtoa_r+0x6e4>
 8004898:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800489a:	429f      	cmp	r7, r3
 800489c:	f43f af7a 	beq.w	8004794 <_dtoa_r+0x474>
 80048a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048a4:	2200      	movs	r2, #0
 80048a6:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <_dtoa_r+0x5b0>)
 80048a8:	f7fb fe16 	bl	80004d8 <__aeabi_dmul>
 80048ac:	2200      	movs	r2, #0
 80048ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <_dtoa_r+0x5b0>)
 80048b8:	f7fb fe0e 	bl	80004d8 <__aeabi_dmul>
 80048bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048c0:	e7c3      	b.n	800484a <_dtoa_r+0x52a>
 80048c2:	bf00      	nop
 80048c4:	08006488 	.word	0x08006488
 80048c8:	08006460 	.word	0x08006460
 80048cc:	3ff00000 	.word	0x3ff00000
 80048d0:	40240000 	.word	0x40240000
 80048d4:	401c0000 	.word	0x401c0000
 80048d8:	40140000 	.word	0x40140000
 80048dc:	3fe00000 	.word	0x3fe00000
 80048e0:	4630      	mov	r0, r6
 80048e2:	4639      	mov	r1, r7
 80048e4:	f7fb fdf8 	bl	80004d8 <__aeabi_dmul>
 80048e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048ee:	9c08      	ldr	r4, [sp, #32]
 80048f0:	9314      	str	r3, [sp, #80]	; 0x50
 80048f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048f6:	f7fc f89f 	bl	8000a38 <__aeabi_d2iz>
 80048fa:	9015      	str	r0, [sp, #84]	; 0x54
 80048fc:	f7fb fd82 	bl	8000404 <__aeabi_i2d>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004908:	f7fb fc2e 	bl	8000168 <__aeabi_dsub>
 800490c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800490e:	4606      	mov	r6, r0
 8004910:	3330      	adds	r3, #48	; 0x30
 8004912:	f804 3b01 	strb.w	r3, [r4], #1
 8004916:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004918:	460f      	mov	r7, r1
 800491a:	429c      	cmp	r4, r3
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	d124      	bne.n	800496c <_dtoa_r+0x64c>
 8004922:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004926:	4bb3      	ldr	r3, [pc, #716]	; (8004bf4 <_dtoa_r+0x8d4>)
 8004928:	f7fb fc20 	bl	800016c <__adddf3>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4630      	mov	r0, r6
 8004932:	4639      	mov	r1, r7
 8004934:	f7fc f860 	bl	80009f8 <__aeabi_dcmpgt>
 8004938:	2800      	cmp	r0, #0
 800493a:	d162      	bne.n	8004a02 <_dtoa_r+0x6e2>
 800493c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004940:	2000      	movs	r0, #0
 8004942:	49ac      	ldr	r1, [pc, #688]	; (8004bf4 <_dtoa_r+0x8d4>)
 8004944:	f7fb fc10 	bl	8000168 <__aeabi_dsub>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4630      	mov	r0, r6
 800494e:	4639      	mov	r1, r7
 8004950:	f7fc f834 	bl	80009bc <__aeabi_dcmplt>
 8004954:	2800      	cmp	r0, #0
 8004956:	f43f af1d 	beq.w	8004794 <_dtoa_r+0x474>
 800495a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800495c:	1e7b      	subs	r3, r7, #1
 800495e:	9314      	str	r3, [sp, #80]	; 0x50
 8004960:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004964:	2b30      	cmp	r3, #48	; 0x30
 8004966:	d0f8      	beq.n	800495a <_dtoa_r+0x63a>
 8004968:	46c1      	mov	r9, r8
 800496a:	e03a      	b.n	80049e2 <_dtoa_r+0x6c2>
 800496c:	4ba2      	ldr	r3, [pc, #648]	; (8004bf8 <_dtoa_r+0x8d8>)
 800496e:	f7fb fdb3 	bl	80004d8 <__aeabi_dmul>
 8004972:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004976:	e7bc      	b.n	80048f2 <_dtoa_r+0x5d2>
 8004978:	9f08      	ldr	r7, [sp, #32]
 800497a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800497e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004982:	f7fb fed3 	bl	800072c <__aeabi_ddiv>
 8004986:	f7fc f857 	bl	8000a38 <__aeabi_d2iz>
 800498a:	4604      	mov	r4, r0
 800498c:	f7fb fd3a 	bl	8000404 <__aeabi_i2d>
 8004990:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004994:	f7fb fda0 	bl	80004d8 <__aeabi_dmul>
 8004998:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800499c:	460b      	mov	r3, r1
 800499e:	4602      	mov	r2, r0
 80049a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049a4:	f7fb fbe0 	bl	8000168 <__aeabi_dsub>
 80049a8:	f807 6b01 	strb.w	r6, [r7], #1
 80049ac:	9e08      	ldr	r6, [sp, #32]
 80049ae:	9b02      	ldr	r3, [sp, #8]
 80049b0:	1bbe      	subs	r6, r7, r6
 80049b2:	42b3      	cmp	r3, r6
 80049b4:	d13a      	bne.n	8004a2c <_dtoa_r+0x70c>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	f7fb fbd7 	bl	800016c <__adddf3>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049ca:	f7fc f815 	bl	80009f8 <__aeabi_dcmpgt>
 80049ce:	bb58      	cbnz	r0, 8004a28 <_dtoa_r+0x708>
 80049d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049d8:	f7fb ffe6 	bl	80009a8 <__aeabi_dcmpeq>
 80049dc:	b108      	cbz	r0, 80049e2 <_dtoa_r+0x6c2>
 80049de:	07e1      	lsls	r1, r4, #31
 80049e0:	d422      	bmi.n	8004a28 <_dtoa_r+0x708>
 80049e2:	4628      	mov	r0, r5
 80049e4:	4651      	mov	r1, sl
 80049e6:	f000 faf1 	bl	8004fcc <_Bfree>
 80049ea:	2300      	movs	r3, #0
 80049ec:	703b      	strb	r3, [r7, #0]
 80049ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80049f0:	f109 0001 	add.w	r0, r9, #1
 80049f4:	6018      	str	r0, [r3, #0]
 80049f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f43f acdf 	beq.w	80043bc <_dtoa_r+0x9c>
 80049fe:	601f      	str	r7, [r3, #0]
 8004a00:	e4dc      	b.n	80043bc <_dtoa_r+0x9c>
 8004a02:	4627      	mov	r7, r4
 8004a04:	463b      	mov	r3, r7
 8004a06:	461f      	mov	r7, r3
 8004a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a0c:	2a39      	cmp	r2, #57	; 0x39
 8004a0e:	d107      	bne.n	8004a20 <_dtoa_r+0x700>
 8004a10:	9a08      	ldr	r2, [sp, #32]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d1f7      	bne.n	8004a06 <_dtoa_r+0x6e6>
 8004a16:	2230      	movs	r2, #48	; 0x30
 8004a18:	9908      	ldr	r1, [sp, #32]
 8004a1a:	f108 0801 	add.w	r8, r8, #1
 8004a1e:	700a      	strb	r2, [r1, #0]
 8004a20:	781a      	ldrb	r2, [r3, #0]
 8004a22:	3201      	adds	r2, #1
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	e79f      	b.n	8004968 <_dtoa_r+0x648>
 8004a28:	46c8      	mov	r8, r9
 8004a2a:	e7eb      	b.n	8004a04 <_dtoa_r+0x6e4>
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	4b72      	ldr	r3, [pc, #456]	; (8004bf8 <_dtoa_r+0x8d8>)
 8004a30:	f7fb fd52 	bl	80004d8 <__aeabi_dmul>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f7fb ffb2 	bl	80009a8 <__aeabi_dcmpeq>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d098      	beq.n	800497a <_dtoa_r+0x65a>
 8004a48:	e7cb      	b.n	80049e2 <_dtoa_r+0x6c2>
 8004a4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a4c:	2a00      	cmp	r2, #0
 8004a4e:	f000 80cd 	beq.w	8004bec <_dtoa_r+0x8cc>
 8004a52:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004a54:	2a01      	cmp	r2, #1
 8004a56:	f300 80af 	bgt.w	8004bb8 <_dtoa_r+0x898>
 8004a5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004a5c:	2a00      	cmp	r2, #0
 8004a5e:	f000 80a7 	beq.w	8004bb0 <_dtoa_r+0x890>
 8004a62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004a66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004a68:	9f06      	ldr	r7, [sp, #24]
 8004a6a:	9a06      	ldr	r2, [sp, #24]
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	441a      	add	r2, r3
 8004a70:	9206      	str	r2, [sp, #24]
 8004a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a74:	4628      	mov	r0, r5
 8004a76:	441a      	add	r2, r3
 8004a78:	9209      	str	r2, [sp, #36]	; 0x24
 8004a7a:	f000 fb61 	bl	8005140 <__i2b>
 8004a7e:	4606      	mov	r6, r0
 8004a80:	2f00      	cmp	r7, #0
 8004a82:	dd0c      	ble.n	8004a9e <_dtoa_r+0x77e>
 8004a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	dd09      	ble.n	8004a9e <_dtoa_r+0x77e>
 8004a8a:	42bb      	cmp	r3, r7
 8004a8c:	bfa8      	it	ge
 8004a8e:	463b      	movge	r3, r7
 8004a90:	9a06      	ldr	r2, [sp, #24]
 8004a92:	1aff      	subs	r7, r7, r3
 8004a94:	1ad2      	subs	r2, r2, r3
 8004a96:	9206      	str	r2, [sp, #24]
 8004a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aa0:	b1f3      	cbz	r3, 8004ae0 <_dtoa_r+0x7c0>
 8004aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 80a9 	beq.w	8004bfc <_dtoa_r+0x8dc>
 8004aaa:	2c00      	cmp	r4, #0
 8004aac:	dd10      	ble.n	8004ad0 <_dtoa_r+0x7b0>
 8004aae:	4631      	mov	r1, r6
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f000 fbfe 	bl	80052b4 <__pow5mult>
 8004ab8:	4652      	mov	r2, sl
 8004aba:	4601      	mov	r1, r0
 8004abc:	4606      	mov	r6, r0
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f000 fb54 	bl	800516c <__multiply>
 8004ac4:	4680      	mov	r8, r0
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	4628      	mov	r0, r5
 8004aca:	f000 fa7f 	bl	8004fcc <_Bfree>
 8004ace:	46c2      	mov	sl, r8
 8004ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ad2:	1b1a      	subs	r2, r3, r4
 8004ad4:	d004      	beq.n	8004ae0 <_dtoa_r+0x7c0>
 8004ad6:	4651      	mov	r1, sl
 8004ad8:	4628      	mov	r0, r5
 8004ada:	f000 fbeb 	bl	80052b4 <__pow5mult>
 8004ade:	4682      	mov	sl, r0
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	f000 fb2c 	bl	8005140 <__i2b>
 8004ae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aea:	4604      	mov	r4, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f340 8087 	ble.w	8004c00 <_dtoa_r+0x8e0>
 8004af2:	461a      	mov	r2, r3
 8004af4:	4601      	mov	r1, r0
 8004af6:	4628      	mov	r0, r5
 8004af8:	f000 fbdc 	bl	80052b4 <__pow5mult>
 8004afc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004afe:	4604      	mov	r4, r0
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	f340 8080 	ble.w	8004c06 <_dtoa_r+0x8e6>
 8004b06:	f04f 0800 	mov.w	r8, #0
 8004b0a:	6923      	ldr	r3, [r4, #16]
 8004b0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b10:	6918      	ldr	r0, [r3, #16]
 8004b12:	f000 fac7 	bl	80050a4 <__hi0bits>
 8004b16:	f1c0 0020 	rsb	r0, r0, #32
 8004b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b1c:	4418      	add	r0, r3
 8004b1e:	f010 001f 	ands.w	r0, r0, #31
 8004b22:	f000 8092 	beq.w	8004c4a <_dtoa_r+0x92a>
 8004b26:	f1c0 0320 	rsb	r3, r0, #32
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	f340 808a 	ble.w	8004c44 <_dtoa_r+0x924>
 8004b30:	f1c0 001c 	rsb	r0, r0, #28
 8004b34:	9b06      	ldr	r3, [sp, #24]
 8004b36:	4407      	add	r7, r0
 8004b38:	4403      	add	r3, r0
 8004b3a:	9306      	str	r3, [sp, #24]
 8004b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3e:	4403      	add	r3, r0
 8004b40:	9309      	str	r3, [sp, #36]	; 0x24
 8004b42:	9b06      	ldr	r3, [sp, #24]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	dd05      	ble.n	8004b54 <_dtoa_r+0x834>
 8004b48:	4651      	mov	r1, sl
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	f000 fc0b 	bl	8005368 <__lshift>
 8004b52:	4682      	mov	sl, r0
 8004b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	dd05      	ble.n	8004b66 <_dtoa_r+0x846>
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f000 fc02 	bl	8005368 <__lshift>
 8004b64:	4604      	mov	r4, r0
 8004b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d070      	beq.n	8004c4e <_dtoa_r+0x92e>
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	4650      	mov	r0, sl
 8004b70:	f000 fc66 	bl	8005440 <__mcmp>
 8004b74:	2800      	cmp	r0, #0
 8004b76:	da6a      	bge.n	8004c4e <_dtoa_r+0x92e>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	4651      	mov	r1, sl
 8004b7c:	220a      	movs	r2, #10
 8004b7e:	4628      	mov	r0, r5
 8004b80:	f000 fa46 	bl	8005010 <__multadd>
 8004b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b86:	4682      	mov	sl, r0
 8004b88:	f109 39ff 	add.w	r9, r9, #4294967295
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8193 	beq.w	8004eb8 <_dtoa_r+0xb98>
 8004b92:	4631      	mov	r1, r6
 8004b94:	2300      	movs	r3, #0
 8004b96:	220a      	movs	r2, #10
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f000 fa39 	bl	8005010 <__multadd>
 8004b9e:	f1bb 0f00 	cmp.w	fp, #0
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	f300 8093 	bgt.w	8004cce <_dtoa_r+0x9ae>
 8004ba8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	dc57      	bgt.n	8004c5e <_dtoa_r+0x93e>
 8004bae:	e08e      	b.n	8004cce <_dtoa_r+0x9ae>
 8004bb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004bb2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004bb6:	e756      	b.n	8004a66 <_dtoa_r+0x746>
 8004bb8:	9b02      	ldr	r3, [sp, #8]
 8004bba:	1e5c      	subs	r4, r3, #1
 8004bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bbe:	42a3      	cmp	r3, r4
 8004bc0:	bfb7      	itett	lt
 8004bc2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004bc4:	1b1c      	subge	r4, r3, r4
 8004bc6:	1ae2      	sublt	r2, r4, r3
 8004bc8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004bca:	bfbe      	ittt	lt
 8004bcc:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004bce:	189b      	addlt	r3, r3, r2
 8004bd0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004bd2:	9b02      	ldr	r3, [sp, #8]
 8004bd4:	bfb8      	it	lt
 8004bd6:	2400      	movlt	r4, #0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bfbb      	ittet	lt
 8004bdc:	9b06      	ldrlt	r3, [sp, #24]
 8004bde:	9a02      	ldrlt	r2, [sp, #8]
 8004be0:	9f06      	ldrge	r7, [sp, #24]
 8004be2:	1a9f      	sublt	r7, r3, r2
 8004be4:	bfac      	ite	ge
 8004be6:	9b02      	ldrge	r3, [sp, #8]
 8004be8:	2300      	movlt	r3, #0
 8004bea:	e73e      	b.n	8004a6a <_dtoa_r+0x74a>
 8004bec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004bee:	9f06      	ldr	r7, [sp, #24]
 8004bf0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004bf2:	e745      	b.n	8004a80 <_dtoa_r+0x760>
 8004bf4:	3fe00000 	.word	0x3fe00000
 8004bf8:	40240000 	.word	0x40240000
 8004bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bfe:	e76a      	b.n	8004ad6 <_dtoa_r+0x7b6>
 8004c00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	dc19      	bgt.n	8004c3a <_dtoa_r+0x91a>
 8004c06:	9b04      	ldr	r3, [sp, #16]
 8004c08:	b9bb      	cbnz	r3, 8004c3a <_dtoa_r+0x91a>
 8004c0a:	9b05      	ldr	r3, [sp, #20]
 8004c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c10:	b99b      	cbnz	r3, 8004c3a <_dtoa_r+0x91a>
 8004c12:	9b05      	ldr	r3, [sp, #20]
 8004c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c18:	0d1b      	lsrs	r3, r3, #20
 8004c1a:	051b      	lsls	r3, r3, #20
 8004c1c:	b183      	cbz	r3, 8004c40 <_dtoa_r+0x920>
 8004c1e:	f04f 0801 	mov.w	r8, #1
 8004c22:	9b06      	ldr	r3, [sp, #24]
 8004c24:	3301      	adds	r3, #1
 8004c26:	9306      	str	r3, [sp, #24]
 8004c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f47f af6a 	bne.w	8004b0a <_dtoa_r+0x7ea>
 8004c36:	2001      	movs	r0, #1
 8004c38:	e76f      	b.n	8004b1a <_dtoa_r+0x7fa>
 8004c3a:	f04f 0800 	mov.w	r8, #0
 8004c3e:	e7f6      	b.n	8004c2e <_dtoa_r+0x90e>
 8004c40:	4698      	mov	r8, r3
 8004c42:	e7f4      	b.n	8004c2e <_dtoa_r+0x90e>
 8004c44:	f43f af7d 	beq.w	8004b42 <_dtoa_r+0x822>
 8004c48:	4618      	mov	r0, r3
 8004c4a:	301c      	adds	r0, #28
 8004c4c:	e772      	b.n	8004b34 <_dtoa_r+0x814>
 8004c4e:	9b02      	ldr	r3, [sp, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	dc36      	bgt.n	8004cc2 <_dtoa_r+0x9a2>
 8004c54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	dd33      	ble.n	8004cc2 <_dtoa_r+0x9a2>
 8004c5a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004c5e:	f1bb 0f00 	cmp.w	fp, #0
 8004c62:	d10d      	bne.n	8004c80 <_dtoa_r+0x960>
 8004c64:	4621      	mov	r1, r4
 8004c66:	465b      	mov	r3, fp
 8004c68:	2205      	movs	r2, #5
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f000 f9d0 	bl	8005010 <__multadd>
 8004c70:	4601      	mov	r1, r0
 8004c72:	4604      	mov	r4, r0
 8004c74:	4650      	mov	r0, sl
 8004c76:	f000 fbe3 	bl	8005440 <__mcmp>
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	f73f adb6 	bgt.w	80047ec <_dtoa_r+0x4cc>
 8004c80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c82:	9f08      	ldr	r7, [sp, #32]
 8004c84:	ea6f 0903 	mvn.w	r9, r3
 8004c88:	f04f 0800 	mov.w	r8, #0
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f000 f99c 	bl	8004fcc <_Bfree>
 8004c94:	2e00      	cmp	r6, #0
 8004c96:	f43f aea4 	beq.w	80049e2 <_dtoa_r+0x6c2>
 8004c9a:	f1b8 0f00 	cmp.w	r8, #0
 8004c9e:	d005      	beq.n	8004cac <_dtoa_r+0x98c>
 8004ca0:	45b0      	cmp	r8, r6
 8004ca2:	d003      	beq.n	8004cac <_dtoa_r+0x98c>
 8004ca4:	4641      	mov	r1, r8
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f000 f990 	bl	8004fcc <_Bfree>
 8004cac:	4631      	mov	r1, r6
 8004cae:	4628      	mov	r0, r5
 8004cb0:	f000 f98c 	bl	8004fcc <_Bfree>
 8004cb4:	e695      	b.n	80049e2 <_dtoa_r+0x6c2>
 8004cb6:	2400      	movs	r4, #0
 8004cb8:	4626      	mov	r6, r4
 8004cba:	e7e1      	b.n	8004c80 <_dtoa_r+0x960>
 8004cbc:	46c1      	mov	r9, r8
 8004cbe:	4626      	mov	r6, r4
 8004cc0:	e594      	b.n	80047ec <_dtoa_r+0x4cc>
 8004cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cc4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80fc 	beq.w	8004ec6 <_dtoa_r+0xba6>
 8004cce:	2f00      	cmp	r7, #0
 8004cd0:	dd05      	ble.n	8004cde <_dtoa_r+0x9be>
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	463a      	mov	r2, r7
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f000 fb46 	bl	8005368 <__lshift>
 8004cdc:	4606      	mov	r6, r0
 8004cde:	f1b8 0f00 	cmp.w	r8, #0
 8004ce2:	d05c      	beq.n	8004d9e <_dtoa_r+0xa7e>
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	6871      	ldr	r1, [r6, #4]
 8004ce8:	f000 f930 	bl	8004f4c <_Balloc>
 8004cec:	4607      	mov	r7, r0
 8004cee:	b928      	cbnz	r0, 8004cfc <_dtoa_r+0x9dc>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004cf6:	4b7e      	ldr	r3, [pc, #504]	; (8004ef0 <_dtoa_r+0xbd0>)
 8004cf8:	f7ff bb26 	b.w	8004348 <_dtoa_r+0x28>
 8004cfc:	6932      	ldr	r2, [r6, #16]
 8004cfe:	f106 010c 	add.w	r1, r6, #12
 8004d02:	3202      	adds	r2, #2
 8004d04:	0092      	lsls	r2, r2, #2
 8004d06:	300c      	adds	r0, #12
 8004d08:	f000 f912 	bl	8004f30 <memcpy>
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	4639      	mov	r1, r7
 8004d10:	4628      	mov	r0, r5
 8004d12:	f000 fb29 	bl	8005368 <__lshift>
 8004d16:	46b0      	mov	r8, r6
 8004d18:	4606      	mov	r6, r0
 8004d1a:	9b08      	ldr	r3, [sp, #32]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	9302      	str	r3, [sp, #8]
 8004d20:	9b08      	ldr	r3, [sp, #32]
 8004d22:	445b      	add	r3, fp
 8004d24:	930a      	str	r3, [sp, #40]	; 0x28
 8004d26:	9b04      	ldr	r3, [sp, #16]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d2e:	9b02      	ldr	r3, [sp, #8]
 8004d30:	4621      	mov	r1, r4
 8004d32:	4650      	mov	r0, sl
 8004d34:	f103 3bff 	add.w	fp, r3, #4294967295
 8004d38:	f7ff fa62 	bl	8004200 <quorem>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4641      	mov	r1, r8
 8004d40:	3330      	adds	r3, #48	; 0x30
 8004d42:	9004      	str	r0, [sp, #16]
 8004d44:	4650      	mov	r0, sl
 8004d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d48:	f000 fb7a 	bl	8005440 <__mcmp>
 8004d4c:	4632      	mov	r2, r6
 8004d4e:	9006      	str	r0, [sp, #24]
 8004d50:	4621      	mov	r1, r4
 8004d52:	4628      	mov	r0, r5
 8004d54:	f000 fb90 	bl	8005478 <__mdiff>
 8004d58:	68c2      	ldr	r2, [r0, #12]
 8004d5a:	4607      	mov	r7, r0
 8004d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d5e:	bb02      	cbnz	r2, 8004da2 <_dtoa_r+0xa82>
 8004d60:	4601      	mov	r1, r0
 8004d62:	4650      	mov	r0, sl
 8004d64:	f000 fb6c 	bl	8005440 <__mcmp>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	4628      	mov	r0, r5
 8004d70:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004d74:	f000 f92a 	bl	8004fcc <_Bfree>
 8004d78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d7c:	9f02      	ldr	r7, [sp, #8]
 8004d7e:	ea43 0102 	orr.w	r1, r3, r2
 8004d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d84:	430b      	orrs	r3, r1
 8004d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d88:	d10d      	bne.n	8004da6 <_dtoa_r+0xa86>
 8004d8a:	2b39      	cmp	r3, #57	; 0x39
 8004d8c:	d027      	beq.n	8004dde <_dtoa_r+0xabe>
 8004d8e:	9a06      	ldr	r2, [sp, #24]
 8004d90:	2a00      	cmp	r2, #0
 8004d92:	dd01      	ble.n	8004d98 <_dtoa_r+0xa78>
 8004d94:	9b04      	ldr	r3, [sp, #16]
 8004d96:	3331      	adds	r3, #49	; 0x31
 8004d98:	f88b 3000 	strb.w	r3, [fp]
 8004d9c:	e776      	b.n	8004c8c <_dtoa_r+0x96c>
 8004d9e:	4630      	mov	r0, r6
 8004da0:	e7b9      	b.n	8004d16 <_dtoa_r+0x9f6>
 8004da2:	2201      	movs	r2, #1
 8004da4:	e7e2      	b.n	8004d6c <_dtoa_r+0xa4c>
 8004da6:	9906      	ldr	r1, [sp, #24]
 8004da8:	2900      	cmp	r1, #0
 8004daa:	db04      	blt.n	8004db6 <_dtoa_r+0xa96>
 8004dac:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004dae:	4301      	orrs	r1, r0
 8004db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004db2:	4301      	orrs	r1, r0
 8004db4:	d120      	bne.n	8004df8 <_dtoa_r+0xad8>
 8004db6:	2a00      	cmp	r2, #0
 8004db8:	ddee      	ble.n	8004d98 <_dtoa_r+0xa78>
 8004dba:	4651      	mov	r1, sl
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	9302      	str	r3, [sp, #8]
 8004dc2:	f000 fad1 	bl	8005368 <__lshift>
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	4682      	mov	sl, r0
 8004dca:	f000 fb39 	bl	8005440 <__mcmp>
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	9b02      	ldr	r3, [sp, #8]
 8004dd2:	dc02      	bgt.n	8004dda <_dtoa_r+0xaba>
 8004dd4:	d1e0      	bne.n	8004d98 <_dtoa_r+0xa78>
 8004dd6:	07da      	lsls	r2, r3, #31
 8004dd8:	d5de      	bpl.n	8004d98 <_dtoa_r+0xa78>
 8004dda:	2b39      	cmp	r3, #57	; 0x39
 8004ddc:	d1da      	bne.n	8004d94 <_dtoa_r+0xa74>
 8004dde:	2339      	movs	r3, #57	; 0x39
 8004de0:	f88b 3000 	strb.w	r3, [fp]
 8004de4:	463b      	mov	r3, r7
 8004de6:	461f      	mov	r7, r3
 8004de8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	2a39      	cmp	r2, #57	; 0x39
 8004df0:	d050      	beq.n	8004e94 <_dtoa_r+0xb74>
 8004df2:	3201      	adds	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e749      	b.n	8004c8c <_dtoa_r+0x96c>
 8004df8:	2a00      	cmp	r2, #0
 8004dfa:	dd03      	ble.n	8004e04 <_dtoa_r+0xae4>
 8004dfc:	2b39      	cmp	r3, #57	; 0x39
 8004dfe:	d0ee      	beq.n	8004dde <_dtoa_r+0xabe>
 8004e00:	3301      	adds	r3, #1
 8004e02:	e7c9      	b.n	8004d98 <_dtoa_r+0xa78>
 8004e04:	9a02      	ldr	r2, [sp, #8]
 8004e06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004e0c:	428a      	cmp	r2, r1
 8004e0e:	d02a      	beq.n	8004e66 <_dtoa_r+0xb46>
 8004e10:	4651      	mov	r1, sl
 8004e12:	2300      	movs	r3, #0
 8004e14:	220a      	movs	r2, #10
 8004e16:	4628      	mov	r0, r5
 8004e18:	f000 f8fa 	bl	8005010 <__multadd>
 8004e1c:	45b0      	cmp	r8, r6
 8004e1e:	4682      	mov	sl, r0
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	f04f 020a 	mov.w	r2, #10
 8004e28:	4641      	mov	r1, r8
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	d107      	bne.n	8004e3e <_dtoa_r+0xb1e>
 8004e2e:	f000 f8ef 	bl	8005010 <__multadd>
 8004e32:	4680      	mov	r8, r0
 8004e34:	4606      	mov	r6, r0
 8004e36:	9b02      	ldr	r3, [sp, #8]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	9302      	str	r3, [sp, #8]
 8004e3c:	e777      	b.n	8004d2e <_dtoa_r+0xa0e>
 8004e3e:	f000 f8e7 	bl	8005010 <__multadd>
 8004e42:	4631      	mov	r1, r6
 8004e44:	4680      	mov	r8, r0
 8004e46:	2300      	movs	r3, #0
 8004e48:	220a      	movs	r2, #10
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	f000 f8e0 	bl	8005010 <__multadd>
 8004e50:	4606      	mov	r6, r0
 8004e52:	e7f0      	b.n	8004e36 <_dtoa_r+0xb16>
 8004e54:	f1bb 0f00 	cmp.w	fp, #0
 8004e58:	bfcc      	ite	gt
 8004e5a:	465f      	movgt	r7, fp
 8004e5c:	2701      	movle	r7, #1
 8004e5e:	f04f 0800 	mov.w	r8, #0
 8004e62:	9a08      	ldr	r2, [sp, #32]
 8004e64:	4417      	add	r7, r2
 8004e66:	4651      	mov	r1, sl
 8004e68:	2201      	movs	r2, #1
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	9302      	str	r3, [sp, #8]
 8004e6e:	f000 fa7b 	bl	8005368 <__lshift>
 8004e72:	4621      	mov	r1, r4
 8004e74:	4682      	mov	sl, r0
 8004e76:	f000 fae3 	bl	8005440 <__mcmp>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	dcb2      	bgt.n	8004de4 <_dtoa_r+0xac4>
 8004e7e:	d102      	bne.n	8004e86 <_dtoa_r+0xb66>
 8004e80:	9b02      	ldr	r3, [sp, #8]
 8004e82:	07db      	lsls	r3, r3, #31
 8004e84:	d4ae      	bmi.n	8004de4 <_dtoa_r+0xac4>
 8004e86:	463b      	mov	r3, r7
 8004e88:	461f      	mov	r7, r3
 8004e8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e8e:	2a30      	cmp	r2, #48	; 0x30
 8004e90:	d0fa      	beq.n	8004e88 <_dtoa_r+0xb68>
 8004e92:	e6fb      	b.n	8004c8c <_dtoa_r+0x96c>
 8004e94:	9a08      	ldr	r2, [sp, #32]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d1a5      	bne.n	8004de6 <_dtoa_r+0xac6>
 8004e9a:	2331      	movs	r3, #49	; 0x31
 8004e9c:	f109 0901 	add.w	r9, r9, #1
 8004ea0:	7013      	strb	r3, [r2, #0]
 8004ea2:	e6f3      	b.n	8004c8c <_dtoa_r+0x96c>
 8004ea4:	4b13      	ldr	r3, [pc, #76]	; (8004ef4 <_dtoa_r+0xbd4>)
 8004ea6:	f7ff baa7 	b.w	80043f8 <_dtoa_r+0xd8>
 8004eaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f47f aa80 	bne.w	80043b2 <_dtoa_r+0x92>
 8004eb2:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <_dtoa_r+0xbd8>)
 8004eb4:	f7ff baa0 	b.w	80043f8 <_dtoa_r+0xd8>
 8004eb8:	f1bb 0f00 	cmp.w	fp, #0
 8004ebc:	dc03      	bgt.n	8004ec6 <_dtoa_r+0xba6>
 8004ebe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	f73f aecc 	bgt.w	8004c5e <_dtoa_r+0x93e>
 8004ec6:	9f08      	ldr	r7, [sp, #32]
 8004ec8:	4621      	mov	r1, r4
 8004eca:	4650      	mov	r0, sl
 8004ecc:	f7ff f998 	bl	8004200 <quorem>
 8004ed0:	9a08      	ldr	r2, [sp, #32]
 8004ed2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004ed6:	f807 3b01 	strb.w	r3, [r7], #1
 8004eda:	1aba      	subs	r2, r7, r2
 8004edc:	4593      	cmp	fp, r2
 8004ede:	ddb9      	ble.n	8004e54 <_dtoa_r+0xb34>
 8004ee0:	4651      	mov	r1, sl
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	220a      	movs	r2, #10
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f000 f892 	bl	8005010 <__multadd>
 8004eec:	4682      	mov	sl, r0
 8004eee:	e7eb      	b.n	8004ec8 <_dtoa_r+0xba8>
 8004ef0:	080063eb 	.word	0x080063eb
 8004ef4:	08006344 	.word	0x08006344
 8004ef8:	08006368 	.word	0x08006368

08004efc <_localeconv_r>:
 8004efc:	4800      	ldr	r0, [pc, #0]	; (8004f00 <_localeconv_r+0x4>)
 8004efe:	4770      	bx	lr
 8004f00:	20000160 	.word	0x20000160

08004f04 <malloc>:
 8004f04:	4b02      	ldr	r3, [pc, #8]	; (8004f10 <malloc+0xc>)
 8004f06:	4601      	mov	r1, r0
 8004f08:	6818      	ldr	r0, [r3, #0]
 8004f0a:	f000 bbfb 	b.w	8005704 <_malloc_r>
 8004f0e:	bf00      	nop
 8004f10:	2000000c 	.word	0x2000000c

08004f14 <memchr>:
 8004f14:	4603      	mov	r3, r0
 8004f16:	b510      	push	{r4, lr}
 8004f18:	b2c9      	uxtb	r1, r1
 8004f1a:	4402      	add	r2, r0
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	d101      	bne.n	8004f26 <memchr+0x12>
 8004f22:	2000      	movs	r0, #0
 8004f24:	e003      	b.n	8004f2e <memchr+0x1a>
 8004f26:	7804      	ldrb	r4, [r0, #0]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	428c      	cmp	r4, r1
 8004f2c:	d1f6      	bne.n	8004f1c <memchr+0x8>
 8004f2e:	bd10      	pop	{r4, pc}

08004f30 <memcpy>:
 8004f30:	440a      	add	r2, r1
 8004f32:	4291      	cmp	r1, r2
 8004f34:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f38:	d100      	bne.n	8004f3c <memcpy+0xc>
 8004f3a:	4770      	bx	lr
 8004f3c:	b510      	push	{r4, lr}
 8004f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f42:	4291      	cmp	r1, r2
 8004f44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f48:	d1f9      	bne.n	8004f3e <memcpy+0xe>
 8004f4a:	bd10      	pop	{r4, pc}

08004f4c <_Balloc>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004f50:	4604      	mov	r4, r0
 8004f52:	460d      	mov	r5, r1
 8004f54:	b976      	cbnz	r6, 8004f74 <_Balloc+0x28>
 8004f56:	2010      	movs	r0, #16
 8004f58:	f7ff ffd4 	bl	8004f04 <malloc>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	6260      	str	r0, [r4, #36]	; 0x24
 8004f60:	b920      	cbnz	r0, 8004f6c <_Balloc+0x20>
 8004f62:	2166      	movs	r1, #102	; 0x66
 8004f64:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <_Balloc+0x78>)
 8004f66:	4818      	ldr	r0, [pc, #96]	; (8004fc8 <_Balloc+0x7c>)
 8004f68:	f000 fc36 	bl	80057d8 <__assert_func>
 8004f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f70:	6006      	str	r6, [r0, #0]
 8004f72:	60c6      	str	r6, [r0, #12]
 8004f74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004f76:	68f3      	ldr	r3, [r6, #12]
 8004f78:	b183      	cbz	r3, 8004f9c <_Balloc+0x50>
 8004f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f82:	b9b8      	cbnz	r0, 8004fb4 <_Balloc+0x68>
 8004f84:	2101      	movs	r1, #1
 8004f86:	fa01 f605 	lsl.w	r6, r1, r5
 8004f8a:	1d72      	adds	r2, r6, #5
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	0092      	lsls	r2, r2, #2
 8004f90:	f000 fb5e 	bl	8005650 <_calloc_r>
 8004f94:	b160      	cbz	r0, 8004fb0 <_Balloc+0x64>
 8004f96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f9a:	e00e      	b.n	8004fba <_Balloc+0x6e>
 8004f9c:	2221      	movs	r2, #33	; 0x21
 8004f9e:	2104      	movs	r1, #4
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f000 fb55 	bl	8005650 <_calloc_r>
 8004fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fa8:	60f0      	str	r0, [r6, #12]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e4      	bne.n	8004f7a <_Balloc+0x2e>
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	bd70      	pop	{r4, r5, r6, pc}
 8004fb4:	6802      	ldr	r2, [r0, #0]
 8004fb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004fc0:	e7f7      	b.n	8004fb2 <_Balloc+0x66>
 8004fc2:	bf00      	nop
 8004fc4:	08006375 	.word	0x08006375
 8004fc8:	080063fc 	.word	0x080063fc

08004fcc <_Bfree>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004fd0:	4605      	mov	r5, r0
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	b976      	cbnz	r6, 8004ff4 <_Bfree+0x28>
 8004fd6:	2010      	movs	r0, #16
 8004fd8:	f7ff ff94 	bl	8004f04 <malloc>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	6268      	str	r0, [r5, #36]	; 0x24
 8004fe0:	b920      	cbnz	r0, 8004fec <_Bfree+0x20>
 8004fe2:	218a      	movs	r1, #138	; 0x8a
 8004fe4:	4b08      	ldr	r3, [pc, #32]	; (8005008 <_Bfree+0x3c>)
 8004fe6:	4809      	ldr	r0, [pc, #36]	; (800500c <_Bfree+0x40>)
 8004fe8:	f000 fbf6 	bl	80057d8 <__assert_func>
 8004fec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ff0:	6006      	str	r6, [r0, #0]
 8004ff2:	60c6      	str	r6, [r0, #12]
 8004ff4:	b13c      	cbz	r4, 8005006 <_Bfree+0x3a>
 8004ff6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ff8:	6862      	ldr	r2, [r4, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005000:	6021      	str	r1, [r4, #0]
 8005002:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005006:	bd70      	pop	{r4, r5, r6, pc}
 8005008:	08006375 	.word	0x08006375
 800500c:	080063fc 	.word	0x080063fc

08005010 <__multadd>:
 8005010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005014:	4698      	mov	r8, r3
 8005016:	460c      	mov	r4, r1
 8005018:	2300      	movs	r3, #0
 800501a:	690e      	ldr	r6, [r1, #16]
 800501c:	4607      	mov	r7, r0
 800501e:	f101 0014 	add.w	r0, r1, #20
 8005022:	6805      	ldr	r5, [r0, #0]
 8005024:	3301      	adds	r3, #1
 8005026:	b2a9      	uxth	r1, r5
 8005028:	fb02 8101 	mla	r1, r2, r1, r8
 800502c:	0c2d      	lsrs	r5, r5, #16
 800502e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005032:	fb02 c505 	mla	r5, r2, r5, ip
 8005036:	b289      	uxth	r1, r1
 8005038:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800503c:	429e      	cmp	r6, r3
 800503e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005042:	f840 1b04 	str.w	r1, [r0], #4
 8005046:	dcec      	bgt.n	8005022 <__multadd+0x12>
 8005048:	f1b8 0f00 	cmp.w	r8, #0
 800504c:	d022      	beq.n	8005094 <__multadd+0x84>
 800504e:	68a3      	ldr	r3, [r4, #8]
 8005050:	42b3      	cmp	r3, r6
 8005052:	dc19      	bgt.n	8005088 <__multadd+0x78>
 8005054:	6861      	ldr	r1, [r4, #4]
 8005056:	4638      	mov	r0, r7
 8005058:	3101      	adds	r1, #1
 800505a:	f7ff ff77 	bl	8004f4c <_Balloc>
 800505e:	4605      	mov	r5, r0
 8005060:	b928      	cbnz	r0, 800506e <__multadd+0x5e>
 8005062:	4602      	mov	r2, r0
 8005064:	21b5      	movs	r1, #181	; 0xb5
 8005066:	4b0d      	ldr	r3, [pc, #52]	; (800509c <__multadd+0x8c>)
 8005068:	480d      	ldr	r0, [pc, #52]	; (80050a0 <__multadd+0x90>)
 800506a:	f000 fbb5 	bl	80057d8 <__assert_func>
 800506e:	6922      	ldr	r2, [r4, #16]
 8005070:	f104 010c 	add.w	r1, r4, #12
 8005074:	3202      	adds	r2, #2
 8005076:	0092      	lsls	r2, r2, #2
 8005078:	300c      	adds	r0, #12
 800507a:	f7ff ff59 	bl	8004f30 <memcpy>
 800507e:	4621      	mov	r1, r4
 8005080:	4638      	mov	r0, r7
 8005082:	f7ff ffa3 	bl	8004fcc <_Bfree>
 8005086:	462c      	mov	r4, r5
 8005088:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800508c:	3601      	adds	r6, #1
 800508e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005092:	6126      	str	r6, [r4, #16]
 8005094:	4620      	mov	r0, r4
 8005096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800509a:	bf00      	nop
 800509c:	080063eb 	.word	0x080063eb
 80050a0:	080063fc 	.word	0x080063fc

080050a4 <__hi0bits>:
 80050a4:	0c02      	lsrs	r2, r0, #16
 80050a6:	0412      	lsls	r2, r2, #16
 80050a8:	4603      	mov	r3, r0
 80050aa:	b9ca      	cbnz	r2, 80050e0 <__hi0bits+0x3c>
 80050ac:	0403      	lsls	r3, r0, #16
 80050ae:	2010      	movs	r0, #16
 80050b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80050b4:	bf04      	itt	eq
 80050b6:	021b      	lsleq	r3, r3, #8
 80050b8:	3008      	addeq	r0, #8
 80050ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80050be:	bf04      	itt	eq
 80050c0:	011b      	lsleq	r3, r3, #4
 80050c2:	3004      	addeq	r0, #4
 80050c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80050c8:	bf04      	itt	eq
 80050ca:	009b      	lsleq	r3, r3, #2
 80050cc:	3002      	addeq	r0, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	db05      	blt.n	80050de <__hi0bits+0x3a>
 80050d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80050d6:	f100 0001 	add.w	r0, r0, #1
 80050da:	bf08      	it	eq
 80050dc:	2020      	moveq	r0, #32
 80050de:	4770      	bx	lr
 80050e0:	2000      	movs	r0, #0
 80050e2:	e7e5      	b.n	80050b0 <__hi0bits+0xc>

080050e4 <__lo0bits>:
 80050e4:	6803      	ldr	r3, [r0, #0]
 80050e6:	4602      	mov	r2, r0
 80050e8:	f013 0007 	ands.w	r0, r3, #7
 80050ec:	d00b      	beq.n	8005106 <__lo0bits+0x22>
 80050ee:	07d9      	lsls	r1, r3, #31
 80050f0:	d422      	bmi.n	8005138 <__lo0bits+0x54>
 80050f2:	0798      	lsls	r0, r3, #30
 80050f4:	bf49      	itett	mi
 80050f6:	085b      	lsrmi	r3, r3, #1
 80050f8:	089b      	lsrpl	r3, r3, #2
 80050fa:	2001      	movmi	r0, #1
 80050fc:	6013      	strmi	r3, [r2, #0]
 80050fe:	bf5c      	itt	pl
 8005100:	2002      	movpl	r0, #2
 8005102:	6013      	strpl	r3, [r2, #0]
 8005104:	4770      	bx	lr
 8005106:	b299      	uxth	r1, r3
 8005108:	b909      	cbnz	r1, 800510e <__lo0bits+0x2a>
 800510a:	2010      	movs	r0, #16
 800510c:	0c1b      	lsrs	r3, r3, #16
 800510e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005112:	bf04      	itt	eq
 8005114:	0a1b      	lsreq	r3, r3, #8
 8005116:	3008      	addeq	r0, #8
 8005118:	0719      	lsls	r1, r3, #28
 800511a:	bf04      	itt	eq
 800511c:	091b      	lsreq	r3, r3, #4
 800511e:	3004      	addeq	r0, #4
 8005120:	0799      	lsls	r1, r3, #30
 8005122:	bf04      	itt	eq
 8005124:	089b      	lsreq	r3, r3, #2
 8005126:	3002      	addeq	r0, #2
 8005128:	07d9      	lsls	r1, r3, #31
 800512a:	d403      	bmi.n	8005134 <__lo0bits+0x50>
 800512c:	085b      	lsrs	r3, r3, #1
 800512e:	f100 0001 	add.w	r0, r0, #1
 8005132:	d003      	beq.n	800513c <__lo0bits+0x58>
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	4770      	bx	lr
 8005138:	2000      	movs	r0, #0
 800513a:	4770      	bx	lr
 800513c:	2020      	movs	r0, #32
 800513e:	4770      	bx	lr

08005140 <__i2b>:
 8005140:	b510      	push	{r4, lr}
 8005142:	460c      	mov	r4, r1
 8005144:	2101      	movs	r1, #1
 8005146:	f7ff ff01 	bl	8004f4c <_Balloc>
 800514a:	4602      	mov	r2, r0
 800514c:	b928      	cbnz	r0, 800515a <__i2b+0x1a>
 800514e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005152:	4b04      	ldr	r3, [pc, #16]	; (8005164 <__i2b+0x24>)
 8005154:	4804      	ldr	r0, [pc, #16]	; (8005168 <__i2b+0x28>)
 8005156:	f000 fb3f 	bl	80057d8 <__assert_func>
 800515a:	2301      	movs	r3, #1
 800515c:	6144      	str	r4, [r0, #20]
 800515e:	6103      	str	r3, [r0, #16]
 8005160:	bd10      	pop	{r4, pc}
 8005162:	bf00      	nop
 8005164:	080063eb 	.word	0x080063eb
 8005168:	080063fc 	.word	0x080063fc

0800516c <__multiply>:
 800516c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005170:	4614      	mov	r4, r2
 8005172:	690a      	ldr	r2, [r1, #16]
 8005174:	6923      	ldr	r3, [r4, #16]
 8005176:	460d      	mov	r5, r1
 8005178:	429a      	cmp	r2, r3
 800517a:	bfbe      	ittt	lt
 800517c:	460b      	movlt	r3, r1
 800517e:	4625      	movlt	r5, r4
 8005180:	461c      	movlt	r4, r3
 8005182:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005186:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800518a:	68ab      	ldr	r3, [r5, #8]
 800518c:	6869      	ldr	r1, [r5, #4]
 800518e:	eb0a 0709 	add.w	r7, sl, r9
 8005192:	42bb      	cmp	r3, r7
 8005194:	b085      	sub	sp, #20
 8005196:	bfb8      	it	lt
 8005198:	3101      	addlt	r1, #1
 800519a:	f7ff fed7 	bl	8004f4c <_Balloc>
 800519e:	b930      	cbnz	r0, 80051ae <__multiply+0x42>
 80051a0:	4602      	mov	r2, r0
 80051a2:	f240 115d 	movw	r1, #349	; 0x15d
 80051a6:	4b41      	ldr	r3, [pc, #260]	; (80052ac <__multiply+0x140>)
 80051a8:	4841      	ldr	r0, [pc, #260]	; (80052b0 <__multiply+0x144>)
 80051aa:	f000 fb15 	bl	80057d8 <__assert_func>
 80051ae:	f100 0614 	add.w	r6, r0, #20
 80051b2:	4633      	mov	r3, r6
 80051b4:	2200      	movs	r2, #0
 80051b6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80051ba:	4543      	cmp	r3, r8
 80051bc:	d31e      	bcc.n	80051fc <__multiply+0x90>
 80051be:	f105 0c14 	add.w	ip, r5, #20
 80051c2:	f104 0314 	add.w	r3, r4, #20
 80051c6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80051ca:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80051ce:	9202      	str	r2, [sp, #8]
 80051d0:	ebac 0205 	sub.w	r2, ip, r5
 80051d4:	3a15      	subs	r2, #21
 80051d6:	f022 0203 	bic.w	r2, r2, #3
 80051da:	3204      	adds	r2, #4
 80051dc:	f105 0115 	add.w	r1, r5, #21
 80051e0:	458c      	cmp	ip, r1
 80051e2:	bf38      	it	cc
 80051e4:	2204      	movcc	r2, #4
 80051e6:	9201      	str	r2, [sp, #4]
 80051e8:	9a02      	ldr	r2, [sp, #8]
 80051ea:	9303      	str	r3, [sp, #12]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d808      	bhi.n	8005202 <__multiply+0x96>
 80051f0:	2f00      	cmp	r7, #0
 80051f2:	dc55      	bgt.n	80052a0 <__multiply+0x134>
 80051f4:	6107      	str	r7, [r0, #16]
 80051f6:	b005      	add	sp, #20
 80051f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fc:	f843 2b04 	str.w	r2, [r3], #4
 8005200:	e7db      	b.n	80051ba <__multiply+0x4e>
 8005202:	f8b3 a000 	ldrh.w	sl, [r3]
 8005206:	f1ba 0f00 	cmp.w	sl, #0
 800520a:	d020      	beq.n	800524e <__multiply+0xe2>
 800520c:	46b1      	mov	r9, r6
 800520e:	2200      	movs	r2, #0
 8005210:	f105 0e14 	add.w	lr, r5, #20
 8005214:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005218:	f8d9 b000 	ldr.w	fp, [r9]
 800521c:	b2a1      	uxth	r1, r4
 800521e:	fa1f fb8b 	uxth.w	fp, fp
 8005222:	fb0a b101 	mla	r1, sl, r1, fp
 8005226:	4411      	add	r1, r2
 8005228:	f8d9 2000 	ldr.w	r2, [r9]
 800522c:	0c24      	lsrs	r4, r4, #16
 800522e:	0c12      	lsrs	r2, r2, #16
 8005230:	fb0a 2404 	mla	r4, sl, r4, r2
 8005234:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005238:	b289      	uxth	r1, r1
 800523a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800523e:	45f4      	cmp	ip, lr
 8005240:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005244:	f849 1b04 	str.w	r1, [r9], #4
 8005248:	d8e4      	bhi.n	8005214 <__multiply+0xa8>
 800524a:	9901      	ldr	r1, [sp, #4]
 800524c:	5072      	str	r2, [r6, r1]
 800524e:	9a03      	ldr	r2, [sp, #12]
 8005250:	3304      	adds	r3, #4
 8005252:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005256:	f1b9 0f00 	cmp.w	r9, #0
 800525a:	d01f      	beq.n	800529c <__multiply+0x130>
 800525c:	46b6      	mov	lr, r6
 800525e:	f04f 0a00 	mov.w	sl, #0
 8005262:	6834      	ldr	r4, [r6, #0]
 8005264:	f105 0114 	add.w	r1, r5, #20
 8005268:	880a      	ldrh	r2, [r1, #0]
 800526a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800526e:	b2a4      	uxth	r4, r4
 8005270:	fb09 b202 	mla	r2, r9, r2, fp
 8005274:	4492      	add	sl, r2
 8005276:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800527a:	f84e 4b04 	str.w	r4, [lr], #4
 800527e:	f851 4b04 	ldr.w	r4, [r1], #4
 8005282:	f8be 2000 	ldrh.w	r2, [lr]
 8005286:	0c24      	lsrs	r4, r4, #16
 8005288:	fb09 2404 	mla	r4, r9, r4, r2
 800528c:	458c      	cmp	ip, r1
 800528e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005292:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005296:	d8e7      	bhi.n	8005268 <__multiply+0xfc>
 8005298:	9a01      	ldr	r2, [sp, #4]
 800529a:	50b4      	str	r4, [r6, r2]
 800529c:	3604      	adds	r6, #4
 800529e:	e7a3      	b.n	80051e8 <__multiply+0x7c>
 80052a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1a5      	bne.n	80051f4 <__multiply+0x88>
 80052a8:	3f01      	subs	r7, #1
 80052aa:	e7a1      	b.n	80051f0 <__multiply+0x84>
 80052ac:	080063eb 	.word	0x080063eb
 80052b0:	080063fc 	.word	0x080063fc

080052b4 <__pow5mult>:
 80052b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052b8:	4615      	mov	r5, r2
 80052ba:	f012 0203 	ands.w	r2, r2, #3
 80052be:	4606      	mov	r6, r0
 80052c0:	460f      	mov	r7, r1
 80052c2:	d007      	beq.n	80052d4 <__pow5mult+0x20>
 80052c4:	4c25      	ldr	r4, [pc, #148]	; (800535c <__pow5mult+0xa8>)
 80052c6:	3a01      	subs	r2, #1
 80052c8:	2300      	movs	r3, #0
 80052ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80052ce:	f7ff fe9f 	bl	8005010 <__multadd>
 80052d2:	4607      	mov	r7, r0
 80052d4:	10ad      	asrs	r5, r5, #2
 80052d6:	d03d      	beq.n	8005354 <__pow5mult+0xa0>
 80052d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80052da:	b97c      	cbnz	r4, 80052fc <__pow5mult+0x48>
 80052dc:	2010      	movs	r0, #16
 80052de:	f7ff fe11 	bl	8004f04 <malloc>
 80052e2:	4602      	mov	r2, r0
 80052e4:	6270      	str	r0, [r6, #36]	; 0x24
 80052e6:	b928      	cbnz	r0, 80052f4 <__pow5mult+0x40>
 80052e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80052ec:	4b1c      	ldr	r3, [pc, #112]	; (8005360 <__pow5mult+0xac>)
 80052ee:	481d      	ldr	r0, [pc, #116]	; (8005364 <__pow5mult+0xb0>)
 80052f0:	f000 fa72 	bl	80057d8 <__assert_func>
 80052f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052f8:	6004      	str	r4, [r0, #0]
 80052fa:	60c4      	str	r4, [r0, #12]
 80052fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005300:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005304:	b94c      	cbnz	r4, 800531a <__pow5mult+0x66>
 8005306:	f240 2171 	movw	r1, #625	; 0x271
 800530a:	4630      	mov	r0, r6
 800530c:	f7ff ff18 	bl	8005140 <__i2b>
 8005310:	2300      	movs	r3, #0
 8005312:	4604      	mov	r4, r0
 8005314:	f8c8 0008 	str.w	r0, [r8, #8]
 8005318:	6003      	str	r3, [r0, #0]
 800531a:	f04f 0900 	mov.w	r9, #0
 800531e:	07eb      	lsls	r3, r5, #31
 8005320:	d50a      	bpl.n	8005338 <__pow5mult+0x84>
 8005322:	4639      	mov	r1, r7
 8005324:	4622      	mov	r2, r4
 8005326:	4630      	mov	r0, r6
 8005328:	f7ff ff20 	bl	800516c <__multiply>
 800532c:	4680      	mov	r8, r0
 800532e:	4639      	mov	r1, r7
 8005330:	4630      	mov	r0, r6
 8005332:	f7ff fe4b 	bl	8004fcc <_Bfree>
 8005336:	4647      	mov	r7, r8
 8005338:	106d      	asrs	r5, r5, #1
 800533a:	d00b      	beq.n	8005354 <__pow5mult+0xa0>
 800533c:	6820      	ldr	r0, [r4, #0]
 800533e:	b938      	cbnz	r0, 8005350 <__pow5mult+0x9c>
 8005340:	4622      	mov	r2, r4
 8005342:	4621      	mov	r1, r4
 8005344:	4630      	mov	r0, r6
 8005346:	f7ff ff11 	bl	800516c <__multiply>
 800534a:	6020      	str	r0, [r4, #0]
 800534c:	f8c0 9000 	str.w	r9, [r0]
 8005350:	4604      	mov	r4, r0
 8005352:	e7e4      	b.n	800531e <__pow5mult+0x6a>
 8005354:	4638      	mov	r0, r7
 8005356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800535a:	bf00      	nop
 800535c:	08006550 	.word	0x08006550
 8005360:	08006375 	.word	0x08006375
 8005364:	080063fc 	.word	0x080063fc

08005368 <__lshift>:
 8005368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800536c:	460c      	mov	r4, r1
 800536e:	4607      	mov	r7, r0
 8005370:	4691      	mov	r9, r2
 8005372:	6923      	ldr	r3, [r4, #16]
 8005374:	6849      	ldr	r1, [r1, #4]
 8005376:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800537a:	68a3      	ldr	r3, [r4, #8]
 800537c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005380:	f108 0601 	add.w	r6, r8, #1
 8005384:	42b3      	cmp	r3, r6
 8005386:	db0b      	blt.n	80053a0 <__lshift+0x38>
 8005388:	4638      	mov	r0, r7
 800538a:	f7ff fddf 	bl	8004f4c <_Balloc>
 800538e:	4605      	mov	r5, r0
 8005390:	b948      	cbnz	r0, 80053a6 <__lshift+0x3e>
 8005392:	4602      	mov	r2, r0
 8005394:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005398:	4b27      	ldr	r3, [pc, #156]	; (8005438 <__lshift+0xd0>)
 800539a:	4828      	ldr	r0, [pc, #160]	; (800543c <__lshift+0xd4>)
 800539c:	f000 fa1c 	bl	80057d8 <__assert_func>
 80053a0:	3101      	adds	r1, #1
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	e7ee      	b.n	8005384 <__lshift+0x1c>
 80053a6:	2300      	movs	r3, #0
 80053a8:	f100 0114 	add.w	r1, r0, #20
 80053ac:	f100 0210 	add.w	r2, r0, #16
 80053b0:	4618      	mov	r0, r3
 80053b2:	4553      	cmp	r3, sl
 80053b4:	db33      	blt.n	800541e <__lshift+0xb6>
 80053b6:	6920      	ldr	r0, [r4, #16]
 80053b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80053bc:	f104 0314 	add.w	r3, r4, #20
 80053c0:	f019 091f 	ands.w	r9, r9, #31
 80053c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80053c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80053cc:	d02b      	beq.n	8005426 <__lshift+0xbe>
 80053ce:	468a      	mov	sl, r1
 80053d0:	2200      	movs	r2, #0
 80053d2:	f1c9 0e20 	rsb	lr, r9, #32
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	fa00 f009 	lsl.w	r0, r0, r9
 80053dc:	4302      	orrs	r2, r0
 80053de:	f84a 2b04 	str.w	r2, [sl], #4
 80053e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e6:	459c      	cmp	ip, r3
 80053e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80053ec:	d8f3      	bhi.n	80053d6 <__lshift+0x6e>
 80053ee:	ebac 0304 	sub.w	r3, ip, r4
 80053f2:	3b15      	subs	r3, #21
 80053f4:	f023 0303 	bic.w	r3, r3, #3
 80053f8:	3304      	adds	r3, #4
 80053fa:	f104 0015 	add.w	r0, r4, #21
 80053fe:	4584      	cmp	ip, r0
 8005400:	bf38      	it	cc
 8005402:	2304      	movcc	r3, #4
 8005404:	50ca      	str	r2, [r1, r3]
 8005406:	b10a      	cbz	r2, 800540c <__lshift+0xa4>
 8005408:	f108 0602 	add.w	r6, r8, #2
 800540c:	3e01      	subs	r6, #1
 800540e:	4638      	mov	r0, r7
 8005410:	4621      	mov	r1, r4
 8005412:	612e      	str	r6, [r5, #16]
 8005414:	f7ff fdda 	bl	8004fcc <_Bfree>
 8005418:	4628      	mov	r0, r5
 800541a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800541e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005422:	3301      	adds	r3, #1
 8005424:	e7c5      	b.n	80053b2 <__lshift+0x4a>
 8005426:	3904      	subs	r1, #4
 8005428:	f853 2b04 	ldr.w	r2, [r3], #4
 800542c:	459c      	cmp	ip, r3
 800542e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005432:	d8f9      	bhi.n	8005428 <__lshift+0xc0>
 8005434:	e7ea      	b.n	800540c <__lshift+0xa4>
 8005436:	bf00      	nop
 8005438:	080063eb 	.word	0x080063eb
 800543c:	080063fc 	.word	0x080063fc

08005440 <__mcmp>:
 8005440:	4603      	mov	r3, r0
 8005442:	690a      	ldr	r2, [r1, #16]
 8005444:	6900      	ldr	r0, [r0, #16]
 8005446:	b530      	push	{r4, r5, lr}
 8005448:	1a80      	subs	r0, r0, r2
 800544a:	d10d      	bne.n	8005468 <__mcmp+0x28>
 800544c:	3314      	adds	r3, #20
 800544e:	3114      	adds	r1, #20
 8005450:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005454:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005458:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800545c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005460:	4295      	cmp	r5, r2
 8005462:	d002      	beq.n	800546a <__mcmp+0x2a>
 8005464:	d304      	bcc.n	8005470 <__mcmp+0x30>
 8005466:	2001      	movs	r0, #1
 8005468:	bd30      	pop	{r4, r5, pc}
 800546a:	42a3      	cmp	r3, r4
 800546c:	d3f4      	bcc.n	8005458 <__mcmp+0x18>
 800546e:	e7fb      	b.n	8005468 <__mcmp+0x28>
 8005470:	f04f 30ff 	mov.w	r0, #4294967295
 8005474:	e7f8      	b.n	8005468 <__mcmp+0x28>
	...

08005478 <__mdiff>:
 8005478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547c:	460c      	mov	r4, r1
 800547e:	4606      	mov	r6, r0
 8005480:	4611      	mov	r1, r2
 8005482:	4620      	mov	r0, r4
 8005484:	4692      	mov	sl, r2
 8005486:	f7ff ffdb 	bl	8005440 <__mcmp>
 800548a:	1e05      	subs	r5, r0, #0
 800548c:	d111      	bne.n	80054b2 <__mdiff+0x3a>
 800548e:	4629      	mov	r1, r5
 8005490:	4630      	mov	r0, r6
 8005492:	f7ff fd5b 	bl	8004f4c <_Balloc>
 8005496:	4602      	mov	r2, r0
 8005498:	b928      	cbnz	r0, 80054a6 <__mdiff+0x2e>
 800549a:	f240 2132 	movw	r1, #562	; 0x232
 800549e:	4b3c      	ldr	r3, [pc, #240]	; (8005590 <__mdiff+0x118>)
 80054a0:	483c      	ldr	r0, [pc, #240]	; (8005594 <__mdiff+0x11c>)
 80054a2:	f000 f999 	bl	80057d8 <__assert_func>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80054ac:	4610      	mov	r0, r2
 80054ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b2:	bfa4      	itt	ge
 80054b4:	4653      	movge	r3, sl
 80054b6:	46a2      	movge	sl, r4
 80054b8:	4630      	mov	r0, r6
 80054ba:	f8da 1004 	ldr.w	r1, [sl, #4]
 80054be:	bfa6      	itte	ge
 80054c0:	461c      	movge	r4, r3
 80054c2:	2500      	movge	r5, #0
 80054c4:	2501      	movlt	r5, #1
 80054c6:	f7ff fd41 	bl	8004f4c <_Balloc>
 80054ca:	4602      	mov	r2, r0
 80054cc:	b918      	cbnz	r0, 80054d6 <__mdiff+0x5e>
 80054ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 80054d2:	4b2f      	ldr	r3, [pc, #188]	; (8005590 <__mdiff+0x118>)
 80054d4:	e7e4      	b.n	80054a0 <__mdiff+0x28>
 80054d6:	f100 0814 	add.w	r8, r0, #20
 80054da:	f8da 7010 	ldr.w	r7, [sl, #16]
 80054de:	60c5      	str	r5, [r0, #12]
 80054e0:	f04f 0c00 	mov.w	ip, #0
 80054e4:	f10a 0514 	add.w	r5, sl, #20
 80054e8:	f10a 0010 	add.w	r0, sl, #16
 80054ec:	46c2      	mov	sl, r8
 80054ee:	6926      	ldr	r6, [r4, #16]
 80054f0:	f104 0914 	add.w	r9, r4, #20
 80054f4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80054f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80054fc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005500:	f859 3b04 	ldr.w	r3, [r9], #4
 8005504:	fa1f f18b 	uxth.w	r1, fp
 8005508:	4461      	add	r1, ip
 800550a:	fa1f fc83 	uxth.w	ip, r3
 800550e:	0c1b      	lsrs	r3, r3, #16
 8005510:	eba1 010c 	sub.w	r1, r1, ip
 8005514:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005518:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800551c:	b289      	uxth	r1, r1
 800551e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005522:	454e      	cmp	r6, r9
 8005524:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005528:	f84a 3b04 	str.w	r3, [sl], #4
 800552c:	d8e6      	bhi.n	80054fc <__mdiff+0x84>
 800552e:	1b33      	subs	r3, r6, r4
 8005530:	3b15      	subs	r3, #21
 8005532:	f023 0303 	bic.w	r3, r3, #3
 8005536:	3415      	adds	r4, #21
 8005538:	3304      	adds	r3, #4
 800553a:	42a6      	cmp	r6, r4
 800553c:	bf38      	it	cc
 800553e:	2304      	movcc	r3, #4
 8005540:	441d      	add	r5, r3
 8005542:	4443      	add	r3, r8
 8005544:	461e      	mov	r6, r3
 8005546:	462c      	mov	r4, r5
 8005548:	4574      	cmp	r4, lr
 800554a:	d30e      	bcc.n	800556a <__mdiff+0xf2>
 800554c:	f10e 0103 	add.w	r1, lr, #3
 8005550:	1b49      	subs	r1, r1, r5
 8005552:	f021 0103 	bic.w	r1, r1, #3
 8005556:	3d03      	subs	r5, #3
 8005558:	45ae      	cmp	lr, r5
 800555a:	bf38      	it	cc
 800555c:	2100      	movcc	r1, #0
 800555e:	4419      	add	r1, r3
 8005560:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005564:	b18b      	cbz	r3, 800558a <__mdiff+0x112>
 8005566:	6117      	str	r7, [r2, #16]
 8005568:	e7a0      	b.n	80054ac <__mdiff+0x34>
 800556a:	f854 8b04 	ldr.w	r8, [r4], #4
 800556e:	fa1f f188 	uxth.w	r1, r8
 8005572:	4461      	add	r1, ip
 8005574:	1408      	asrs	r0, r1, #16
 8005576:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800557a:	b289      	uxth	r1, r1
 800557c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005580:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005584:	f846 1b04 	str.w	r1, [r6], #4
 8005588:	e7de      	b.n	8005548 <__mdiff+0xd0>
 800558a:	3f01      	subs	r7, #1
 800558c:	e7e8      	b.n	8005560 <__mdiff+0xe8>
 800558e:	bf00      	nop
 8005590:	080063eb 	.word	0x080063eb
 8005594:	080063fc 	.word	0x080063fc

08005598 <__d2b>:
 8005598:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800559c:	2101      	movs	r1, #1
 800559e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80055a2:	4690      	mov	r8, r2
 80055a4:	461d      	mov	r5, r3
 80055a6:	f7ff fcd1 	bl	8004f4c <_Balloc>
 80055aa:	4604      	mov	r4, r0
 80055ac:	b930      	cbnz	r0, 80055bc <__d2b+0x24>
 80055ae:	4602      	mov	r2, r0
 80055b0:	f240 310a 	movw	r1, #778	; 0x30a
 80055b4:	4b24      	ldr	r3, [pc, #144]	; (8005648 <__d2b+0xb0>)
 80055b6:	4825      	ldr	r0, [pc, #148]	; (800564c <__d2b+0xb4>)
 80055b8:	f000 f90e 	bl	80057d8 <__assert_func>
 80055bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80055c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80055c4:	bb2d      	cbnz	r5, 8005612 <__d2b+0x7a>
 80055c6:	9301      	str	r3, [sp, #4]
 80055c8:	f1b8 0300 	subs.w	r3, r8, #0
 80055cc:	d026      	beq.n	800561c <__d2b+0x84>
 80055ce:	4668      	mov	r0, sp
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	f7ff fd87 	bl	80050e4 <__lo0bits>
 80055d6:	9900      	ldr	r1, [sp, #0]
 80055d8:	b1f0      	cbz	r0, 8005618 <__d2b+0x80>
 80055da:	9a01      	ldr	r2, [sp, #4]
 80055dc:	f1c0 0320 	rsb	r3, r0, #32
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	430b      	orrs	r3, r1
 80055e6:	40c2      	lsrs	r2, r0
 80055e8:	6163      	str	r3, [r4, #20]
 80055ea:	9201      	str	r2, [sp, #4]
 80055ec:	9b01      	ldr	r3, [sp, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bf14      	ite	ne
 80055f2:	2102      	movne	r1, #2
 80055f4:	2101      	moveq	r1, #1
 80055f6:	61a3      	str	r3, [r4, #24]
 80055f8:	6121      	str	r1, [r4, #16]
 80055fa:	b1c5      	cbz	r5, 800562e <__d2b+0x96>
 80055fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005600:	4405      	add	r5, r0
 8005602:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005606:	603d      	str	r5, [r7, #0]
 8005608:	6030      	str	r0, [r6, #0]
 800560a:	4620      	mov	r0, r4
 800560c:	b002      	add	sp, #8
 800560e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005616:	e7d6      	b.n	80055c6 <__d2b+0x2e>
 8005618:	6161      	str	r1, [r4, #20]
 800561a:	e7e7      	b.n	80055ec <__d2b+0x54>
 800561c:	a801      	add	r0, sp, #4
 800561e:	f7ff fd61 	bl	80050e4 <__lo0bits>
 8005622:	2101      	movs	r1, #1
 8005624:	9b01      	ldr	r3, [sp, #4]
 8005626:	6121      	str	r1, [r4, #16]
 8005628:	6163      	str	r3, [r4, #20]
 800562a:	3020      	adds	r0, #32
 800562c:	e7e5      	b.n	80055fa <__d2b+0x62>
 800562e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005632:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005636:	6038      	str	r0, [r7, #0]
 8005638:	6918      	ldr	r0, [r3, #16]
 800563a:	f7ff fd33 	bl	80050a4 <__hi0bits>
 800563e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005642:	6031      	str	r1, [r6, #0]
 8005644:	e7e1      	b.n	800560a <__d2b+0x72>
 8005646:	bf00      	nop
 8005648:	080063eb 	.word	0x080063eb
 800564c:	080063fc 	.word	0x080063fc

08005650 <_calloc_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	fb02 f501 	mul.w	r5, r2, r1
 8005656:	4629      	mov	r1, r5
 8005658:	f000 f854 	bl	8005704 <_malloc_r>
 800565c:	4604      	mov	r4, r0
 800565e:	b118      	cbz	r0, 8005668 <_calloc_r+0x18>
 8005660:	462a      	mov	r2, r5
 8005662:	2100      	movs	r1, #0
 8005664:	f7fe f964 	bl	8003930 <memset>
 8005668:	4620      	mov	r0, r4
 800566a:	bd38      	pop	{r3, r4, r5, pc}

0800566c <_free_r>:
 800566c:	b538      	push	{r3, r4, r5, lr}
 800566e:	4605      	mov	r5, r0
 8005670:	2900      	cmp	r1, #0
 8005672:	d043      	beq.n	80056fc <_free_r+0x90>
 8005674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005678:	1f0c      	subs	r4, r1, #4
 800567a:	2b00      	cmp	r3, #0
 800567c:	bfb8      	it	lt
 800567e:	18e4      	addlt	r4, r4, r3
 8005680:	f000 f8ec 	bl	800585c <__malloc_lock>
 8005684:	4a1e      	ldr	r2, [pc, #120]	; (8005700 <_free_r+0x94>)
 8005686:	6813      	ldr	r3, [r2, #0]
 8005688:	4610      	mov	r0, r2
 800568a:	b933      	cbnz	r3, 800569a <_free_r+0x2e>
 800568c:	6063      	str	r3, [r4, #4]
 800568e:	6014      	str	r4, [r2, #0]
 8005690:	4628      	mov	r0, r5
 8005692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005696:	f000 b8e7 	b.w	8005868 <__malloc_unlock>
 800569a:	42a3      	cmp	r3, r4
 800569c:	d90a      	bls.n	80056b4 <_free_r+0x48>
 800569e:	6821      	ldr	r1, [r4, #0]
 80056a0:	1862      	adds	r2, r4, r1
 80056a2:	4293      	cmp	r3, r2
 80056a4:	bf01      	itttt	eq
 80056a6:	681a      	ldreq	r2, [r3, #0]
 80056a8:	685b      	ldreq	r3, [r3, #4]
 80056aa:	1852      	addeq	r2, r2, r1
 80056ac:	6022      	streq	r2, [r4, #0]
 80056ae:	6063      	str	r3, [r4, #4]
 80056b0:	6004      	str	r4, [r0, #0]
 80056b2:	e7ed      	b.n	8005690 <_free_r+0x24>
 80056b4:	461a      	mov	r2, r3
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	b10b      	cbz	r3, 80056be <_free_r+0x52>
 80056ba:	42a3      	cmp	r3, r4
 80056bc:	d9fa      	bls.n	80056b4 <_free_r+0x48>
 80056be:	6811      	ldr	r1, [r2, #0]
 80056c0:	1850      	adds	r0, r2, r1
 80056c2:	42a0      	cmp	r0, r4
 80056c4:	d10b      	bne.n	80056de <_free_r+0x72>
 80056c6:	6820      	ldr	r0, [r4, #0]
 80056c8:	4401      	add	r1, r0
 80056ca:	1850      	adds	r0, r2, r1
 80056cc:	4283      	cmp	r3, r0
 80056ce:	6011      	str	r1, [r2, #0]
 80056d0:	d1de      	bne.n	8005690 <_free_r+0x24>
 80056d2:	6818      	ldr	r0, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	4401      	add	r1, r0
 80056d8:	6011      	str	r1, [r2, #0]
 80056da:	6053      	str	r3, [r2, #4]
 80056dc:	e7d8      	b.n	8005690 <_free_r+0x24>
 80056de:	d902      	bls.n	80056e6 <_free_r+0x7a>
 80056e0:	230c      	movs	r3, #12
 80056e2:	602b      	str	r3, [r5, #0]
 80056e4:	e7d4      	b.n	8005690 <_free_r+0x24>
 80056e6:	6820      	ldr	r0, [r4, #0]
 80056e8:	1821      	adds	r1, r4, r0
 80056ea:	428b      	cmp	r3, r1
 80056ec:	bf01      	itttt	eq
 80056ee:	6819      	ldreq	r1, [r3, #0]
 80056f0:	685b      	ldreq	r3, [r3, #4]
 80056f2:	1809      	addeq	r1, r1, r0
 80056f4:	6021      	streq	r1, [r4, #0]
 80056f6:	6063      	str	r3, [r4, #4]
 80056f8:	6054      	str	r4, [r2, #4]
 80056fa:	e7c9      	b.n	8005690 <_free_r+0x24>
 80056fc:	bd38      	pop	{r3, r4, r5, pc}
 80056fe:	bf00      	nop
 8005700:	200001fc 	.word	0x200001fc

08005704 <_malloc_r>:
 8005704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005706:	1ccd      	adds	r5, r1, #3
 8005708:	f025 0503 	bic.w	r5, r5, #3
 800570c:	3508      	adds	r5, #8
 800570e:	2d0c      	cmp	r5, #12
 8005710:	bf38      	it	cc
 8005712:	250c      	movcc	r5, #12
 8005714:	2d00      	cmp	r5, #0
 8005716:	4606      	mov	r6, r0
 8005718:	db01      	blt.n	800571e <_malloc_r+0x1a>
 800571a:	42a9      	cmp	r1, r5
 800571c:	d903      	bls.n	8005726 <_malloc_r+0x22>
 800571e:	230c      	movs	r3, #12
 8005720:	6033      	str	r3, [r6, #0]
 8005722:	2000      	movs	r0, #0
 8005724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005726:	f000 f899 	bl	800585c <__malloc_lock>
 800572a:	4921      	ldr	r1, [pc, #132]	; (80057b0 <_malloc_r+0xac>)
 800572c:	680a      	ldr	r2, [r1, #0]
 800572e:	4614      	mov	r4, r2
 8005730:	b99c      	cbnz	r4, 800575a <_malloc_r+0x56>
 8005732:	4f20      	ldr	r7, [pc, #128]	; (80057b4 <_malloc_r+0xb0>)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	b923      	cbnz	r3, 8005742 <_malloc_r+0x3e>
 8005738:	4621      	mov	r1, r4
 800573a:	4630      	mov	r0, r6
 800573c:	f000 f83c 	bl	80057b8 <_sbrk_r>
 8005740:	6038      	str	r0, [r7, #0]
 8005742:	4629      	mov	r1, r5
 8005744:	4630      	mov	r0, r6
 8005746:	f000 f837 	bl	80057b8 <_sbrk_r>
 800574a:	1c43      	adds	r3, r0, #1
 800574c:	d123      	bne.n	8005796 <_malloc_r+0x92>
 800574e:	230c      	movs	r3, #12
 8005750:	4630      	mov	r0, r6
 8005752:	6033      	str	r3, [r6, #0]
 8005754:	f000 f888 	bl	8005868 <__malloc_unlock>
 8005758:	e7e3      	b.n	8005722 <_malloc_r+0x1e>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	1b5b      	subs	r3, r3, r5
 800575e:	d417      	bmi.n	8005790 <_malloc_r+0x8c>
 8005760:	2b0b      	cmp	r3, #11
 8005762:	d903      	bls.n	800576c <_malloc_r+0x68>
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	441c      	add	r4, r3
 8005768:	6025      	str	r5, [r4, #0]
 800576a:	e004      	b.n	8005776 <_malloc_r+0x72>
 800576c:	6863      	ldr	r3, [r4, #4]
 800576e:	42a2      	cmp	r2, r4
 8005770:	bf0c      	ite	eq
 8005772:	600b      	streq	r3, [r1, #0]
 8005774:	6053      	strne	r3, [r2, #4]
 8005776:	4630      	mov	r0, r6
 8005778:	f000 f876 	bl	8005868 <__malloc_unlock>
 800577c:	f104 000b 	add.w	r0, r4, #11
 8005780:	1d23      	adds	r3, r4, #4
 8005782:	f020 0007 	bic.w	r0, r0, #7
 8005786:	1ac2      	subs	r2, r0, r3
 8005788:	d0cc      	beq.n	8005724 <_malloc_r+0x20>
 800578a:	1a1b      	subs	r3, r3, r0
 800578c:	50a3      	str	r3, [r4, r2]
 800578e:	e7c9      	b.n	8005724 <_malloc_r+0x20>
 8005790:	4622      	mov	r2, r4
 8005792:	6864      	ldr	r4, [r4, #4]
 8005794:	e7cc      	b.n	8005730 <_malloc_r+0x2c>
 8005796:	1cc4      	adds	r4, r0, #3
 8005798:	f024 0403 	bic.w	r4, r4, #3
 800579c:	42a0      	cmp	r0, r4
 800579e:	d0e3      	beq.n	8005768 <_malloc_r+0x64>
 80057a0:	1a21      	subs	r1, r4, r0
 80057a2:	4630      	mov	r0, r6
 80057a4:	f000 f808 	bl	80057b8 <_sbrk_r>
 80057a8:	3001      	adds	r0, #1
 80057aa:	d1dd      	bne.n	8005768 <_malloc_r+0x64>
 80057ac:	e7cf      	b.n	800574e <_malloc_r+0x4a>
 80057ae:	bf00      	nop
 80057b0:	200001fc 	.word	0x200001fc
 80057b4:	20000200 	.word	0x20000200

080057b8 <_sbrk_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	2300      	movs	r3, #0
 80057bc:	4d05      	ldr	r5, [pc, #20]	; (80057d4 <_sbrk_r+0x1c>)
 80057be:	4604      	mov	r4, r0
 80057c0:	4608      	mov	r0, r1
 80057c2:	602b      	str	r3, [r5, #0]
 80057c4:	f7fb ff8e 	bl	80016e4 <_sbrk>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	d102      	bne.n	80057d2 <_sbrk_r+0x1a>
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	b103      	cbz	r3, 80057d2 <_sbrk_r+0x1a>
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	bd38      	pop	{r3, r4, r5, pc}
 80057d4:	200002d8 	.word	0x200002d8

080057d8 <__assert_func>:
 80057d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057da:	4614      	mov	r4, r2
 80057dc:	461a      	mov	r2, r3
 80057de:	4b09      	ldr	r3, [pc, #36]	; (8005804 <__assert_func+0x2c>)
 80057e0:	4605      	mov	r5, r0
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68d8      	ldr	r0, [r3, #12]
 80057e6:	b14c      	cbz	r4, 80057fc <__assert_func+0x24>
 80057e8:	4b07      	ldr	r3, [pc, #28]	; (8005808 <__assert_func+0x30>)
 80057ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057ee:	9100      	str	r1, [sp, #0]
 80057f0:	462b      	mov	r3, r5
 80057f2:	4906      	ldr	r1, [pc, #24]	; (800580c <__assert_func+0x34>)
 80057f4:	f000 f80e 	bl	8005814 <fiprintf>
 80057f8:	f000 fa62 	bl	8005cc0 <abort>
 80057fc:	4b04      	ldr	r3, [pc, #16]	; (8005810 <__assert_func+0x38>)
 80057fe:	461c      	mov	r4, r3
 8005800:	e7f3      	b.n	80057ea <__assert_func+0x12>
 8005802:	bf00      	nop
 8005804:	2000000c 	.word	0x2000000c
 8005808:	0800655c 	.word	0x0800655c
 800580c:	08006569 	.word	0x08006569
 8005810:	08006597 	.word	0x08006597

08005814 <fiprintf>:
 8005814:	b40e      	push	{r1, r2, r3}
 8005816:	b503      	push	{r0, r1, lr}
 8005818:	4601      	mov	r1, r0
 800581a:	ab03      	add	r3, sp, #12
 800581c:	4805      	ldr	r0, [pc, #20]	; (8005834 <fiprintf+0x20>)
 800581e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005822:	6800      	ldr	r0, [r0, #0]
 8005824:	9301      	str	r3, [sp, #4]
 8005826:	f000 f84d 	bl	80058c4 <_vfiprintf_r>
 800582a:	b002      	add	sp, #8
 800582c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005830:	b003      	add	sp, #12
 8005832:	4770      	bx	lr
 8005834:	2000000c 	.word	0x2000000c

08005838 <__ascii_mbtowc>:
 8005838:	b082      	sub	sp, #8
 800583a:	b901      	cbnz	r1, 800583e <__ascii_mbtowc+0x6>
 800583c:	a901      	add	r1, sp, #4
 800583e:	b142      	cbz	r2, 8005852 <__ascii_mbtowc+0x1a>
 8005840:	b14b      	cbz	r3, 8005856 <__ascii_mbtowc+0x1e>
 8005842:	7813      	ldrb	r3, [r2, #0]
 8005844:	600b      	str	r3, [r1, #0]
 8005846:	7812      	ldrb	r2, [r2, #0]
 8005848:	1e10      	subs	r0, r2, #0
 800584a:	bf18      	it	ne
 800584c:	2001      	movne	r0, #1
 800584e:	b002      	add	sp, #8
 8005850:	4770      	bx	lr
 8005852:	4610      	mov	r0, r2
 8005854:	e7fb      	b.n	800584e <__ascii_mbtowc+0x16>
 8005856:	f06f 0001 	mvn.w	r0, #1
 800585a:	e7f8      	b.n	800584e <__ascii_mbtowc+0x16>

0800585c <__malloc_lock>:
 800585c:	4801      	ldr	r0, [pc, #4]	; (8005864 <__malloc_lock+0x8>)
 800585e:	f000 bbef 	b.w	8006040 <__retarget_lock_acquire_recursive>
 8005862:	bf00      	nop
 8005864:	200002e0 	.word	0x200002e0

08005868 <__malloc_unlock>:
 8005868:	4801      	ldr	r0, [pc, #4]	; (8005870 <__malloc_unlock+0x8>)
 800586a:	f000 bbea 	b.w	8006042 <__retarget_lock_release_recursive>
 800586e:	bf00      	nop
 8005870:	200002e0 	.word	0x200002e0

08005874 <__sfputc_r>:
 8005874:	6893      	ldr	r3, [r2, #8]
 8005876:	b410      	push	{r4}
 8005878:	3b01      	subs	r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	6093      	str	r3, [r2, #8]
 800587e:	da07      	bge.n	8005890 <__sfputc_r+0x1c>
 8005880:	6994      	ldr	r4, [r2, #24]
 8005882:	42a3      	cmp	r3, r4
 8005884:	db01      	blt.n	800588a <__sfputc_r+0x16>
 8005886:	290a      	cmp	r1, #10
 8005888:	d102      	bne.n	8005890 <__sfputc_r+0x1c>
 800588a:	bc10      	pop	{r4}
 800588c:	f000 b94a 	b.w	8005b24 <__swbuf_r>
 8005890:	6813      	ldr	r3, [r2, #0]
 8005892:	1c58      	adds	r0, r3, #1
 8005894:	6010      	str	r0, [r2, #0]
 8005896:	7019      	strb	r1, [r3, #0]
 8005898:	4608      	mov	r0, r1
 800589a:	bc10      	pop	{r4}
 800589c:	4770      	bx	lr

0800589e <__sfputs_r>:
 800589e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a0:	4606      	mov	r6, r0
 80058a2:	460f      	mov	r7, r1
 80058a4:	4614      	mov	r4, r2
 80058a6:	18d5      	adds	r5, r2, r3
 80058a8:	42ac      	cmp	r4, r5
 80058aa:	d101      	bne.n	80058b0 <__sfputs_r+0x12>
 80058ac:	2000      	movs	r0, #0
 80058ae:	e007      	b.n	80058c0 <__sfputs_r+0x22>
 80058b0:	463a      	mov	r2, r7
 80058b2:	4630      	mov	r0, r6
 80058b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b8:	f7ff ffdc 	bl	8005874 <__sfputc_r>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d1f3      	bne.n	80058a8 <__sfputs_r+0xa>
 80058c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058c4 <_vfiprintf_r>:
 80058c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c8:	460d      	mov	r5, r1
 80058ca:	4614      	mov	r4, r2
 80058cc:	4698      	mov	r8, r3
 80058ce:	4606      	mov	r6, r0
 80058d0:	b09d      	sub	sp, #116	; 0x74
 80058d2:	b118      	cbz	r0, 80058dc <_vfiprintf_r+0x18>
 80058d4:	6983      	ldr	r3, [r0, #24]
 80058d6:	b90b      	cbnz	r3, 80058dc <_vfiprintf_r+0x18>
 80058d8:	f000 fb14 	bl	8005f04 <__sinit>
 80058dc:	4b89      	ldr	r3, [pc, #548]	; (8005b04 <_vfiprintf_r+0x240>)
 80058de:	429d      	cmp	r5, r3
 80058e0:	d11b      	bne.n	800591a <_vfiprintf_r+0x56>
 80058e2:	6875      	ldr	r5, [r6, #4]
 80058e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058e6:	07d9      	lsls	r1, r3, #31
 80058e8:	d405      	bmi.n	80058f6 <_vfiprintf_r+0x32>
 80058ea:	89ab      	ldrh	r3, [r5, #12]
 80058ec:	059a      	lsls	r2, r3, #22
 80058ee:	d402      	bmi.n	80058f6 <_vfiprintf_r+0x32>
 80058f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058f2:	f000 fba5 	bl	8006040 <__retarget_lock_acquire_recursive>
 80058f6:	89ab      	ldrh	r3, [r5, #12]
 80058f8:	071b      	lsls	r3, r3, #28
 80058fa:	d501      	bpl.n	8005900 <_vfiprintf_r+0x3c>
 80058fc:	692b      	ldr	r3, [r5, #16]
 80058fe:	b9eb      	cbnz	r3, 800593c <_vfiprintf_r+0x78>
 8005900:	4629      	mov	r1, r5
 8005902:	4630      	mov	r0, r6
 8005904:	f000 f96e 	bl	8005be4 <__swsetup_r>
 8005908:	b1c0      	cbz	r0, 800593c <_vfiprintf_r+0x78>
 800590a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800590c:	07dc      	lsls	r4, r3, #31
 800590e:	d50e      	bpl.n	800592e <_vfiprintf_r+0x6a>
 8005910:	f04f 30ff 	mov.w	r0, #4294967295
 8005914:	b01d      	add	sp, #116	; 0x74
 8005916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800591a:	4b7b      	ldr	r3, [pc, #492]	; (8005b08 <_vfiprintf_r+0x244>)
 800591c:	429d      	cmp	r5, r3
 800591e:	d101      	bne.n	8005924 <_vfiprintf_r+0x60>
 8005920:	68b5      	ldr	r5, [r6, #8]
 8005922:	e7df      	b.n	80058e4 <_vfiprintf_r+0x20>
 8005924:	4b79      	ldr	r3, [pc, #484]	; (8005b0c <_vfiprintf_r+0x248>)
 8005926:	429d      	cmp	r5, r3
 8005928:	bf08      	it	eq
 800592a:	68f5      	ldreq	r5, [r6, #12]
 800592c:	e7da      	b.n	80058e4 <_vfiprintf_r+0x20>
 800592e:	89ab      	ldrh	r3, [r5, #12]
 8005930:	0598      	lsls	r0, r3, #22
 8005932:	d4ed      	bmi.n	8005910 <_vfiprintf_r+0x4c>
 8005934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005936:	f000 fb84 	bl	8006042 <__retarget_lock_release_recursive>
 800593a:	e7e9      	b.n	8005910 <_vfiprintf_r+0x4c>
 800593c:	2300      	movs	r3, #0
 800593e:	9309      	str	r3, [sp, #36]	; 0x24
 8005940:	2320      	movs	r3, #32
 8005942:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005946:	2330      	movs	r3, #48	; 0x30
 8005948:	f04f 0901 	mov.w	r9, #1
 800594c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005950:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005b10 <_vfiprintf_r+0x24c>
 8005954:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005958:	4623      	mov	r3, r4
 800595a:	469a      	mov	sl, r3
 800595c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005960:	b10a      	cbz	r2, 8005966 <_vfiprintf_r+0xa2>
 8005962:	2a25      	cmp	r2, #37	; 0x25
 8005964:	d1f9      	bne.n	800595a <_vfiprintf_r+0x96>
 8005966:	ebba 0b04 	subs.w	fp, sl, r4
 800596a:	d00b      	beq.n	8005984 <_vfiprintf_r+0xc0>
 800596c:	465b      	mov	r3, fp
 800596e:	4622      	mov	r2, r4
 8005970:	4629      	mov	r1, r5
 8005972:	4630      	mov	r0, r6
 8005974:	f7ff ff93 	bl	800589e <__sfputs_r>
 8005978:	3001      	adds	r0, #1
 800597a:	f000 80aa 	beq.w	8005ad2 <_vfiprintf_r+0x20e>
 800597e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005980:	445a      	add	r2, fp
 8005982:	9209      	str	r2, [sp, #36]	; 0x24
 8005984:	f89a 3000 	ldrb.w	r3, [sl]
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 80a2 	beq.w	8005ad2 <_vfiprintf_r+0x20e>
 800598e:	2300      	movs	r3, #0
 8005990:	f04f 32ff 	mov.w	r2, #4294967295
 8005994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005998:	f10a 0a01 	add.w	sl, sl, #1
 800599c:	9304      	str	r3, [sp, #16]
 800599e:	9307      	str	r3, [sp, #28]
 80059a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059a4:	931a      	str	r3, [sp, #104]	; 0x68
 80059a6:	4654      	mov	r4, sl
 80059a8:	2205      	movs	r2, #5
 80059aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ae:	4858      	ldr	r0, [pc, #352]	; (8005b10 <_vfiprintf_r+0x24c>)
 80059b0:	f7ff fab0 	bl	8004f14 <memchr>
 80059b4:	9a04      	ldr	r2, [sp, #16]
 80059b6:	b9d8      	cbnz	r0, 80059f0 <_vfiprintf_r+0x12c>
 80059b8:	06d1      	lsls	r1, r2, #27
 80059ba:	bf44      	itt	mi
 80059bc:	2320      	movmi	r3, #32
 80059be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059c2:	0713      	lsls	r3, r2, #28
 80059c4:	bf44      	itt	mi
 80059c6:	232b      	movmi	r3, #43	; 0x2b
 80059c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059cc:	f89a 3000 	ldrb.w	r3, [sl]
 80059d0:	2b2a      	cmp	r3, #42	; 0x2a
 80059d2:	d015      	beq.n	8005a00 <_vfiprintf_r+0x13c>
 80059d4:	4654      	mov	r4, sl
 80059d6:	2000      	movs	r0, #0
 80059d8:	f04f 0c0a 	mov.w	ip, #10
 80059dc:	9a07      	ldr	r2, [sp, #28]
 80059de:	4621      	mov	r1, r4
 80059e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059e4:	3b30      	subs	r3, #48	; 0x30
 80059e6:	2b09      	cmp	r3, #9
 80059e8:	d94e      	bls.n	8005a88 <_vfiprintf_r+0x1c4>
 80059ea:	b1b0      	cbz	r0, 8005a1a <_vfiprintf_r+0x156>
 80059ec:	9207      	str	r2, [sp, #28]
 80059ee:	e014      	b.n	8005a1a <_vfiprintf_r+0x156>
 80059f0:	eba0 0308 	sub.w	r3, r0, r8
 80059f4:	fa09 f303 	lsl.w	r3, r9, r3
 80059f8:	4313      	orrs	r3, r2
 80059fa:	46a2      	mov	sl, r4
 80059fc:	9304      	str	r3, [sp, #16]
 80059fe:	e7d2      	b.n	80059a6 <_vfiprintf_r+0xe2>
 8005a00:	9b03      	ldr	r3, [sp, #12]
 8005a02:	1d19      	adds	r1, r3, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	9103      	str	r1, [sp, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bfbb      	ittet	lt
 8005a0c:	425b      	neglt	r3, r3
 8005a0e:	f042 0202 	orrlt.w	r2, r2, #2
 8005a12:	9307      	strge	r3, [sp, #28]
 8005a14:	9307      	strlt	r3, [sp, #28]
 8005a16:	bfb8      	it	lt
 8005a18:	9204      	strlt	r2, [sp, #16]
 8005a1a:	7823      	ldrb	r3, [r4, #0]
 8005a1c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a1e:	d10c      	bne.n	8005a3a <_vfiprintf_r+0x176>
 8005a20:	7863      	ldrb	r3, [r4, #1]
 8005a22:	2b2a      	cmp	r3, #42	; 0x2a
 8005a24:	d135      	bne.n	8005a92 <_vfiprintf_r+0x1ce>
 8005a26:	9b03      	ldr	r3, [sp, #12]
 8005a28:	3402      	adds	r4, #2
 8005a2a:	1d1a      	adds	r2, r3, #4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	9203      	str	r2, [sp, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bfb8      	it	lt
 8005a34:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a38:	9305      	str	r3, [sp, #20]
 8005a3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b20 <_vfiprintf_r+0x25c>
 8005a3e:	2203      	movs	r2, #3
 8005a40:	4650      	mov	r0, sl
 8005a42:	7821      	ldrb	r1, [r4, #0]
 8005a44:	f7ff fa66 	bl	8004f14 <memchr>
 8005a48:	b140      	cbz	r0, 8005a5c <_vfiprintf_r+0x198>
 8005a4a:	2340      	movs	r3, #64	; 0x40
 8005a4c:	eba0 000a 	sub.w	r0, r0, sl
 8005a50:	fa03 f000 	lsl.w	r0, r3, r0
 8005a54:	9b04      	ldr	r3, [sp, #16]
 8005a56:	3401      	adds	r4, #1
 8005a58:	4303      	orrs	r3, r0
 8005a5a:	9304      	str	r3, [sp, #16]
 8005a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a60:	2206      	movs	r2, #6
 8005a62:	482c      	ldr	r0, [pc, #176]	; (8005b14 <_vfiprintf_r+0x250>)
 8005a64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a68:	f7ff fa54 	bl	8004f14 <memchr>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d03f      	beq.n	8005af0 <_vfiprintf_r+0x22c>
 8005a70:	4b29      	ldr	r3, [pc, #164]	; (8005b18 <_vfiprintf_r+0x254>)
 8005a72:	bb1b      	cbnz	r3, 8005abc <_vfiprintf_r+0x1f8>
 8005a74:	9b03      	ldr	r3, [sp, #12]
 8005a76:	3307      	adds	r3, #7
 8005a78:	f023 0307 	bic.w	r3, r3, #7
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	9303      	str	r3, [sp, #12]
 8005a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a82:	443b      	add	r3, r7
 8005a84:	9309      	str	r3, [sp, #36]	; 0x24
 8005a86:	e767      	b.n	8005958 <_vfiprintf_r+0x94>
 8005a88:	460c      	mov	r4, r1
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a90:	e7a5      	b.n	80059de <_vfiprintf_r+0x11a>
 8005a92:	2300      	movs	r3, #0
 8005a94:	f04f 0c0a 	mov.w	ip, #10
 8005a98:	4619      	mov	r1, r3
 8005a9a:	3401      	adds	r4, #1
 8005a9c:	9305      	str	r3, [sp, #20]
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aa4:	3a30      	subs	r2, #48	; 0x30
 8005aa6:	2a09      	cmp	r2, #9
 8005aa8:	d903      	bls.n	8005ab2 <_vfiprintf_r+0x1ee>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0c5      	beq.n	8005a3a <_vfiprintf_r+0x176>
 8005aae:	9105      	str	r1, [sp, #20]
 8005ab0:	e7c3      	b.n	8005a3a <_vfiprintf_r+0x176>
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aba:	e7f0      	b.n	8005a9e <_vfiprintf_r+0x1da>
 8005abc:	ab03      	add	r3, sp, #12
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	462a      	mov	r2, r5
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <_vfiprintf_r+0x258>)
 8005ac6:	a904      	add	r1, sp, #16
 8005ac8:	f7fd ffd8 	bl	8003a7c <_printf_float>
 8005acc:	4607      	mov	r7, r0
 8005ace:	1c78      	adds	r0, r7, #1
 8005ad0:	d1d6      	bne.n	8005a80 <_vfiprintf_r+0x1bc>
 8005ad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ad4:	07d9      	lsls	r1, r3, #31
 8005ad6:	d405      	bmi.n	8005ae4 <_vfiprintf_r+0x220>
 8005ad8:	89ab      	ldrh	r3, [r5, #12]
 8005ada:	059a      	lsls	r2, r3, #22
 8005adc:	d402      	bmi.n	8005ae4 <_vfiprintf_r+0x220>
 8005ade:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ae0:	f000 faaf 	bl	8006042 <__retarget_lock_release_recursive>
 8005ae4:	89ab      	ldrh	r3, [r5, #12]
 8005ae6:	065b      	lsls	r3, r3, #25
 8005ae8:	f53f af12 	bmi.w	8005910 <_vfiprintf_r+0x4c>
 8005aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005aee:	e711      	b.n	8005914 <_vfiprintf_r+0x50>
 8005af0:	ab03      	add	r3, sp, #12
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	462a      	mov	r2, r5
 8005af6:	4630      	mov	r0, r6
 8005af8:	4b08      	ldr	r3, [pc, #32]	; (8005b1c <_vfiprintf_r+0x258>)
 8005afa:	a904      	add	r1, sp, #16
 8005afc:	f7fe fa5a 	bl	8003fb4 <_printf_i>
 8005b00:	e7e4      	b.n	8005acc <_vfiprintf_r+0x208>
 8005b02:	bf00      	nop
 8005b04:	080066d4 	.word	0x080066d4
 8005b08:	080066f4 	.word	0x080066f4
 8005b0c:	080066b4 	.word	0x080066b4
 8005b10:	080065a2 	.word	0x080065a2
 8005b14:	080065ac 	.word	0x080065ac
 8005b18:	08003a7d 	.word	0x08003a7d
 8005b1c:	0800589f 	.word	0x0800589f
 8005b20:	080065a8 	.word	0x080065a8

08005b24 <__swbuf_r>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	460e      	mov	r6, r1
 8005b28:	4614      	mov	r4, r2
 8005b2a:	4605      	mov	r5, r0
 8005b2c:	b118      	cbz	r0, 8005b36 <__swbuf_r+0x12>
 8005b2e:	6983      	ldr	r3, [r0, #24]
 8005b30:	b90b      	cbnz	r3, 8005b36 <__swbuf_r+0x12>
 8005b32:	f000 f9e7 	bl	8005f04 <__sinit>
 8005b36:	4b21      	ldr	r3, [pc, #132]	; (8005bbc <__swbuf_r+0x98>)
 8005b38:	429c      	cmp	r4, r3
 8005b3a:	d12b      	bne.n	8005b94 <__swbuf_r+0x70>
 8005b3c:	686c      	ldr	r4, [r5, #4]
 8005b3e:	69a3      	ldr	r3, [r4, #24]
 8005b40:	60a3      	str	r3, [r4, #8]
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	071a      	lsls	r2, r3, #28
 8005b46:	d52f      	bpl.n	8005ba8 <__swbuf_r+0x84>
 8005b48:	6923      	ldr	r3, [r4, #16]
 8005b4a:	b36b      	cbz	r3, 8005ba8 <__swbuf_r+0x84>
 8005b4c:	6923      	ldr	r3, [r4, #16]
 8005b4e:	6820      	ldr	r0, [r4, #0]
 8005b50:	b2f6      	uxtb	r6, r6
 8005b52:	1ac0      	subs	r0, r0, r3
 8005b54:	6963      	ldr	r3, [r4, #20]
 8005b56:	4637      	mov	r7, r6
 8005b58:	4283      	cmp	r3, r0
 8005b5a:	dc04      	bgt.n	8005b66 <__swbuf_r+0x42>
 8005b5c:	4621      	mov	r1, r4
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f000 f93c 	bl	8005ddc <_fflush_r>
 8005b64:	bb30      	cbnz	r0, 8005bb4 <__swbuf_r+0x90>
 8005b66:	68a3      	ldr	r3, [r4, #8]
 8005b68:	3001      	adds	r0, #1
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	60a3      	str	r3, [r4, #8]
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	6022      	str	r2, [r4, #0]
 8005b74:	701e      	strb	r6, [r3, #0]
 8005b76:	6963      	ldr	r3, [r4, #20]
 8005b78:	4283      	cmp	r3, r0
 8005b7a:	d004      	beq.n	8005b86 <__swbuf_r+0x62>
 8005b7c:	89a3      	ldrh	r3, [r4, #12]
 8005b7e:	07db      	lsls	r3, r3, #31
 8005b80:	d506      	bpl.n	8005b90 <__swbuf_r+0x6c>
 8005b82:	2e0a      	cmp	r6, #10
 8005b84:	d104      	bne.n	8005b90 <__swbuf_r+0x6c>
 8005b86:	4621      	mov	r1, r4
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f000 f927 	bl	8005ddc <_fflush_r>
 8005b8e:	b988      	cbnz	r0, 8005bb4 <__swbuf_r+0x90>
 8005b90:	4638      	mov	r0, r7
 8005b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b94:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <__swbuf_r+0x9c>)
 8005b96:	429c      	cmp	r4, r3
 8005b98:	d101      	bne.n	8005b9e <__swbuf_r+0x7a>
 8005b9a:	68ac      	ldr	r4, [r5, #8]
 8005b9c:	e7cf      	b.n	8005b3e <__swbuf_r+0x1a>
 8005b9e:	4b09      	ldr	r3, [pc, #36]	; (8005bc4 <__swbuf_r+0xa0>)
 8005ba0:	429c      	cmp	r4, r3
 8005ba2:	bf08      	it	eq
 8005ba4:	68ec      	ldreq	r4, [r5, #12]
 8005ba6:	e7ca      	b.n	8005b3e <__swbuf_r+0x1a>
 8005ba8:	4621      	mov	r1, r4
 8005baa:	4628      	mov	r0, r5
 8005bac:	f000 f81a 	bl	8005be4 <__swsetup_r>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	d0cb      	beq.n	8005b4c <__swbuf_r+0x28>
 8005bb4:	f04f 37ff 	mov.w	r7, #4294967295
 8005bb8:	e7ea      	b.n	8005b90 <__swbuf_r+0x6c>
 8005bba:	bf00      	nop
 8005bbc:	080066d4 	.word	0x080066d4
 8005bc0:	080066f4 	.word	0x080066f4
 8005bc4:	080066b4 	.word	0x080066b4

08005bc8 <__ascii_wctomb>:
 8005bc8:	4603      	mov	r3, r0
 8005bca:	4608      	mov	r0, r1
 8005bcc:	b141      	cbz	r1, 8005be0 <__ascii_wctomb+0x18>
 8005bce:	2aff      	cmp	r2, #255	; 0xff
 8005bd0:	d904      	bls.n	8005bdc <__ascii_wctomb+0x14>
 8005bd2:	228a      	movs	r2, #138	; 0x8a
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	4770      	bx	lr
 8005bdc:	2001      	movs	r0, #1
 8005bde:	700a      	strb	r2, [r1, #0]
 8005be0:	4770      	bx	lr
	...

08005be4 <__swsetup_r>:
 8005be4:	4b32      	ldr	r3, [pc, #200]	; (8005cb0 <__swsetup_r+0xcc>)
 8005be6:	b570      	push	{r4, r5, r6, lr}
 8005be8:	681d      	ldr	r5, [r3, #0]
 8005bea:	4606      	mov	r6, r0
 8005bec:	460c      	mov	r4, r1
 8005bee:	b125      	cbz	r5, 8005bfa <__swsetup_r+0x16>
 8005bf0:	69ab      	ldr	r3, [r5, #24]
 8005bf2:	b913      	cbnz	r3, 8005bfa <__swsetup_r+0x16>
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f000 f985 	bl	8005f04 <__sinit>
 8005bfa:	4b2e      	ldr	r3, [pc, #184]	; (8005cb4 <__swsetup_r+0xd0>)
 8005bfc:	429c      	cmp	r4, r3
 8005bfe:	d10f      	bne.n	8005c20 <__swsetup_r+0x3c>
 8005c00:	686c      	ldr	r4, [r5, #4]
 8005c02:	89a3      	ldrh	r3, [r4, #12]
 8005c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c08:	0719      	lsls	r1, r3, #28
 8005c0a:	d42c      	bmi.n	8005c66 <__swsetup_r+0x82>
 8005c0c:	06dd      	lsls	r5, r3, #27
 8005c0e:	d411      	bmi.n	8005c34 <__swsetup_r+0x50>
 8005c10:	2309      	movs	r3, #9
 8005c12:	6033      	str	r3, [r6, #0]
 8005c14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1c:	81a3      	strh	r3, [r4, #12]
 8005c1e:	e03e      	b.n	8005c9e <__swsetup_r+0xba>
 8005c20:	4b25      	ldr	r3, [pc, #148]	; (8005cb8 <__swsetup_r+0xd4>)
 8005c22:	429c      	cmp	r4, r3
 8005c24:	d101      	bne.n	8005c2a <__swsetup_r+0x46>
 8005c26:	68ac      	ldr	r4, [r5, #8]
 8005c28:	e7eb      	b.n	8005c02 <__swsetup_r+0x1e>
 8005c2a:	4b24      	ldr	r3, [pc, #144]	; (8005cbc <__swsetup_r+0xd8>)
 8005c2c:	429c      	cmp	r4, r3
 8005c2e:	bf08      	it	eq
 8005c30:	68ec      	ldreq	r4, [r5, #12]
 8005c32:	e7e6      	b.n	8005c02 <__swsetup_r+0x1e>
 8005c34:	0758      	lsls	r0, r3, #29
 8005c36:	d512      	bpl.n	8005c5e <__swsetup_r+0x7a>
 8005c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c3a:	b141      	cbz	r1, 8005c4e <__swsetup_r+0x6a>
 8005c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c40:	4299      	cmp	r1, r3
 8005c42:	d002      	beq.n	8005c4a <__swsetup_r+0x66>
 8005c44:	4630      	mov	r0, r6
 8005c46:	f7ff fd11 	bl	800566c <_free_r>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	6363      	str	r3, [r4, #52]	; 0x34
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c54:	81a3      	strh	r3, [r4, #12]
 8005c56:	2300      	movs	r3, #0
 8005c58:	6063      	str	r3, [r4, #4]
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	f043 0308 	orr.w	r3, r3, #8
 8005c64:	81a3      	strh	r3, [r4, #12]
 8005c66:	6923      	ldr	r3, [r4, #16]
 8005c68:	b94b      	cbnz	r3, 8005c7e <__swsetup_r+0x9a>
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c74:	d003      	beq.n	8005c7e <__swsetup_r+0x9a>
 8005c76:	4621      	mov	r1, r4
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f000 fa07 	bl	800608c <__smakebuf_r>
 8005c7e:	89a0      	ldrh	r0, [r4, #12]
 8005c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c84:	f010 0301 	ands.w	r3, r0, #1
 8005c88:	d00a      	beq.n	8005ca0 <__swsetup_r+0xbc>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60a3      	str	r3, [r4, #8]
 8005c8e:	6963      	ldr	r3, [r4, #20]
 8005c90:	425b      	negs	r3, r3
 8005c92:	61a3      	str	r3, [r4, #24]
 8005c94:	6923      	ldr	r3, [r4, #16]
 8005c96:	b943      	cbnz	r3, 8005caa <__swsetup_r+0xc6>
 8005c98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c9c:	d1ba      	bne.n	8005c14 <__swsetup_r+0x30>
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ca0:	0781      	lsls	r1, r0, #30
 8005ca2:	bf58      	it	pl
 8005ca4:	6963      	ldrpl	r3, [r4, #20]
 8005ca6:	60a3      	str	r3, [r4, #8]
 8005ca8:	e7f4      	b.n	8005c94 <__swsetup_r+0xb0>
 8005caa:	2000      	movs	r0, #0
 8005cac:	e7f7      	b.n	8005c9e <__swsetup_r+0xba>
 8005cae:	bf00      	nop
 8005cb0:	2000000c 	.word	0x2000000c
 8005cb4:	080066d4 	.word	0x080066d4
 8005cb8:	080066f4 	.word	0x080066f4
 8005cbc:	080066b4 	.word	0x080066b4

08005cc0 <abort>:
 8005cc0:	2006      	movs	r0, #6
 8005cc2:	b508      	push	{r3, lr}
 8005cc4:	f000 fa4a 	bl	800615c <raise>
 8005cc8:	2001      	movs	r0, #1
 8005cca:	f7fb fc97 	bl	80015fc <_exit>
	...

08005cd0 <__sflush_r>:
 8005cd0:	898a      	ldrh	r2, [r1, #12]
 8005cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd6:	4605      	mov	r5, r0
 8005cd8:	0710      	lsls	r0, r2, #28
 8005cda:	460c      	mov	r4, r1
 8005cdc:	d458      	bmi.n	8005d90 <__sflush_r+0xc0>
 8005cde:	684b      	ldr	r3, [r1, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	dc05      	bgt.n	8005cf0 <__sflush_r+0x20>
 8005ce4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	dc02      	bgt.n	8005cf0 <__sflush_r+0x20>
 8005cea:	2000      	movs	r0, #0
 8005cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cf2:	2e00      	cmp	r6, #0
 8005cf4:	d0f9      	beq.n	8005cea <__sflush_r+0x1a>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005cfc:	682f      	ldr	r7, [r5, #0]
 8005cfe:	602b      	str	r3, [r5, #0]
 8005d00:	d032      	beq.n	8005d68 <__sflush_r+0x98>
 8005d02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d04:	89a3      	ldrh	r3, [r4, #12]
 8005d06:	075a      	lsls	r2, r3, #29
 8005d08:	d505      	bpl.n	8005d16 <__sflush_r+0x46>
 8005d0a:	6863      	ldr	r3, [r4, #4]
 8005d0c:	1ac0      	subs	r0, r0, r3
 8005d0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d10:	b10b      	cbz	r3, 8005d16 <__sflush_r+0x46>
 8005d12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d14:	1ac0      	subs	r0, r0, r3
 8005d16:	2300      	movs	r3, #0
 8005d18:	4602      	mov	r2, r0
 8005d1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	6a21      	ldr	r1, [r4, #32]
 8005d20:	47b0      	blx	r6
 8005d22:	1c43      	adds	r3, r0, #1
 8005d24:	89a3      	ldrh	r3, [r4, #12]
 8005d26:	d106      	bne.n	8005d36 <__sflush_r+0x66>
 8005d28:	6829      	ldr	r1, [r5, #0]
 8005d2a:	291d      	cmp	r1, #29
 8005d2c:	d82c      	bhi.n	8005d88 <__sflush_r+0xb8>
 8005d2e:	4a2a      	ldr	r2, [pc, #168]	; (8005dd8 <__sflush_r+0x108>)
 8005d30:	40ca      	lsrs	r2, r1
 8005d32:	07d6      	lsls	r6, r2, #31
 8005d34:	d528      	bpl.n	8005d88 <__sflush_r+0xb8>
 8005d36:	2200      	movs	r2, #0
 8005d38:	6062      	str	r2, [r4, #4]
 8005d3a:	6922      	ldr	r2, [r4, #16]
 8005d3c:	04d9      	lsls	r1, r3, #19
 8005d3e:	6022      	str	r2, [r4, #0]
 8005d40:	d504      	bpl.n	8005d4c <__sflush_r+0x7c>
 8005d42:	1c42      	adds	r2, r0, #1
 8005d44:	d101      	bne.n	8005d4a <__sflush_r+0x7a>
 8005d46:	682b      	ldr	r3, [r5, #0]
 8005d48:	b903      	cbnz	r3, 8005d4c <__sflush_r+0x7c>
 8005d4a:	6560      	str	r0, [r4, #84]	; 0x54
 8005d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d4e:	602f      	str	r7, [r5, #0]
 8005d50:	2900      	cmp	r1, #0
 8005d52:	d0ca      	beq.n	8005cea <__sflush_r+0x1a>
 8005d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d58:	4299      	cmp	r1, r3
 8005d5a:	d002      	beq.n	8005d62 <__sflush_r+0x92>
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	f7ff fc85 	bl	800566c <_free_r>
 8005d62:	2000      	movs	r0, #0
 8005d64:	6360      	str	r0, [r4, #52]	; 0x34
 8005d66:	e7c1      	b.n	8005cec <__sflush_r+0x1c>
 8005d68:	6a21      	ldr	r1, [r4, #32]
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	47b0      	blx	r6
 8005d70:	1c41      	adds	r1, r0, #1
 8005d72:	d1c7      	bne.n	8005d04 <__sflush_r+0x34>
 8005d74:	682b      	ldr	r3, [r5, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0c4      	beq.n	8005d04 <__sflush_r+0x34>
 8005d7a:	2b1d      	cmp	r3, #29
 8005d7c:	d001      	beq.n	8005d82 <__sflush_r+0xb2>
 8005d7e:	2b16      	cmp	r3, #22
 8005d80:	d101      	bne.n	8005d86 <__sflush_r+0xb6>
 8005d82:	602f      	str	r7, [r5, #0]
 8005d84:	e7b1      	b.n	8005cea <__sflush_r+0x1a>
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d8c:	81a3      	strh	r3, [r4, #12]
 8005d8e:	e7ad      	b.n	8005cec <__sflush_r+0x1c>
 8005d90:	690f      	ldr	r7, [r1, #16]
 8005d92:	2f00      	cmp	r7, #0
 8005d94:	d0a9      	beq.n	8005cea <__sflush_r+0x1a>
 8005d96:	0793      	lsls	r3, r2, #30
 8005d98:	bf18      	it	ne
 8005d9a:	2300      	movne	r3, #0
 8005d9c:	680e      	ldr	r6, [r1, #0]
 8005d9e:	bf08      	it	eq
 8005da0:	694b      	ldreq	r3, [r1, #20]
 8005da2:	eba6 0807 	sub.w	r8, r6, r7
 8005da6:	600f      	str	r7, [r1, #0]
 8005da8:	608b      	str	r3, [r1, #8]
 8005daa:	f1b8 0f00 	cmp.w	r8, #0
 8005dae:	dd9c      	ble.n	8005cea <__sflush_r+0x1a>
 8005db0:	4643      	mov	r3, r8
 8005db2:	463a      	mov	r2, r7
 8005db4:	4628      	mov	r0, r5
 8005db6:	6a21      	ldr	r1, [r4, #32]
 8005db8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005dba:	47b0      	blx	r6
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	dc06      	bgt.n	8005dce <__sflush_r+0xfe>
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dca:	81a3      	strh	r3, [r4, #12]
 8005dcc:	e78e      	b.n	8005cec <__sflush_r+0x1c>
 8005dce:	4407      	add	r7, r0
 8005dd0:	eba8 0800 	sub.w	r8, r8, r0
 8005dd4:	e7e9      	b.n	8005daa <__sflush_r+0xda>
 8005dd6:	bf00      	nop
 8005dd8:	20400001 	.word	0x20400001

08005ddc <_fflush_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	690b      	ldr	r3, [r1, #16]
 8005de0:	4605      	mov	r5, r0
 8005de2:	460c      	mov	r4, r1
 8005de4:	b913      	cbnz	r3, 8005dec <_fflush_r+0x10>
 8005de6:	2500      	movs	r5, #0
 8005de8:	4628      	mov	r0, r5
 8005dea:	bd38      	pop	{r3, r4, r5, pc}
 8005dec:	b118      	cbz	r0, 8005df6 <_fflush_r+0x1a>
 8005dee:	6983      	ldr	r3, [r0, #24]
 8005df0:	b90b      	cbnz	r3, 8005df6 <_fflush_r+0x1a>
 8005df2:	f000 f887 	bl	8005f04 <__sinit>
 8005df6:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <_fflush_r+0x6c>)
 8005df8:	429c      	cmp	r4, r3
 8005dfa:	d11b      	bne.n	8005e34 <_fflush_r+0x58>
 8005dfc:	686c      	ldr	r4, [r5, #4]
 8005dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0ef      	beq.n	8005de6 <_fflush_r+0xa>
 8005e06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e08:	07d0      	lsls	r0, r2, #31
 8005e0a:	d404      	bmi.n	8005e16 <_fflush_r+0x3a>
 8005e0c:	0599      	lsls	r1, r3, #22
 8005e0e:	d402      	bmi.n	8005e16 <_fflush_r+0x3a>
 8005e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e12:	f000 f915 	bl	8006040 <__retarget_lock_acquire_recursive>
 8005e16:	4628      	mov	r0, r5
 8005e18:	4621      	mov	r1, r4
 8005e1a:	f7ff ff59 	bl	8005cd0 <__sflush_r>
 8005e1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e20:	4605      	mov	r5, r0
 8005e22:	07da      	lsls	r2, r3, #31
 8005e24:	d4e0      	bmi.n	8005de8 <_fflush_r+0xc>
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	059b      	lsls	r3, r3, #22
 8005e2a:	d4dd      	bmi.n	8005de8 <_fflush_r+0xc>
 8005e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e2e:	f000 f908 	bl	8006042 <__retarget_lock_release_recursive>
 8005e32:	e7d9      	b.n	8005de8 <_fflush_r+0xc>
 8005e34:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <_fflush_r+0x70>)
 8005e36:	429c      	cmp	r4, r3
 8005e38:	d101      	bne.n	8005e3e <_fflush_r+0x62>
 8005e3a:	68ac      	ldr	r4, [r5, #8]
 8005e3c:	e7df      	b.n	8005dfe <_fflush_r+0x22>
 8005e3e:	4b04      	ldr	r3, [pc, #16]	; (8005e50 <_fflush_r+0x74>)
 8005e40:	429c      	cmp	r4, r3
 8005e42:	bf08      	it	eq
 8005e44:	68ec      	ldreq	r4, [r5, #12]
 8005e46:	e7da      	b.n	8005dfe <_fflush_r+0x22>
 8005e48:	080066d4 	.word	0x080066d4
 8005e4c:	080066f4 	.word	0x080066f4
 8005e50:	080066b4 	.word	0x080066b4

08005e54 <std>:
 8005e54:	2300      	movs	r3, #0
 8005e56:	b510      	push	{r4, lr}
 8005e58:	4604      	mov	r4, r0
 8005e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e62:	6083      	str	r3, [r0, #8]
 8005e64:	8181      	strh	r1, [r0, #12]
 8005e66:	6643      	str	r3, [r0, #100]	; 0x64
 8005e68:	81c2      	strh	r2, [r0, #14]
 8005e6a:	6183      	str	r3, [r0, #24]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	2208      	movs	r2, #8
 8005e70:	305c      	adds	r0, #92	; 0x5c
 8005e72:	f7fd fd5d 	bl	8003930 <memset>
 8005e76:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <std+0x38>)
 8005e78:	6224      	str	r4, [r4, #32]
 8005e7a:	6263      	str	r3, [r4, #36]	; 0x24
 8005e7c:	4b04      	ldr	r3, [pc, #16]	; (8005e90 <std+0x3c>)
 8005e7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e80:	4b04      	ldr	r3, [pc, #16]	; (8005e94 <std+0x40>)
 8005e82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e84:	4b04      	ldr	r3, [pc, #16]	; (8005e98 <std+0x44>)
 8005e86:	6323      	str	r3, [r4, #48]	; 0x30
 8005e88:	bd10      	pop	{r4, pc}
 8005e8a:	bf00      	nop
 8005e8c:	08006195 	.word	0x08006195
 8005e90:	080061b7 	.word	0x080061b7
 8005e94:	080061ef 	.word	0x080061ef
 8005e98:	08006213 	.word	0x08006213

08005e9c <_cleanup_r>:
 8005e9c:	4901      	ldr	r1, [pc, #4]	; (8005ea4 <_cleanup_r+0x8>)
 8005e9e:	f000 b8af 	b.w	8006000 <_fwalk_reent>
 8005ea2:	bf00      	nop
 8005ea4:	08005ddd 	.word	0x08005ddd

08005ea8 <__sfmoreglue>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	2568      	movs	r5, #104	; 0x68
 8005eac:	1e4a      	subs	r2, r1, #1
 8005eae:	4355      	muls	r5, r2
 8005eb0:	460e      	mov	r6, r1
 8005eb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005eb6:	f7ff fc25 	bl	8005704 <_malloc_r>
 8005eba:	4604      	mov	r4, r0
 8005ebc:	b140      	cbz	r0, 8005ed0 <__sfmoreglue+0x28>
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	e9c0 1600 	strd	r1, r6, [r0]
 8005ec4:	300c      	adds	r0, #12
 8005ec6:	60a0      	str	r0, [r4, #8]
 8005ec8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ecc:	f7fd fd30 	bl	8003930 <memset>
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}

08005ed4 <__sfp_lock_acquire>:
 8005ed4:	4801      	ldr	r0, [pc, #4]	; (8005edc <__sfp_lock_acquire+0x8>)
 8005ed6:	f000 b8b3 	b.w	8006040 <__retarget_lock_acquire_recursive>
 8005eda:	bf00      	nop
 8005edc:	200002e4 	.word	0x200002e4

08005ee0 <__sfp_lock_release>:
 8005ee0:	4801      	ldr	r0, [pc, #4]	; (8005ee8 <__sfp_lock_release+0x8>)
 8005ee2:	f000 b8ae 	b.w	8006042 <__retarget_lock_release_recursive>
 8005ee6:	bf00      	nop
 8005ee8:	200002e4 	.word	0x200002e4

08005eec <__sinit_lock_acquire>:
 8005eec:	4801      	ldr	r0, [pc, #4]	; (8005ef4 <__sinit_lock_acquire+0x8>)
 8005eee:	f000 b8a7 	b.w	8006040 <__retarget_lock_acquire_recursive>
 8005ef2:	bf00      	nop
 8005ef4:	200002df 	.word	0x200002df

08005ef8 <__sinit_lock_release>:
 8005ef8:	4801      	ldr	r0, [pc, #4]	; (8005f00 <__sinit_lock_release+0x8>)
 8005efa:	f000 b8a2 	b.w	8006042 <__retarget_lock_release_recursive>
 8005efe:	bf00      	nop
 8005f00:	200002df 	.word	0x200002df

08005f04 <__sinit>:
 8005f04:	b510      	push	{r4, lr}
 8005f06:	4604      	mov	r4, r0
 8005f08:	f7ff fff0 	bl	8005eec <__sinit_lock_acquire>
 8005f0c:	69a3      	ldr	r3, [r4, #24]
 8005f0e:	b11b      	cbz	r3, 8005f18 <__sinit+0x14>
 8005f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f14:	f7ff bff0 	b.w	8005ef8 <__sinit_lock_release>
 8005f18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f1c:	6523      	str	r3, [r4, #80]	; 0x50
 8005f1e:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <__sinit+0x68>)
 8005f20:	4a13      	ldr	r2, [pc, #76]	; (8005f70 <__sinit+0x6c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f26:	42a3      	cmp	r3, r4
 8005f28:	bf08      	it	eq
 8005f2a:	2301      	moveq	r3, #1
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	bf08      	it	eq
 8005f30:	61a3      	streq	r3, [r4, #24]
 8005f32:	f000 f81f 	bl	8005f74 <__sfp>
 8005f36:	6060      	str	r0, [r4, #4]
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f000 f81b 	bl	8005f74 <__sfp>
 8005f3e:	60a0      	str	r0, [r4, #8]
 8005f40:	4620      	mov	r0, r4
 8005f42:	f000 f817 	bl	8005f74 <__sfp>
 8005f46:	2200      	movs	r2, #0
 8005f48:	2104      	movs	r1, #4
 8005f4a:	60e0      	str	r0, [r4, #12]
 8005f4c:	6860      	ldr	r0, [r4, #4]
 8005f4e:	f7ff ff81 	bl	8005e54 <std>
 8005f52:	2201      	movs	r2, #1
 8005f54:	2109      	movs	r1, #9
 8005f56:	68a0      	ldr	r0, [r4, #8]
 8005f58:	f7ff ff7c 	bl	8005e54 <std>
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	2112      	movs	r1, #18
 8005f60:	68e0      	ldr	r0, [r4, #12]
 8005f62:	f7ff ff77 	bl	8005e54 <std>
 8005f66:	2301      	movs	r3, #1
 8005f68:	61a3      	str	r3, [r4, #24]
 8005f6a:	e7d1      	b.n	8005f10 <__sinit+0xc>
 8005f6c:	08006330 	.word	0x08006330
 8005f70:	08005e9d 	.word	0x08005e9d

08005f74 <__sfp>:
 8005f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f76:	4607      	mov	r7, r0
 8005f78:	f7ff ffac 	bl	8005ed4 <__sfp_lock_acquire>
 8005f7c:	4b1e      	ldr	r3, [pc, #120]	; (8005ff8 <__sfp+0x84>)
 8005f7e:	681e      	ldr	r6, [r3, #0]
 8005f80:	69b3      	ldr	r3, [r6, #24]
 8005f82:	b913      	cbnz	r3, 8005f8a <__sfp+0x16>
 8005f84:	4630      	mov	r0, r6
 8005f86:	f7ff ffbd 	bl	8005f04 <__sinit>
 8005f8a:	3648      	adds	r6, #72	; 0x48
 8005f8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f90:	3b01      	subs	r3, #1
 8005f92:	d503      	bpl.n	8005f9c <__sfp+0x28>
 8005f94:	6833      	ldr	r3, [r6, #0]
 8005f96:	b30b      	cbz	r3, 8005fdc <__sfp+0x68>
 8005f98:	6836      	ldr	r6, [r6, #0]
 8005f9a:	e7f7      	b.n	8005f8c <__sfp+0x18>
 8005f9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fa0:	b9d5      	cbnz	r5, 8005fd8 <__sfp+0x64>
 8005fa2:	4b16      	ldr	r3, [pc, #88]	; (8005ffc <__sfp+0x88>)
 8005fa4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fa8:	60e3      	str	r3, [r4, #12]
 8005faa:	6665      	str	r5, [r4, #100]	; 0x64
 8005fac:	f000 f847 	bl	800603e <__retarget_lock_init_recursive>
 8005fb0:	f7ff ff96 	bl	8005ee0 <__sfp_lock_release>
 8005fb4:	2208      	movs	r2, #8
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005fbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005fc0:	6025      	str	r5, [r4, #0]
 8005fc2:	61a5      	str	r5, [r4, #24]
 8005fc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005fc8:	f7fd fcb2 	bl	8003930 <memset>
 8005fcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005fd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fd8:	3468      	adds	r4, #104	; 0x68
 8005fda:	e7d9      	b.n	8005f90 <__sfp+0x1c>
 8005fdc:	2104      	movs	r1, #4
 8005fde:	4638      	mov	r0, r7
 8005fe0:	f7ff ff62 	bl	8005ea8 <__sfmoreglue>
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	6030      	str	r0, [r6, #0]
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d1d5      	bne.n	8005f98 <__sfp+0x24>
 8005fec:	f7ff ff78 	bl	8005ee0 <__sfp_lock_release>
 8005ff0:	230c      	movs	r3, #12
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	e7ee      	b.n	8005fd4 <__sfp+0x60>
 8005ff6:	bf00      	nop
 8005ff8:	08006330 	.word	0x08006330
 8005ffc:	ffff0001 	.word	0xffff0001

08006000 <_fwalk_reent>:
 8006000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006004:	4606      	mov	r6, r0
 8006006:	4688      	mov	r8, r1
 8006008:	2700      	movs	r7, #0
 800600a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800600e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006012:	f1b9 0901 	subs.w	r9, r9, #1
 8006016:	d505      	bpl.n	8006024 <_fwalk_reent+0x24>
 8006018:	6824      	ldr	r4, [r4, #0]
 800601a:	2c00      	cmp	r4, #0
 800601c:	d1f7      	bne.n	800600e <_fwalk_reent+0xe>
 800601e:	4638      	mov	r0, r7
 8006020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006024:	89ab      	ldrh	r3, [r5, #12]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d907      	bls.n	800603a <_fwalk_reent+0x3a>
 800602a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800602e:	3301      	adds	r3, #1
 8006030:	d003      	beq.n	800603a <_fwalk_reent+0x3a>
 8006032:	4629      	mov	r1, r5
 8006034:	4630      	mov	r0, r6
 8006036:	47c0      	blx	r8
 8006038:	4307      	orrs	r7, r0
 800603a:	3568      	adds	r5, #104	; 0x68
 800603c:	e7e9      	b.n	8006012 <_fwalk_reent+0x12>

0800603e <__retarget_lock_init_recursive>:
 800603e:	4770      	bx	lr

08006040 <__retarget_lock_acquire_recursive>:
 8006040:	4770      	bx	lr

08006042 <__retarget_lock_release_recursive>:
 8006042:	4770      	bx	lr

08006044 <__swhatbuf_r>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	460e      	mov	r6, r1
 8006048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800604c:	4614      	mov	r4, r2
 800604e:	2900      	cmp	r1, #0
 8006050:	461d      	mov	r5, r3
 8006052:	b096      	sub	sp, #88	; 0x58
 8006054:	da07      	bge.n	8006066 <__swhatbuf_r+0x22>
 8006056:	2300      	movs	r3, #0
 8006058:	602b      	str	r3, [r5, #0]
 800605a:	89b3      	ldrh	r3, [r6, #12]
 800605c:	061a      	lsls	r2, r3, #24
 800605e:	d410      	bmi.n	8006082 <__swhatbuf_r+0x3e>
 8006060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006064:	e00e      	b.n	8006084 <__swhatbuf_r+0x40>
 8006066:	466a      	mov	r2, sp
 8006068:	f000 f8fa 	bl	8006260 <_fstat_r>
 800606c:	2800      	cmp	r0, #0
 800606e:	dbf2      	blt.n	8006056 <__swhatbuf_r+0x12>
 8006070:	9a01      	ldr	r2, [sp, #4]
 8006072:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006076:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800607a:	425a      	negs	r2, r3
 800607c:	415a      	adcs	r2, r3
 800607e:	602a      	str	r2, [r5, #0]
 8006080:	e7ee      	b.n	8006060 <__swhatbuf_r+0x1c>
 8006082:	2340      	movs	r3, #64	; 0x40
 8006084:	2000      	movs	r0, #0
 8006086:	6023      	str	r3, [r4, #0]
 8006088:	b016      	add	sp, #88	; 0x58
 800608a:	bd70      	pop	{r4, r5, r6, pc}

0800608c <__smakebuf_r>:
 800608c:	898b      	ldrh	r3, [r1, #12]
 800608e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006090:	079d      	lsls	r5, r3, #30
 8006092:	4606      	mov	r6, r0
 8006094:	460c      	mov	r4, r1
 8006096:	d507      	bpl.n	80060a8 <__smakebuf_r+0x1c>
 8006098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	6123      	str	r3, [r4, #16]
 80060a0:	2301      	movs	r3, #1
 80060a2:	6163      	str	r3, [r4, #20]
 80060a4:	b002      	add	sp, #8
 80060a6:	bd70      	pop	{r4, r5, r6, pc}
 80060a8:	466a      	mov	r2, sp
 80060aa:	ab01      	add	r3, sp, #4
 80060ac:	f7ff ffca 	bl	8006044 <__swhatbuf_r>
 80060b0:	9900      	ldr	r1, [sp, #0]
 80060b2:	4605      	mov	r5, r0
 80060b4:	4630      	mov	r0, r6
 80060b6:	f7ff fb25 	bl	8005704 <_malloc_r>
 80060ba:	b948      	cbnz	r0, 80060d0 <__smakebuf_r+0x44>
 80060bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060c0:	059a      	lsls	r2, r3, #22
 80060c2:	d4ef      	bmi.n	80060a4 <__smakebuf_r+0x18>
 80060c4:	f023 0303 	bic.w	r3, r3, #3
 80060c8:	f043 0302 	orr.w	r3, r3, #2
 80060cc:	81a3      	strh	r3, [r4, #12]
 80060ce:	e7e3      	b.n	8006098 <__smakebuf_r+0xc>
 80060d0:	4b0d      	ldr	r3, [pc, #52]	; (8006108 <__smakebuf_r+0x7c>)
 80060d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	6020      	str	r0, [r4, #0]
 80060d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060dc:	81a3      	strh	r3, [r4, #12]
 80060de:	9b00      	ldr	r3, [sp, #0]
 80060e0:	6120      	str	r0, [r4, #16]
 80060e2:	6163      	str	r3, [r4, #20]
 80060e4:	9b01      	ldr	r3, [sp, #4]
 80060e6:	b15b      	cbz	r3, 8006100 <__smakebuf_r+0x74>
 80060e8:	4630      	mov	r0, r6
 80060ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ee:	f000 f8c9 	bl	8006284 <_isatty_r>
 80060f2:	b128      	cbz	r0, 8006100 <__smakebuf_r+0x74>
 80060f4:	89a3      	ldrh	r3, [r4, #12]
 80060f6:	f023 0303 	bic.w	r3, r3, #3
 80060fa:	f043 0301 	orr.w	r3, r3, #1
 80060fe:	81a3      	strh	r3, [r4, #12]
 8006100:	89a0      	ldrh	r0, [r4, #12]
 8006102:	4305      	orrs	r5, r0
 8006104:	81a5      	strh	r5, [r4, #12]
 8006106:	e7cd      	b.n	80060a4 <__smakebuf_r+0x18>
 8006108:	08005e9d 	.word	0x08005e9d

0800610c <_raise_r>:
 800610c:	291f      	cmp	r1, #31
 800610e:	b538      	push	{r3, r4, r5, lr}
 8006110:	4604      	mov	r4, r0
 8006112:	460d      	mov	r5, r1
 8006114:	d904      	bls.n	8006120 <_raise_r+0x14>
 8006116:	2316      	movs	r3, #22
 8006118:	6003      	str	r3, [r0, #0]
 800611a:	f04f 30ff 	mov.w	r0, #4294967295
 800611e:	bd38      	pop	{r3, r4, r5, pc}
 8006120:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006122:	b112      	cbz	r2, 800612a <_raise_r+0x1e>
 8006124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006128:	b94b      	cbnz	r3, 800613e <_raise_r+0x32>
 800612a:	4620      	mov	r0, r4
 800612c:	f000 f830 	bl	8006190 <_getpid_r>
 8006130:	462a      	mov	r2, r5
 8006132:	4601      	mov	r1, r0
 8006134:	4620      	mov	r0, r4
 8006136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800613a:	f000 b817 	b.w	800616c <_kill_r>
 800613e:	2b01      	cmp	r3, #1
 8006140:	d00a      	beq.n	8006158 <_raise_r+0x4c>
 8006142:	1c59      	adds	r1, r3, #1
 8006144:	d103      	bne.n	800614e <_raise_r+0x42>
 8006146:	2316      	movs	r3, #22
 8006148:	6003      	str	r3, [r0, #0]
 800614a:	2001      	movs	r0, #1
 800614c:	e7e7      	b.n	800611e <_raise_r+0x12>
 800614e:	2400      	movs	r4, #0
 8006150:	4628      	mov	r0, r5
 8006152:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006156:	4798      	blx	r3
 8006158:	2000      	movs	r0, #0
 800615a:	e7e0      	b.n	800611e <_raise_r+0x12>

0800615c <raise>:
 800615c:	4b02      	ldr	r3, [pc, #8]	; (8006168 <raise+0xc>)
 800615e:	4601      	mov	r1, r0
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	f7ff bfd3 	b.w	800610c <_raise_r>
 8006166:	bf00      	nop
 8006168:	2000000c 	.word	0x2000000c

0800616c <_kill_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	2300      	movs	r3, #0
 8006170:	4d06      	ldr	r5, [pc, #24]	; (800618c <_kill_r+0x20>)
 8006172:	4604      	mov	r4, r0
 8006174:	4608      	mov	r0, r1
 8006176:	4611      	mov	r1, r2
 8006178:	602b      	str	r3, [r5, #0]
 800617a:	f7fb fa2f 	bl	80015dc <_kill>
 800617e:	1c43      	adds	r3, r0, #1
 8006180:	d102      	bne.n	8006188 <_kill_r+0x1c>
 8006182:	682b      	ldr	r3, [r5, #0]
 8006184:	b103      	cbz	r3, 8006188 <_kill_r+0x1c>
 8006186:	6023      	str	r3, [r4, #0]
 8006188:	bd38      	pop	{r3, r4, r5, pc}
 800618a:	bf00      	nop
 800618c:	200002d8 	.word	0x200002d8

08006190 <_getpid_r>:
 8006190:	f7fb ba1d 	b.w	80015ce <_getpid>

08006194 <__sread>:
 8006194:	b510      	push	{r4, lr}
 8006196:	460c      	mov	r4, r1
 8006198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800619c:	f000 f894 	bl	80062c8 <_read_r>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	bfab      	itete	ge
 80061a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061a6:	89a3      	ldrhlt	r3, [r4, #12]
 80061a8:	181b      	addge	r3, r3, r0
 80061aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061ae:	bfac      	ite	ge
 80061b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80061b2:	81a3      	strhlt	r3, [r4, #12]
 80061b4:	bd10      	pop	{r4, pc}

080061b6 <__swrite>:
 80061b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ba:	461f      	mov	r7, r3
 80061bc:	898b      	ldrh	r3, [r1, #12]
 80061be:	4605      	mov	r5, r0
 80061c0:	05db      	lsls	r3, r3, #23
 80061c2:	460c      	mov	r4, r1
 80061c4:	4616      	mov	r6, r2
 80061c6:	d505      	bpl.n	80061d4 <__swrite+0x1e>
 80061c8:	2302      	movs	r3, #2
 80061ca:	2200      	movs	r2, #0
 80061cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d0:	f000 f868 	bl	80062a4 <_lseek_r>
 80061d4:	89a3      	ldrh	r3, [r4, #12]
 80061d6:	4632      	mov	r2, r6
 80061d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061dc:	81a3      	strh	r3, [r4, #12]
 80061de:	4628      	mov	r0, r5
 80061e0:	463b      	mov	r3, r7
 80061e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061ea:	f000 b817 	b.w	800621c <_write_r>

080061ee <__sseek>:
 80061ee:	b510      	push	{r4, lr}
 80061f0:	460c      	mov	r4, r1
 80061f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f6:	f000 f855 	bl	80062a4 <_lseek_r>
 80061fa:	1c43      	adds	r3, r0, #1
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	bf15      	itete	ne
 8006200:	6560      	strne	r0, [r4, #84]	; 0x54
 8006202:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006206:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800620a:	81a3      	strheq	r3, [r4, #12]
 800620c:	bf18      	it	ne
 800620e:	81a3      	strhne	r3, [r4, #12]
 8006210:	bd10      	pop	{r4, pc}

08006212 <__sclose>:
 8006212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006216:	f000 b813 	b.w	8006240 <_close_r>
	...

0800621c <_write_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	4604      	mov	r4, r0
 8006220:	4608      	mov	r0, r1
 8006222:	4611      	mov	r1, r2
 8006224:	2200      	movs	r2, #0
 8006226:	4d05      	ldr	r5, [pc, #20]	; (800623c <_write_r+0x20>)
 8006228:	602a      	str	r2, [r5, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	f7fb fa0d 	bl	800164a <_write>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d102      	bne.n	800623a <_write_r+0x1e>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b103      	cbz	r3, 800623a <_write_r+0x1e>
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	200002d8 	.word	0x200002d8

08006240 <_close_r>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	2300      	movs	r3, #0
 8006244:	4d05      	ldr	r5, [pc, #20]	; (800625c <_close_r+0x1c>)
 8006246:	4604      	mov	r4, r0
 8006248:	4608      	mov	r0, r1
 800624a:	602b      	str	r3, [r5, #0]
 800624c:	f7fb fa19 	bl	8001682 <_close>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d102      	bne.n	800625a <_close_r+0x1a>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	b103      	cbz	r3, 800625a <_close_r+0x1a>
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	200002d8 	.word	0x200002d8

08006260 <_fstat_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	2300      	movs	r3, #0
 8006264:	4d06      	ldr	r5, [pc, #24]	; (8006280 <_fstat_r+0x20>)
 8006266:	4604      	mov	r4, r0
 8006268:	4608      	mov	r0, r1
 800626a:	4611      	mov	r1, r2
 800626c:	602b      	str	r3, [r5, #0]
 800626e:	f7fb fa13 	bl	8001698 <_fstat>
 8006272:	1c43      	adds	r3, r0, #1
 8006274:	d102      	bne.n	800627c <_fstat_r+0x1c>
 8006276:	682b      	ldr	r3, [r5, #0]
 8006278:	b103      	cbz	r3, 800627c <_fstat_r+0x1c>
 800627a:	6023      	str	r3, [r4, #0]
 800627c:	bd38      	pop	{r3, r4, r5, pc}
 800627e:	bf00      	nop
 8006280:	200002d8 	.word	0x200002d8

08006284 <_isatty_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	2300      	movs	r3, #0
 8006288:	4d05      	ldr	r5, [pc, #20]	; (80062a0 <_isatty_r+0x1c>)
 800628a:	4604      	mov	r4, r0
 800628c:	4608      	mov	r0, r1
 800628e:	602b      	str	r3, [r5, #0]
 8006290:	f7fb fa11 	bl	80016b6 <_isatty>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d102      	bne.n	800629e <_isatty_r+0x1a>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	b103      	cbz	r3, 800629e <_isatty_r+0x1a>
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	bd38      	pop	{r3, r4, r5, pc}
 80062a0:	200002d8 	.word	0x200002d8

080062a4 <_lseek_r>:
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	4604      	mov	r4, r0
 80062a8:	4608      	mov	r0, r1
 80062aa:	4611      	mov	r1, r2
 80062ac:	2200      	movs	r2, #0
 80062ae:	4d05      	ldr	r5, [pc, #20]	; (80062c4 <_lseek_r+0x20>)
 80062b0:	602a      	str	r2, [r5, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	f7fb fa09 	bl	80016ca <_lseek>
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	d102      	bne.n	80062c2 <_lseek_r+0x1e>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	b103      	cbz	r3, 80062c2 <_lseek_r+0x1e>
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	200002d8 	.word	0x200002d8

080062c8 <_read_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	4604      	mov	r4, r0
 80062cc:	4608      	mov	r0, r1
 80062ce:	4611      	mov	r1, r2
 80062d0:	2200      	movs	r2, #0
 80062d2:	4d05      	ldr	r5, [pc, #20]	; (80062e8 <_read_r+0x20>)
 80062d4:	602a      	str	r2, [r5, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	f7fb f99a 	bl	8001610 <_read>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	d102      	bne.n	80062e6 <_read_r+0x1e>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	b103      	cbz	r3, 80062e6 <_read_r+0x1e>
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	bd38      	pop	{r3, r4, r5, pc}
 80062e8:	200002d8 	.word	0x200002d8

080062ec <_init>:
 80062ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ee:	bf00      	nop
 80062f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f2:	bc08      	pop	{r3}
 80062f4:	469e      	mov	lr, r3
 80062f6:	4770      	bx	lr

080062f8 <_fini>:
 80062f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fa:	bf00      	nop
 80062fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062fe:	bc08      	pop	{r3}
 8006300:	469e      	mov	lr, r3
 8006302:	4770      	bx	lr
