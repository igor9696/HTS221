
EXPANSION_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08006000  08006000  00016000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800640c  0800640c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800640c  0800640c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800640c  0800640c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800640c  0800640c  0001640c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  200001dc  080065f0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  080065f0  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8cd  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f12  00000000  00000000  0002bad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002d9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002e420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180b3  00000000  00000000  0002eda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6d6  00000000  00000000  00046e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086486  00000000  00000000  00053531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d99b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038ac  00000000  00000000  000d9a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005fe4 	.word	0x08005fe4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005fe4 	.word	0x08005fe4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <read8>:

#include "HTS221.h"


static uint8_t read8(hts221_t* sensor, uint8_t Mem_reg)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af04      	add	r7, sp, #16
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	HAL_I2C_Mem_Read(sensor->i2c_handler, sensor->address, Mem_reg, 1, &value, 1, I2C_HTS_TIMEOUT);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	791b      	ldrb	r3, [r3, #4]
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	9302      	str	r3, [sp, #8]
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	9301      	str	r3, [sp, #4]
 8000aac:	f107 030f 	add.w	r3, r7, #15
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	f001 fad8 	bl	8002068 <HAL_I2C_Mem_Read>

	return value;
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <read16>:

static uint16_t read16(hts221_t* sensor, uint8_t Mem_reg)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b088      	sub	sp, #32
 8000ac6:	af04      	add	r7, sp, #16
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	460b      	mov	r3, r1
 8000acc:	70fb      	strb	r3, [r7, #3]
	uint8_t value[2];

	HAL_I2C_Mem_Read(sensor->i2c_handler, sensor->address, (Mem_reg | 0x80), I2C_MEMADD_SIZE_8BIT, value, 2, I2C_HTS_TIMEOUT);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6818      	ldr	r0, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	791b      	ldrb	r3, [r3, #4]
 8000ad6:	b299      	uxth	r1, r3
 8000ad8:	78fb      	ldrb	r3, [r7, #3]
 8000ada:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae6:	9302      	str	r3, [sp, #8]
 8000ae8:	2302      	movs	r3, #2
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2301      	movs	r3, #1
 8000af4:	f001 fab8 	bl	8002068 <HAL_I2C_Mem_Read>

	return (((uint16_t)(value[1])) << 8) | (uint16_t)value[0];
 8000af8:	7b7b      	ldrb	r3, [r7, #13]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	b21a      	sxth	r2, r3
 8000afe:	7b3b      	ldrb	r3, [r7, #12]
 8000b00:	b21b      	sxth	r3, r3
 8000b02:	4313      	orrs	r3, r2
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	b29b      	uxth	r3, r3
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <write8>:

static void write8(hts221_t* sensor, uint8_t Mem_reg, uint8_t* data)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af04      	add	r7, sp, #16
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensor->i2c_handler, sensor->address, Mem_reg, 1, data, 1, I2C_HTS_TIMEOUT);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	791b      	ldrb	r3, [r3, #4]
 8000b26:	b299      	uxth	r1, r3
 8000b28:	7afb      	ldrb	r3, [r7, #11]
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b30:	9302      	str	r3, [sp, #8]
 8000b32:	2301      	movs	r3, #1
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	f001 f99a 	bl	8001e74 <HAL_I2C_Mem_Write>
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <HTS221_set_power_mode>:

/////////////////////////////////////////////


void HTS221_set_power_mode(hts221_t* sensor, bool mode)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	70fb      	strb	r3, [r7, #3]
	// mode 1 - Active,  0 - Power down
	uint8_t tmp;
	tmp = read8(sensor, CTRL_REG1);
 8000b54:	2120      	movs	r1, #32
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ff96 	bl	8000a88 <read8>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	73fb      	strb	r3, [r7, #15]

	if(mode == 0) tmp &= 0x7F; // 0xxx xxxx
 8000b60:	78fb      	ldrb	r3, [r7, #3]
 8000b62:	f083 0301 	eor.w	r3, r3, #1
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d005      	beq.n	8000b78 <HTS221_set_power_mode+0x30>
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	73fb      	strb	r3, [r7, #15]
 8000b76:	e004      	b.n	8000b82 <HTS221_set_power_mode+0x3a>
	else
	{
		tmp |= 0x80;
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	73fb      	strb	r3, [r7, #15]
	}

	write8(sensor, CTRL_REG1, &tmp);
 8000b82:	f107 030f 	add.w	r3, r7, #15
 8000b86:	461a      	mov	r2, r3
 8000b88:	2120      	movs	r1, #32
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffc0 	bl	8000b10 <write8>
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <HTS221_set_output_data_rate>:



void HTS221_set_output_data_rate(hts221_t* sensor, uint8_t data_rate)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]
	if(data_rate > 3) data_rate = 3;
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d901      	bls.n	8000bae <HTS221_set_output_data_rate+0x16>
 8000baa:	2303      	movs	r3, #3
 8000bac:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, CTRL_REG1);
 8000bae:	2120      	movs	r1, #32
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff69 	bl	8000a88 <read8>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xFC; // XXXX XX00
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	f023 0303 	bic.w	r3, r3, #3
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	73fb      	strb	r3, [r7, #15]
	tmp |= data_rate & 0x03; // double protection for writing wrong number
 8000bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	b25a      	sxtb	r2, r3
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	73fb      	strb	r3, [r7, #15]

	write8(sensor, CTRL_REG1, &tmp);
 8000bda:	f107 030f 	add.w	r3, r7, #15
 8000bde:	461a      	mov	r2, r3
 8000be0:	2120      	movs	r1, #32
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ff94 	bl	8000b10 <write8>
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HTS221_set_temp_sample>:



void HTS221_set_temp_sample(hts221_t* sensor, uint8_t sample_mode)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	70fb      	strb	r3, [r7, #3]
	if(sample_mode > 7) sample_mode = 7;
 8000bfc:	78fb      	ldrb	r3, [r7, #3]
 8000bfe:	2b07      	cmp	r3, #7
 8000c00:	d901      	bls.n	8000c06 <HTS221_set_temp_sample+0x16>
 8000c02:	2307      	movs	r3, #7
 8000c04:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, AV_CONF);
 8000c06:	2110      	movs	r1, #16
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff3d 	bl	8000a88 <read8>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	73fb      	strb	r3, [r7, #15]

	tmp &= 0xC7; // 0bXX00 0xxx
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	73fb      	strb	r3, [r7, #15]
	tmp |= (sample_mode) << 3;
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	b25a      	sxtb	r2, r3
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	73fb      	strb	r3, [r7, #15]

	write8(sensor, AV_CONF, &tmp);
 8000c2e:	f107 030f 	add.w	r3, r7, #15
 8000c32:	461a      	mov	r2, r3
 8000c34:	2110      	movs	r1, #16
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ff6a 	bl	8000b10 <write8>
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HTS221_set_humidity_sample>:

void HTS221_set_humidity_sample(hts221_t* sensor, uint8_t sample_mode)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
	if(sample_mode > 7) sample_mode = 7;
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2b07      	cmp	r3, #7
 8000c54:	d901      	bls.n	8000c5a <HTS221_set_humidity_sample+0x16>
 8000c56:	2307      	movs	r3, #7
 8000c58:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, AV_CONF);
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff13 	bl	8000a88 <read8>
 8000c62:	4603      	mov	r3, r0
 8000c64:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xF8; // 0bXXXXX000
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	f023 0307 	bic.w	r3, r3, #7
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	73fb      	strb	r3, [r7, #15]

	tmp |= (sample_mode) & 0x07; // protection for writing number bigger than 7
 8000c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c74:	f003 0307 	and.w	r3, r3, #7
 8000c78:	b25a      	sxtb	r2, r3
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	b25b      	sxtb	r3, r3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	73fb      	strb	r3, [r7, #15]

	write8(sensor, AV_CONF, &tmp);
 8000c86:	f107 030f 	add.w	r3, r7, #15
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ff3e 	bl	8000b10 <write8>

}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HTS221_Init>:
	write8(sensor, CTRL_REG2, &tmp);
}


uint8_t HTS221_Init(hts221_t* sensor, I2C_HandleTypeDef* hi2c,  uint8_t Address)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	71fb      	strb	r3, [r7, #7]
	sensor->i2c_handler = hi2c;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	601a      	str	r2, [r3, #0]
	sensor->address = (Address << 1);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	711a      	strb	r2, [r3, #4]

	// check sensor ID
	uint8_t sensor_id;
	sensor_id = read8(sensor, WHO_AM_I);
 8000cba:	210f      	movs	r1, #15
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f7ff fee3 	bl	8000a88 <read8>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	75fb      	strb	r3, [r7, #23]
	if(sensor_id != 0xBC)
 8000cc6:	7dfb      	ldrb	r3, [r7, #23]
 8000cc8:	2bbc      	cmp	r3, #188	; 0xbc
 8000cca:	d001      	beq.n	8000cd0 <HTS221_Init+0x34>
	{
		return 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e08a      	b.n	8000de6 <HTS221_Init+0x14a>
	}

	// read calibration coefficients
	// 1. Temperature
	sensor->T0_degc_x8 = read8(sensor, T0_degC_x8);
 8000cd0:	2132      	movs	r1, #50	; 0x32
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f7ff fed8 	bl	8000a88 <read8>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	715a      	strb	r2, [r3, #5]
	sensor->T1_degc_x8 = read8(sensor, T1_degC_x8);
 8000ce0:	2133      	movs	r1, #51	; 0x33
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff fed0 	bl	8000a88 <read8>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	719a      	strb	r2, [r3, #6]
	sensor->T0_out = (int16_t)read16(sensor, T0_OUT);
 8000cf0:	213c      	movs	r1, #60	; 0x3c
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f7ff fee5 	bl	8000ac2 <read16>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	811a      	strh	r2, [r3, #8]
	sensor->T1_out = (int16_t)read16(sensor, T1_OUT);
 8000d00:	213e      	movs	r1, #62	; 0x3e
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f7ff fedd 	bl	8000ac2 <read16>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	815a      	strh	r2, [r3, #10]

	sensor->T0_MSB = (read8(sensor, T0_T1_MSB) & 0x3) << 8;
 8000d10:	2135      	movs	r1, #53	; 0x35
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f7ff feb8 	bl	8000a88 <read8>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	021b      	lsls	r3, r3, #8
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	819a      	strh	r2, [r3, #12]
	sensor->T1_MSB = (read8(sensor, T0_T1_MSB) & 0x0C) << 6;
 8000d28:	2135      	movs	r1, #53	; 0x35
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f7ff feac 	bl	8000a88 <read8>
 8000d30:	4603      	mov	r3, r0
 8000d32:	019b      	lsls	r3, r3, #6
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	81da      	strh	r2, [r3, #14]

	sensor->T1_degc = ((sensor->T1_MSB) | (uint16_t)(sensor->T1_degc_x8)) >> 3;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	89db      	ldrh	r3, [r3, #14]
 8000d44:	461a      	mov	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	799b      	ldrb	r3, [r3, #6]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	10db      	asrs	r3, r3, #3
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	839a      	strh	r2, [r3, #28]
	sensor->T0_degc = ((sensor->T0_MSB) | (uint16_t)(sensor->T0_degc_x8)) >> 3;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	899b      	ldrh	r3, [r3, #12]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	795b      	ldrb	r3, [r3, #5]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	10db      	asrs	r3, r3, #3
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	835a      	strh	r2, [r3, #26]

	// 2. Humidity
	sensor->H0_rh_x2 = read8(sensor, H0_rH_x2);
 8000d68:	2130      	movs	r1, #48	; 0x30
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f7ff fe8c 	bl	8000a88 <read8>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	741a      	strb	r2, [r3, #16]
	sensor->H1_rh_x2 = read8(sensor, H1_rH_x2);
 8000d78:	2131      	movs	r1, #49	; 0x31
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f7ff fe84 	bl	8000a88 <read8>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	745a      	strb	r2, [r3, #17]
	sensor->H0_T0_out = (int16_t)read16(sensor, H0_T0_OUT);
 8000d88:	2136      	movs	r1, #54	; 0x36
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f7ff fe99 	bl	8000ac2 <read16>
 8000d90:	4603      	mov	r3, r0
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	825a      	strh	r2, [r3, #18]
	sensor->H1_T0_out = (int16_t)read16(sensor, H1_T0_OUT);
 8000d98:	213a      	movs	r1, #58	; 0x3a
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f7ff fe91 	bl	8000ac2 <read16>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	829a      	strh	r2, [r3, #20]
	sensor->H0_rh = (sensor->H0_rh_x2) >> 1;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	7c1b      	ldrb	r3, [r3, #16]
 8000dac:	085b      	lsrs	r3, r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	82da      	strh	r2, [r3, #22]
	sensor->H1_rh = (sensor->H1_rh_x2) >> 1;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	7c5b      	ldrb	r3, [r3, #17]
 8000dba:	085b      	lsrs	r3, r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	831a      	strh	r2, [r3, #24]


	// set sample mode
	HTS221_set_temp_sample(sensor, TEMP_256);
 8000dc4:	2107      	movs	r1, #7
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f7ff ff12 	bl	8000bf0 <HTS221_set_temp_sample>
	HTS221_set_humidity_sample(sensor, HUM_512);
 8000dcc:	2107      	movs	r1, #7
 8000dce:	68f8      	ldr	r0, [r7, #12]
 8000dd0:	f7ff ff38 	bl	8000c44 <HTS221_set_humidity_sample>
	// set output data rate
	HTS221_set_output_data_rate(sensor, ONESHOT);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f7ff fede 	bl	8000b98 <HTS221_set_output_data_rate>
	// Turn on the device
 	HTS221_set_power_mode(sensor, 1);
 8000ddc:	2101      	movs	r1, #1
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f7ff feb2 	bl	8000b48 <HTS221_set_power_mode>
	return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HTS221_get_data>:


void HTS221_get_data(hts221_t* sensor, int16_t* temperature_value, uint16_t* humidity_val)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b088      	sub	sp, #32
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
	int32_t tmp_t, tmp_h;
	int16_t h_out, t_out;

	// wait for end of conversion

	t_out = read16(sensor, T_OUT);
 8000dfa:	212a      	movs	r1, #42	; 0x2a
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f7ff fe60 	bl	8000ac2 <read16>
 8000e02:	4603      	mov	r3, r0
 8000e04:	83fb      	strh	r3, [r7, #30]
	h_out = read16(sensor, H_OUT);
 8000e06:	2128      	movs	r1, #40	; 0x28
 8000e08:	68f8      	ldr	r0, [r7, #12]
 8000e0a:	f7ff fe5a 	bl	8000ac2 <read16>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	83bb      	strh	r3, [r7, #28]

	// humidity calculations
	tmp_h = ((int32_t)(h_out - sensor->H0_T0_out)) * ((int32_t)(sensor->H1_rh - sensor->H0_rh));
 8000e12:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8000e1c:	1a9b      	subs	r3, r3, r2
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8000e24:	4611      	mov	r1, r2
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8000e2c:	1a8a      	subs	r2, r1, r2
 8000e2e:	fb02 f303 	mul.w	r3, r2, r3
 8000e32:	61bb      	str	r3, [r7, #24]
	*humidity_val =  (uint16_t)(tmp_h/(sensor->H1_T0_out - sensor->H0_T0_out) + sensor->H0_rh);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	801a      	strh	r2, [r3, #0]

	// temperature calculations
	tmp_t = ((int32_t)(t_out - sensor->T0_out)) * ((int32_t)(sensor->T1_degc - sensor->T0_degc));
 8000e5c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8000e66:	1a9b      	subs	r3, r3, r2
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	8b92      	ldrh	r2, [r2, #28]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	8b52      	ldrh	r2, [r2, #26]
 8000e72:	1a8a      	subs	r2, r1, r2
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	617b      	str	r3, [r7, #20]
	*temperature_value = tmp_t /(sensor->T1_out - sensor->T0_out) + sensor->T0_degc;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e80:	461a      	mov	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	8b5b      	ldrh	r3, [r3, #26]
 8000e96:	4413      	add	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	b21a      	sxth	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	801a      	strh	r2, [r3, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HTS221_DRDY_Enable>:
	HTS221_get_data(sensor, temperature_value, humidity_val);
}


void HTS221_DRDY_Enable(hts221_t* sensor, uint8_t PP_OD, uint8_t DRDY_H_L)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70fb      	strb	r3, [r7, #3]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = read8(sensor, CTRL_REG3);
 8000eb8:	2122      	movs	r1, #34	; 0x22
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fde4 	bl	8000a88 <read8>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	73fb      	strb	r3, [r7, #15]

	// clear byte
	tmp &= 0x3B;  // 0b00XXX0XX
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	f003 033b 	and.w	r3, r3, #59	; 0x3b
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	73fb      	strb	r3, [r7, #15]

	// Enable DRDY pin
	tmp |= 0x04;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	73fb      	strb	r3, [r7, #15]

	// Set output type 0 - push pull, 1 - open drain
	if(PP_OD == OPEN_DRAIN)
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d104      	bne.n	8000ee8 <HTS221_DRDY_Enable+0x40>
	{
		tmp |= 0x40;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	73fb      	strb	r3, [r7, #15]
	}

	if(DRDY_H_L == ACTIVE_LOW)
 8000ee8:	78bb      	ldrb	r3, [r7, #2]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d104      	bne.n	8000ef8 <HTS221_DRDY_Enable+0x50>
	{
		tmp |= 0x80;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	73fb      	strb	r3, [r7, #15]
	}

	write8(sensor, CTRL_REG3, &tmp);
 8000ef8:	f107 030f 	add.w	r3, r7, #15
 8000efc:	461a      	mov	r2, r3
 8000efe:	2122      	movs	r1, #34	; 0x22
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fe05 	bl	8000b10 <write8>

}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 0310 	add.w	r3, r7, #16
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f24:	4b34      	ldr	r3, [pc, #208]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a33      	ldr	r2, [pc, #204]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f2a:	f043 0310 	orr.w	r3, r3, #16
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0310 	and.w	r3, r3, #16
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a2d      	ldr	r2, [pc, #180]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f42:	f043 0320 	orr.w	r3, r3, #32
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0320 	and.w	r3, r3, #32
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f72:	f043 0308 	orr.w	r3, r3, #8
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2120      	movs	r1, #32
 8000f88:	481c      	ldr	r0, [pc, #112]	; (8000ffc <MX_GPIO_Init+0xec>)
 8000f8a:	f000 fdff 	bl	8001b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <MX_GPIO_Init+0xf0>)
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4818      	ldr	r0, [pc, #96]	; (8001004 <MX_GPIO_Init+0xf4>)
 8000fa4:	f000 fc6e 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fa8:	2320      	movs	r3, #32
 8000faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480f      	ldr	r0, [pc, #60]	; (8000ffc <MX_GPIO_Init+0xec>)
 8000fc0:	f000 fc60 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HTS221_DRDY_Pin;
 8000fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_GPIO_Init+0xf8>)
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HTS221_DRDY_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4808      	ldr	r0, [pc, #32]	; (8000ffc <MX_GPIO_Init+0xec>)
 8000fda:	f000 fc53 	bl	8001884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2028      	movs	r0, #40	; 0x28
 8000fe4:	f000 fc17 	bl	8001816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fe8:	2028      	movs	r0, #40	; 0x28
 8000fea:	f000 fc30 	bl	800184e <HAL_NVIC_EnableIRQ>

}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010800 	.word	0x40010800
 8001000:	10110000 	.word	0x10110000
 8001004:	40011000 	.word	0x40011000
 8001008:	10210000 	.word	0x10210000

0800100c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_I2C1_Init+0x50>)
 8001012:	4a13      	ldr	r2, [pc, #76]	; (8001060 <MX_I2C1_Init+0x54>)
 8001014:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_I2C1_Init+0x50>)
 8001018:	4a12      	ldr	r2, [pc, #72]	; (8001064 <MX_I2C1_Init+0x58>)
 800101a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_I2C1_Init+0x50>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_I2C1_Init+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_I2C1_Init+0x50>)
 800102a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800102e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_I2C1_Init+0x50>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_I2C1_Init+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_I2C1_Init+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_I2C1_Init+0x50>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_I2C1_Init+0x50>)
 800104a:	f000 fdcf 	bl	8001bec <HAL_I2C_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001054:	f000 f8e6 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000204 	.word	0x20000204
 8001060:	40005400 	.word	0x40005400
 8001064:	000186a0 	.word	0x000186a0

08001068 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1d      	ldr	r2, [pc, #116]	; (80010f8 <HAL_I2C_MspInit+0x90>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d132      	bne.n	80010ee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_I2C_MspInit+0x94>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <HAL_I2C_MspInit+0x94>)
 800108e:	f043 0308 	orr.w	r3, r3, #8
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_I2C_MspInit+0x94>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a6:	2312      	movs	r3, #18
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4812      	ldr	r0, [pc, #72]	; (8001100 <HAL_I2C_MspInit+0x98>)
 80010b6:	f000 fbe5 	bl	8001884 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_I2C_MspInit+0x9c>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	f043 0302 	orr.w	r3, r3, #2
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
 80010d0:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <HAL_I2C_MspInit+0x9c>)
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_I2C_MspInit+0x94>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_I2C_MspInit+0x94>)
 80010dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_I2C_MspInit+0x94>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	; 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40005400 	.word	0x40005400
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010c00 	.word	0x40010c00
 8001104:	40010000 	.word	0x40010000

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110c:	f000 fa4a 	bl	80015a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001110:	f000 f832 	bl	8001178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001114:	f7ff fefc 	bl	8000f10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001118:	f000 f9b6 	bl	8001488 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800111c:	f7ff ff76 	bl	800100c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HTS221_Init(&HTS221, &hi2c1, DEV_ADDR);
 8001120:	225f      	movs	r2, #95	; 0x5f
 8001122:	4910      	ldr	r1, [pc, #64]	; (8001164 <main+0x5c>)
 8001124:	4810      	ldr	r0, [pc, #64]	; (8001168 <main+0x60>)
 8001126:	f7ff fdb9 	bl	8000c9c <HTS221_Init>
  HTS221_DRDY_Enable(&HTS221, OPEN_DRAIN, ACTIVE_LOW);
 800112a:	2201      	movs	r2, #1
 800112c:	2101      	movs	r1, #1
 800112e:	480e      	ldr	r0, [pc, #56]	; (8001168 <main+0x60>)
 8001130:	f7ff feba 	bl	8000ea8 <HTS221_DRDY_Enable>
  HTS221_set_output_data_rate(&HTS221, Hz_1);
 8001134:	2101      	movs	r1, #1
 8001136:	480c      	ldr	r0, [pc, #48]	; (8001168 <main+0x60>)
 8001138:	f7ff fd2e 	bl	8000b98 <HTS221_set_output_data_rate>

  HTS221_get_data(&HTS221, &temp, &humidity);
 800113c:	4a0b      	ldr	r2, [pc, #44]	; (800116c <main+0x64>)
 800113e:	490c      	ldr	r1, [pc, #48]	; (8001170 <main+0x68>)
 8001140:	4809      	ldr	r0, [pc, #36]	; (8001168 <main+0x60>)
 8001142:	f7ff fe54 	bl	8000dee <HTS221_get_data>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(DATA_READY_FLAG == 1)
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <main+0x6c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b01      	cmp	r3, #1
 800114e:	d1fa      	bne.n	8001146 <main+0x3e>
	  {
		HTS221_get_data(&HTS221, &temp, &humidity);
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <main+0x64>)
 8001152:	4907      	ldr	r1, [pc, #28]	; (8001170 <main+0x68>)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <main+0x60>)
 8001156:	f7ff fe4a 	bl	8000dee <HTS221_get_data>
		DATA_READY_FLAG = 0;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <main+0x6c>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
	  if(DATA_READY_FLAG == 1)
 8001160:	e7f1      	b.n	8001146 <main+0x3e>
 8001162:	bf00      	nop
 8001164:	20000204 	.word	0x20000204
 8001168:	20000260 	.word	0x20000260
 800116c:	2000025c 	.word	0x2000025c
 8001170:	2000025a 	.word	0x2000025a
 8001174:	20000258 	.word	0x20000258

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b090      	sub	sp, #64	; 0x40
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	2228      	movs	r2, #40	; 0x28
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f002 fa50 	bl	800362c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119e:	2301      	movs	r3, #1
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a2:	2310      	movs	r3, #16
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a6:	2302      	movs	r3, #2
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011aa:	2300      	movs	r3, #0
 80011ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011ae:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 0318 	add.w	r3, r7, #24
 80011b8:	4618      	mov	r0, r3
 80011ba:	f001 fd17 	bl	8002bec <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80011c4:	f000 f82e 	bl	8001224 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	230f      	movs	r3, #15
 80011ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2302      	movs	r3, #2
 80011ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2102      	movs	r1, #2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 ff82 	bl	80030ec <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80011ee:	f000 f819 	bl	8001224 <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3740      	adds	r7, #64	; 0x40
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == HTS221_DRDY_Pin)
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800120c:	d102      	bne.n	8001214 <HAL_GPIO_EXTI_Callback+0x18>
	{
		DATA_READY_FLAG = 1;
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <HAL_GPIO_EXTI_Callback+0x24>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
	}

}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000258 	.word	0x20000258

08001224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001228:	b672      	cpsid	i
}
 800122a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800122c:	e7fe      	b.n	800122c <Error_Handler+0x8>
	...

08001230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_MspInit+0x5c>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	4a14      	ldr	r2, [pc, #80]	; (800128c <HAL_MspInit+0x5c>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6193      	str	r3, [r2, #24]
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_MspInit+0x5c>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <HAL_MspInit+0x5c>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	4a0e      	ldr	r2, [pc, #56]	; (800128c <HAL_MspInit+0x5c>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001258:	61d3      	str	r3, [r2, #28]
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <HAL_MspInit+0x5c>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_MspInit+0x60>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <HAL_MspInit+0x60>)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	40021000 	.word	0x40021000
 8001290:	40010000 	.word	0x40010000

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <NMI_Handler+0x4>

0800129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler+0x4>

080012a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr

080012ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012da:	f000 f9a9 	bl	8001630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80012e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012ea:	f000 fc67 	bl	8001bbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012ee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012f2:	f000 fc63 	bl	8001bbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
	return 1;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <_kill>:

int _kill(int pid, int sig)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001312:	f002 f961 	bl	80035d8 <__errno>
 8001316:	4603      	mov	r3, r0
 8001318:	2216      	movs	r2, #22
 800131a:	601a      	str	r2, [r3, #0]
	return -1;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_exit>:

void _exit (int status)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ffe7 	bl	8001308 <_kill>
	while (1) {}		/* Make sure we hang here */
 800133a:	e7fe      	b.n	800133a <_exit+0x12>

0800133c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	e00a      	b.n	8001364 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800134e:	f3af 8000 	nop.w
 8001352:	4601      	mov	r1, r0
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	60ba      	str	r2, [r7, #8]
 800135a:	b2ca      	uxtb	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3301      	adds	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	429a      	cmp	r2, r3
 800136a:	dbf0      	blt.n	800134e <_read+0x12>
	}

return len;
 800136c:	687b      	ldr	r3, [r7, #4]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	e009      	b.n	800139c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	60ba      	str	r2, [r7, #8]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dbf1      	blt.n	8001388 <_write+0x12>
	}
	return len;
 80013a4:	687b      	ldr	r3, [r7, #4]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_close>:

int _close(int file)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
	return -1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d4:	605a      	str	r2, [r3, #4]
	return 0;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <_isatty>:

int _isatty(int file)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
	return 1;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b085      	sub	sp, #20
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
	return 0;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
	...

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f002 f8ca 	bl	80035d8 <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20005000 	.word	0x20005000
 8001470:	00000400 	.word	0x00000400
 8001474:	200001f8 	.word	0x200001f8
 8001478:	200002d8 	.word	0x200002d8

0800147c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_USART2_UART_Init+0x50>)
 8001490:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 8001494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001498:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014c0:	f001 ffae 	bl	8003420 <HAL_UART_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ca:	f7ff feab 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000280 	.word	0x20000280
 80014d8:	40004400 	.word	0x40004400

080014dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a15      	ldr	r2, [pc, #84]	; (800154c <HAL_UART_MspInit+0x70>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d123      	bne.n	8001544 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_UART_MspInit+0x74>)
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	4a13      	ldr	r2, [pc, #76]	; (8001550 <HAL_UART_MspInit+0x74>)
 8001502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001506:	61d3      	str	r3, [r2, #28]
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_UART_MspInit+0x74>)
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_UART_MspInit+0x74>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <HAL_UART_MspInit+0x74>)
 800151a:	f043 0304 	orr.w	r3, r3, #4
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_UART_MspInit+0x74>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800152c:	230c      	movs	r3, #12
 800152e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2302      	movs	r3, #2
 8001536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	4619      	mov	r1, r3
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <HAL_UART_MspInit+0x78>)
 8001540:	f000 f9a0 	bl	8001884 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001544:	bf00      	nop
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40004400 	.word	0x40004400
 8001550:	40021000 	.word	0x40021000
 8001554:	40010800 	.word	0x40010800

08001558 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800155a:	490d      	ldr	r1, [pc, #52]	; (8001590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001570:	4c0a      	ldr	r4, [pc, #40]	; (800159c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800157e:	f7ff ff7d 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001582:	f002 f82f 	bl	80035e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001586:	f7ff fdbf 	bl	8001108 <main>
  bx lr
 800158a:	4770      	bx	lr
  ldr r0, =_sdata
 800158c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001590:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001594:	08006414 	.word	0x08006414
  ldr r2, =_sbss
 8001598:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800159c:	200002d8 	.word	0x200002d8

080015a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC1_2_IRQHandler>
	...

080015a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_Init+0x28>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a07      	ldr	r2, [pc, #28]	; (80015cc <HAL_Init+0x28>)
 80015ae:	f043 0310 	orr.w	r3, r3, #16
 80015b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f000 f923 	bl	8001800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ba:	2000      	movs	r0, #0
 80015bc:	f000 f808 	bl	80015d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c0:	f7ff fe36 	bl	8001230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40022000 	.word	0x40022000

080015d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_InitTick+0x54>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x58>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f93b 	bl	800186a <HAL_SYSTICK_Config>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00e      	b.n	800161c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d80a      	bhi.n	800161a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f000 f903 	bl	8001816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <HAL_InitTick+0x5c>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000000 	.word	0x20000000
 8001628:	20000008 	.word	0x20000008
 800162c:	20000004 	.word	0x20000004

08001630 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_IncTick+0x1c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_IncTick+0x20>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4413      	add	r3, r2
 8001640:	4a03      	ldr	r2, [pc, #12]	; (8001650 <HAL_IncTick+0x20>)
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	20000008 	.word	0x20000008
 8001650:	200002c4 	.word	0x200002c4

08001654 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b02      	ldr	r3, [pc, #8]	; (8001664 <HAL_GetTick+0x10>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	200002c4 	.word	0x200002c4

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4906      	ldr	r1, [pc, #24]	; (8001700 <__NVIC_EnableIRQ+0x34>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	e000e100 	.word	0xe000e100

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	; (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
         );
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017cc:	d301      	bcc.n	80017d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00f      	b.n	80017f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <SysTick_Config+0x40>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017da:	210f      	movs	r1, #15
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f7ff ff90 	bl	8001704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <SysTick_Config+0x40>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <SysTick_Config+0x40>)
 80017ec:	2207      	movs	r2, #7
 80017ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	e000e010 	.word	0xe000e010

08001800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff2d 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001828:	f7ff ff42 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 800182c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	6978      	ldr	r0, [r7, #20]
 8001834:	f7ff ff90 	bl	8001758 <NVIC_EncodePriority>
 8001838:	4602      	mov	r2, r0
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff5f 	bl	8001704 <__NVIC_SetPriority>
}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff35 	bl	80016cc <__NVIC_EnableIRQ>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffa2 	bl	80017bc <SysTick_Config>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b08b      	sub	sp, #44	; 0x2c
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001896:	e169      	b.n	8001b6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001898:	2201      	movs	r2, #1
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	f040 8158 	bne.w	8001b66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4a9a      	ldr	r2, [pc, #616]	; (8001b24 <HAL_GPIO_Init+0x2a0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d05e      	beq.n	800197e <HAL_GPIO_Init+0xfa>
 80018c0:	4a98      	ldr	r2, [pc, #608]	; (8001b24 <HAL_GPIO_Init+0x2a0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d875      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018c6:	4a98      	ldr	r2, [pc, #608]	; (8001b28 <HAL_GPIO_Init+0x2a4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d058      	beq.n	800197e <HAL_GPIO_Init+0xfa>
 80018cc:	4a96      	ldr	r2, [pc, #600]	; (8001b28 <HAL_GPIO_Init+0x2a4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d86f      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018d2:	4a96      	ldr	r2, [pc, #600]	; (8001b2c <HAL_GPIO_Init+0x2a8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d052      	beq.n	800197e <HAL_GPIO_Init+0xfa>
 80018d8:	4a94      	ldr	r2, [pc, #592]	; (8001b2c <HAL_GPIO_Init+0x2a8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d869      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018de:	4a94      	ldr	r2, [pc, #592]	; (8001b30 <HAL_GPIO_Init+0x2ac>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d04c      	beq.n	800197e <HAL_GPIO_Init+0xfa>
 80018e4:	4a92      	ldr	r2, [pc, #584]	; (8001b30 <HAL_GPIO_Init+0x2ac>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d863      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018ea:	4a92      	ldr	r2, [pc, #584]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d046      	beq.n	800197e <HAL_GPIO_Init+0xfa>
 80018f0:	4a90      	ldr	r2, [pc, #576]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d85d      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018f6:	2b12      	cmp	r3, #18
 80018f8:	d82a      	bhi.n	8001950 <HAL_GPIO_Init+0xcc>
 80018fa:	2b12      	cmp	r3, #18
 80018fc:	d859      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018fe:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <HAL_GPIO_Init+0x80>)
 8001900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001904:	0800197f 	.word	0x0800197f
 8001908:	08001959 	.word	0x08001959
 800190c:	0800196b 	.word	0x0800196b
 8001910:	080019ad 	.word	0x080019ad
 8001914:	080019b3 	.word	0x080019b3
 8001918:	080019b3 	.word	0x080019b3
 800191c:	080019b3 	.word	0x080019b3
 8001920:	080019b3 	.word	0x080019b3
 8001924:	080019b3 	.word	0x080019b3
 8001928:	080019b3 	.word	0x080019b3
 800192c:	080019b3 	.word	0x080019b3
 8001930:	080019b3 	.word	0x080019b3
 8001934:	080019b3 	.word	0x080019b3
 8001938:	080019b3 	.word	0x080019b3
 800193c:	080019b3 	.word	0x080019b3
 8001940:	080019b3 	.word	0x080019b3
 8001944:	080019b3 	.word	0x080019b3
 8001948:	08001961 	.word	0x08001961
 800194c:	08001975 	.word	0x08001975
 8001950:	4a79      	ldr	r2, [pc, #484]	; (8001b38 <HAL_GPIO_Init+0x2b4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d013      	beq.n	800197e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001956:	e02c      	b.n	80019b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	623b      	str	r3, [r7, #32]
          break;
 800195e:	e029      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	3304      	adds	r3, #4
 8001966:	623b      	str	r3, [r7, #32]
          break;
 8001968:	e024      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	3308      	adds	r3, #8
 8001970:	623b      	str	r3, [r7, #32]
          break;
 8001972:	e01f      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	330c      	adds	r3, #12
 800197a:	623b      	str	r3, [r7, #32]
          break;
 800197c:	e01a      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001986:	2304      	movs	r3, #4
 8001988:	623b      	str	r3, [r7, #32]
          break;
 800198a:	e013      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001994:	2308      	movs	r3, #8
 8001996:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	611a      	str	r2, [r3, #16]
          break;
 800199e:	e009      	b.n	80019b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a0:	2308      	movs	r3, #8
 80019a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	615a      	str	r2, [r3, #20]
          break;
 80019aa:	e003      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019ac:	2300      	movs	r3, #0
 80019ae:	623b      	str	r3, [r7, #32]
          break;
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          break;
 80019b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2bff      	cmp	r3, #255	; 0xff
 80019b8:	d801      	bhi.n	80019be <HAL_GPIO_Init+0x13a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	e001      	b.n	80019c2 <HAL_GPIO_Init+0x13e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3304      	adds	r3, #4
 80019c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2bff      	cmp	r3, #255	; 0xff
 80019c8:	d802      	bhi.n	80019d0 <HAL_GPIO_Init+0x14c>
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	e002      	b.n	80019d6 <HAL_GPIO_Init+0x152>
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	3b08      	subs	r3, #8
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	210f      	movs	r1, #15
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	401a      	ands	r2, r3
 80019e8:	6a39      	ldr	r1, [r7, #32]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	431a      	orrs	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 80b1 	beq.w	8001b66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a04:	4b4d      	ldr	r3, [pc, #308]	; (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a4c      	ldr	r2, [pc, #304]	; (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b4a      	ldr	r3, [pc, #296]	; (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a1c:	4a48      	ldr	r2, [pc, #288]	; (8001b40 <HAL_GPIO_Init+0x2bc>)
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	220f      	movs	r2, #15
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a40      	ldr	r2, [pc, #256]	; (8001b44 <HAL_GPIO_Init+0x2c0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d013      	beq.n	8001a70 <HAL_GPIO_Init+0x1ec>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a3f      	ldr	r2, [pc, #252]	; (8001b48 <HAL_GPIO_Init+0x2c4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d00d      	beq.n	8001a6c <HAL_GPIO_Init+0x1e8>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a3e      	ldr	r2, [pc, #248]	; (8001b4c <HAL_GPIO_Init+0x2c8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d007      	beq.n	8001a68 <HAL_GPIO_Init+0x1e4>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3d      	ldr	r2, [pc, #244]	; (8001b50 <HAL_GPIO_Init+0x2cc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d101      	bne.n	8001a64 <HAL_GPIO_Init+0x1e0>
 8001a60:	2303      	movs	r3, #3
 8001a62:	e006      	b.n	8001a72 <HAL_GPIO_Init+0x1ee>
 8001a64:	2304      	movs	r3, #4
 8001a66:	e004      	b.n	8001a72 <HAL_GPIO_Init+0x1ee>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e002      	b.n	8001a72 <HAL_GPIO_Init+0x1ee>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <HAL_GPIO_Init+0x1ee>
 8001a70:	2300      	movs	r3, #0
 8001a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a74:	f002 0203 	and.w	r2, r2, #3
 8001a78:	0092      	lsls	r2, r2, #2
 8001a7a:	4093      	lsls	r3, r2
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a82:	492f      	ldr	r1, [pc, #188]	; (8001b40 <HAL_GPIO_Init+0x2bc>)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	089b      	lsrs	r3, r3, #2
 8001a88:	3302      	adds	r3, #2
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a9c:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	492c      	ldr	r1, [pc, #176]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4928      	ldr	r1, [pc, #160]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ac4:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4922      	ldr	r1, [pc, #136]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	491e      	ldr	r1, [pc, #120]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d006      	beq.n	8001afa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	4918      	ldr	r1, [pc, #96]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]
 8001af8:	e006      	b.n	8001b08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	4914      	ldr	r1, [pc, #80]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d021      	beq.n	8001b58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	490e      	ldr	r1, [pc, #56]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	60cb      	str	r3, [r1, #12]
 8001b20:	e021      	b.n	8001b66 <HAL_GPIO_Init+0x2e2>
 8001b22:	bf00      	nop
 8001b24:	10320000 	.word	0x10320000
 8001b28:	10310000 	.word	0x10310000
 8001b2c:	10220000 	.word	0x10220000
 8001b30:	10210000 	.word	0x10210000
 8001b34:	10120000 	.word	0x10120000
 8001b38:	10110000 	.word	0x10110000
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010000 	.word	0x40010000
 8001b44:	40010800 	.word	0x40010800
 8001b48:	40010c00 	.word	0x40010c00
 8001b4c:	40011000 	.word	0x40011000
 8001b50:	40011400 	.word	0x40011400
 8001b54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_GPIO_Init+0x304>)
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	4909      	ldr	r1, [pc, #36]	; (8001b88 <HAL_GPIO_Init+0x304>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	3301      	adds	r3, #1
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	fa22 f303 	lsr.w	r3, r2, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f47f ae8e 	bne.w	8001898 <HAL_GPIO_Init+0x14>
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	372c      	adds	r7, #44	; 0x2c
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	40010400 	.word	0x40010400

08001b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b9c:	787b      	ldrb	r3, [r7, #1]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba8:	e003      	b.n	8001bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	041a      	lsls	r2, r3, #16
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	611a      	str	r2, [r3, #16]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc8:	695a      	ldr	r2, [r3, #20]
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d006      	beq.n	8001be0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bd2:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fb0e 	bl	80011fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40010400 	.word	0x40010400

08001bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e12b      	b.n	8001e56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fa28 	bl	8001068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2224      	movs	r2, #36	; 0x24
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c50:	f001 fba0 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8001c54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4a81      	ldr	r2, [pc, #516]	; (8001e60 <HAL_I2C_Init+0x274>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d807      	bhi.n	8001c70 <HAL_I2C_Init+0x84>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4a80      	ldr	r2, [pc, #512]	; (8001e64 <HAL_I2C_Init+0x278>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	bf94      	ite	ls
 8001c68:	2301      	movls	r3, #1
 8001c6a:	2300      	movhi	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	e006      	b.n	8001c7e <HAL_I2C_Init+0x92>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4a7d      	ldr	r2, [pc, #500]	; (8001e68 <HAL_I2C_Init+0x27c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	bf94      	ite	ls
 8001c78:	2301      	movls	r3, #1
 8001c7a:	2300      	movhi	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0e7      	b.n	8001e56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4a78      	ldr	r2, [pc, #480]	; (8001e6c <HAL_I2C_Init+0x280>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	0c9b      	lsrs	r3, r3, #18
 8001c90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4a6a      	ldr	r2, [pc, #424]	; (8001e60 <HAL_I2C_Init+0x274>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d802      	bhi.n	8001cc0 <HAL_I2C_Init+0xd4>
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	e009      	b.n	8001cd4 <HAL_I2C_Init+0xe8>
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cc6:	fb02 f303 	mul.w	r3, r2, r3
 8001cca:	4a69      	ldr	r2, [pc, #420]	; (8001e70 <HAL_I2C_Init+0x284>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	099b      	lsrs	r3, r3, #6
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ce6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	495c      	ldr	r1, [pc, #368]	; (8001e60 <HAL_I2C_Init+0x274>)
 8001cf0:	428b      	cmp	r3, r1
 8001cf2:	d819      	bhi.n	8001d28 <HAL_I2C_Init+0x13c>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1e59      	subs	r1, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d02:	1c59      	adds	r1, r3, #1
 8001d04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d08:	400b      	ands	r3, r1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00a      	beq.n	8001d24 <HAL_I2C_Init+0x138>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1e59      	subs	r1, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d22:	e051      	b.n	8001dc8 <HAL_I2C_Init+0x1dc>
 8001d24:	2304      	movs	r3, #4
 8001d26:	e04f      	b.n	8001dc8 <HAL_I2C_Init+0x1dc>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d111      	bne.n	8001d54 <HAL_I2C_Init+0x168>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1e58      	subs	r0, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	440b      	add	r3, r1
 8001d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	bf0c      	ite	eq
 8001d4c:	2301      	moveq	r3, #1
 8001d4e:	2300      	movne	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	e012      	b.n	8001d7a <HAL_I2C_Init+0x18e>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1e58      	subs	r0, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	0099      	lsls	r1, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_I2C_Init+0x196>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e022      	b.n	8001dc8 <HAL_I2C_Init+0x1dc>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10e      	bne.n	8001da8 <HAL_I2C_Init+0x1bc>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1e58      	subs	r0, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6859      	ldr	r1, [r3, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	440b      	add	r3, r1
 8001d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da6:	e00f      	b.n	8001dc8 <HAL_I2C_Init+0x1dc>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1e58      	subs	r0, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	0099      	lsls	r1, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	6809      	ldr	r1, [r1, #0]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69da      	ldr	r2, [r3, #28]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6911      	ldr	r1, [r2, #16]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68d2      	ldr	r2, [r2, #12]
 8001e02:	4311      	orrs	r1, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	000186a0 	.word	0x000186a0
 8001e64:	001e847f 	.word	0x001e847f
 8001e68:	003d08ff 	.word	0x003d08ff
 8001e6c:	431bde83 	.word	0x431bde83
 8001e70:	10624dd3 	.word	0x10624dd3

08001e74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	4608      	mov	r0, r1
 8001e7e:	4611      	mov	r1, r2
 8001e80:	461a      	mov	r2, r3
 8001e82:	4603      	mov	r3, r0
 8001e84:	817b      	strh	r3, [r7, #10]
 8001e86:	460b      	mov	r3, r1
 8001e88:	813b      	strh	r3, [r7, #8]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e8e:	f7ff fbe1 	bl	8001654 <HAL_GetTick>
 8001e92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b20      	cmp	r3, #32
 8001e9e:	f040 80d9 	bne.w	8002054 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	2319      	movs	r3, #25
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	496d      	ldr	r1, [pc, #436]	; (8002060 <HAL_I2C_Mem_Write+0x1ec>)
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 fcc1 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e0cc      	b.n	8002056 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_I2C_Mem_Write+0x56>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e0c5      	b.n	8002056 <HAL_I2C_Mem_Write+0x1e2>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d007      	beq.n	8001ef0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2221      	movs	r2, #33	; 0x21
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2240      	movs	r2, #64	; 0x40
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a3a      	ldr	r2, [r7, #32]
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4a4d      	ldr	r2, [pc, #308]	; (8002064 <HAL_I2C_Mem_Write+0x1f0>)
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f32:	88f8      	ldrh	r0, [r7, #6]
 8001f34:	893a      	ldrh	r2, [r7, #8]
 8001f36:	8979      	ldrh	r1, [r7, #10]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	4603      	mov	r3, r0
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 faf8 	bl	8002538 <I2C_RequestMemoryWrite>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d052      	beq.n	8001ff4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e081      	b.n	8002056 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 fd42 	bl	80029e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00d      	beq.n	8001f7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d107      	bne.n	8001f7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e06b      	b.n	8002056 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	781a      	ldrb	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d11b      	bne.n	8001ff4 <HAL_I2C_Mem_Write+0x180>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d017      	beq.n	8001ff4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1aa      	bne.n	8001f52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 fd2e 	bl	8002a62 <I2C_WaitOnBTFFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00d      	beq.n	8002028 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	2b04      	cmp	r3, #4
 8002012:	d107      	bne.n	8002024 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002022:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e016      	b.n	8002056 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	e000      	b.n	8002056 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002054:	2302      	movs	r3, #2
  }
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	00100002 	.word	0x00100002
 8002064:	ffff0000 	.word	0xffff0000

08002068 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08c      	sub	sp, #48	; 0x30
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	4608      	mov	r0, r1
 8002072:	4611      	mov	r1, r2
 8002074:	461a      	mov	r2, r3
 8002076:	4603      	mov	r3, r0
 8002078:	817b      	strh	r3, [r7, #10]
 800207a:	460b      	mov	r3, r1
 800207c:	813b      	strh	r3, [r7, #8]
 800207e:	4613      	mov	r3, r2
 8002080:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002086:	f7ff fae5 	bl	8001654 <HAL_GetTick>
 800208a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b20      	cmp	r3, #32
 8002096:	f040 8244 	bne.w	8002522 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2319      	movs	r3, #25
 80020a0:	2201      	movs	r2, #1
 80020a2:	4982      	ldr	r1, [pc, #520]	; (80022ac <HAL_I2C_Mem_Read+0x244>)
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 fbc5 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80020b0:	2302      	movs	r3, #2
 80020b2:	e237      	b.n	8002524 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_I2C_Mem_Read+0x5a>
 80020be:	2302      	movs	r3, #2
 80020c0:	e230      	b.n	8002524 <HAL_I2C_Mem_Read+0x4bc>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d007      	beq.n	80020e8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2222      	movs	r2, #34	; 0x22
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2240      	movs	r2, #64	; 0x40
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002118:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4a62      	ldr	r2, [pc, #392]	; (80022b0 <HAL_I2C_Mem_Read+0x248>)
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800212a:	88f8      	ldrh	r0, [r7, #6]
 800212c:	893a      	ldrh	r2, [r7, #8]
 800212e:	8979      	ldrh	r1, [r7, #10]
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	4603      	mov	r3, r0
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 fa92 	bl	8002664 <I2C_RequestMemoryRead>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e1ec      	b.n	8002524 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214e:	2b00      	cmp	r3, #0
 8002150:	d113      	bne.n	800217a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e1c0      	b.n	80024fc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217e:	2b01      	cmp	r3, #1
 8002180:	d11e      	bne.n	80021c0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002190:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002192:	b672      	cpsid	i
}
 8002194:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	61bb      	str	r3, [r7, #24]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	61bb      	str	r3, [r7, #24]
 80021aa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021bc:	b662      	cpsie	i
}
 80021be:	e035      	b.n	800222c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d11e      	bne.n	8002206 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021d8:	b672      	cpsid	i
}
 80021da:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002200:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002202:	b662      	cpsie	i
}
 8002204:	e012      	b.n	800222c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002214:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800222c:	e166      	b.n	80024fc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	2b03      	cmp	r3, #3
 8002234:	f200 811f 	bhi.w	8002476 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	2b01      	cmp	r3, #1
 800223e:	d123      	bne.n	8002288 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002242:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 fc4d 	bl	8002ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e167      	b.n	8002524 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002286:	e139      	b.n	80024fc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	2b02      	cmp	r3, #2
 800228e:	d152      	bne.n	8002336 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002296:	2200      	movs	r2, #0
 8002298:	4906      	ldr	r1, [pc, #24]	; (80022b4 <HAL_I2C_Mem_Read+0x24c>)
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 faca 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d008      	beq.n	80022b8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e13c      	b.n	8002524 <HAL_I2C_Mem_Read+0x4bc>
 80022aa:	bf00      	nop
 80022ac:	00100002 	.word	0x00100002
 80022b0:	ffff0000 	.word	0xffff0000
 80022b4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80022b8:	b672      	cpsid	i
}
 80022ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022fe:	b662      	cpsie	i
}
 8002300:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002334:	e0e2      	b.n	80024fc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233c:	2200      	movs	r2, #0
 800233e:	497b      	ldr	r1, [pc, #492]	; (800252c <HAL_I2C_Mem_Read+0x4c4>)
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 fa77 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0e9      	b.n	8002524 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
}
 8002362:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002396:	4b66      	ldr	r3, [pc, #408]	; (8002530 <HAL_I2C_Mem_Read+0x4c8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	08db      	lsrs	r3, r3, #3
 800239c:	4a65      	ldr	r2, [pc, #404]	; (8002534 <HAL_I2C_Mem_Read+0x4cc>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	0a1a      	lsrs	r2, r3, #8
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	00da      	lsls	r2, r3, #3
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d118      	bne.n	80023ee <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2220      	movs	r2, #32
 80023c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f043 0220 	orr.w	r2, r3, #32
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80023de:	b662      	cpsie	i
}
 80023e0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e09a      	b.n	8002524 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d1d9      	bne.n	80023b0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800243e:	b662      	cpsie	i
}
 8002440:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002474:	e042      	b.n	80024fc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002478:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 fb32 	bl	8002ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e04c      	b.n	8002524 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d118      	bne.n	80024fc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002500:	2b00      	cmp	r3, #0
 8002502:	f47f ae94 	bne.w	800222e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e000      	b.n	8002524 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002522:	2302      	movs	r3, #2
  }
}
 8002524:	4618      	mov	r0, r3
 8002526:	3728      	adds	r7, #40	; 0x28
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	00010004 	.word	0x00010004
 8002530:	20000000 	.word	0x20000000
 8002534:	14f8b589 	.word	0x14f8b589

08002538 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	4608      	mov	r0, r1
 8002542:	4611      	mov	r1, r2
 8002544:	461a      	mov	r2, r3
 8002546:	4603      	mov	r3, r0
 8002548:	817b      	strh	r3, [r7, #10]
 800254a:	460b      	mov	r3, r1
 800254c:	813b      	strh	r3, [r7, #8]
 800254e:	4613      	mov	r3, r2
 8002550:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002560:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	2200      	movs	r2, #0
 800256a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f960 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00d      	beq.n	8002596 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002588:	d103      	bne.n	8002592 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e05f      	b.n	8002656 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002596:	897b      	ldrh	r3, [r7, #10]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	6a3a      	ldr	r2, [r7, #32]
 80025aa:	492d      	ldr	r1, [pc, #180]	; (8002660 <I2C_RequestMemoryWrite+0x128>)
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f998 	bl	80028e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e04c      	b.n	8002656 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d4:	6a39      	ldr	r1, [r7, #32]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fa02 	bl	80029e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00d      	beq.n	80025fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d107      	bne.n	80025fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e02b      	b.n	8002656 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d105      	bne.n	8002610 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002604:	893b      	ldrh	r3, [r7, #8]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	611a      	str	r2, [r3, #16]
 800260e:	e021      	b.n	8002654 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002610:	893b      	ldrh	r3, [r7, #8]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	b29b      	uxth	r3, r3
 8002616:	b2da      	uxtb	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800261e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002620:	6a39      	ldr	r1, [r7, #32]
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f9dc 	bl	80029e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00d      	beq.n	800264a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	2b04      	cmp	r3, #4
 8002634:	d107      	bne.n	8002646 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002644:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e005      	b.n	8002656 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800264a:	893b      	ldrh	r3, [r7, #8]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	00010002 	.word	0x00010002

08002664 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af02      	add	r7, sp, #8
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	4608      	mov	r0, r1
 800266e:	4611      	mov	r1, r2
 8002670:	461a      	mov	r2, r3
 8002672:	4603      	mov	r3, r0
 8002674:	817b      	strh	r3, [r7, #10]
 8002676:	460b      	mov	r3, r1
 8002678:	813b      	strh	r3, [r7, #8]
 800267a:	4613      	mov	r3, r2
 800267c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800268c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800269c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f8c2 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00d      	beq.n	80026d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c4:	d103      	bne.n	80026ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e0aa      	b.n	8002828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026d2:	897b      	ldrh	r3, [r7, #10]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	6a3a      	ldr	r2, [r7, #32]
 80026e6:	4952      	ldr	r1, [pc, #328]	; (8002830 <I2C_RequestMemoryRead+0x1cc>)
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f8fa 	bl	80028e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e097      	b.n	8002828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800270e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002710:	6a39      	ldr	r1, [r7, #32]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f964 	bl	80029e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00d      	beq.n	800273a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2b04      	cmp	r3, #4
 8002724:	d107      	bne.n	8002736 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002734:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e076      	b.n	8002828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d105      	bne.n	800274c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002740:	893b      	ldrh	r3, [r7, #8]
 8002742:	b2da      	uxtb	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	611a      	str	r2, [r3, #16]
 800274a:	e021      	b.n	8002790 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800274c:	893b      	ldrh	r3, [r7, #8]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	b29b      	uxth	r3, r3
 8002752:	b2da      	uxtb	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800275a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275c:	6a39      	ldr	r1, [r7, #32]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f93e 	bl	80029e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00d      	beq.n	8002786 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	2b04      	cmp	r3, #4
 8002770:	d107      	bne.n	8002782 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002780:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e050      	b.n	8002828 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002786:	893b      	ldrh	r3, [r7, #8]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002792:	6a39      	ldr	r1, [r7, #32]
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f923 	bl	80029e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00d      	beq.n	80027bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d107      	bne.n	80027b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e035      	b.n	8002828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f82b 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00d      	beq.n	8002800 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f2:	d103      	bne.n	80027fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e013      	b.n	8002828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002800:	897b      	ldrh	r3, [r7, #10]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	b2da      	uxtb	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	6a3a      	ldr	r2, [r7, #32]
 8002814:	4906      	ldr	r1, [pc, #24]	; (8002830 <I2C_RequestMemoryRead+0x1cc>)
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f863 	bl	80028e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	00010002 	.word	0x00010002

08002834 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002844:	e025      	b.n	8002892 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284c:	d021      	beq.n	8002892 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284e:	f7fe ff01 	bl	8001654 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d302      	bcc.n	8002864 <I2C_WaitOnFlagUntilTimeout+0x30>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d116      	bne.n	8002892 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2220      	movs	r2, #32
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f043 0220 	orr.w	r2, r3, #32
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e023      	b.n	80028da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	0c1b      	lsrs	r3, r3, #16
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d10d      	bne.n	80028b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	43da      	mvns	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4013      	ands	r3, r2
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	bf0c      	ite	eq
 80028ae:	2301      	moveq	r3, #1
 80028b0:	2300      	movne	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	e00c      	b.n	80028d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4013      	ands	r3, r2
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bf0c      	ite	eq
 80028ca:	2301      	moveq	r3, #1
 80028cc:	2300      	movne	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d0b6      	beq.n	8002846 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028f0:	e051      	b.n	8002996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002900:	d123      	bne.n	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002910:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800291a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f043 0204 	orr.w	r2, r3, #4
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e046      	b.n	80029d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d021      	beq.n	8002996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002952:	f7fe fe7f 	bl	8001654 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	429a      	cmp	r2, r3
 8002960:	d302      	bcc.n	8002968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d116      	bne.n	8002996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f043 0220 	orr.w	r2, r3, #32
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e020      	b.n	80029d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d10c      	bne.n	80029ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	43da      	mvns	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4013      	ands	r3, r2
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	bf14      	ite	ne
 80029b2:	2301      	movne	r3, #1
 80029b4:	2300      	moveq	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	e00b      	b.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	43da      	mvns	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4013      	ands	r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf14      	ite	ne
 80029cc:	2301      	movne	r3, #1
 80029ce:	2300      	moveq	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d18d      	bne.n	80028f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029ec:	e02d      	b.n	8002a4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f8ce 	bl	8002b90 <I2C_IsAcknowledgeFailed>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e02d      	b.n	8002a5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d021      	beq.n	8002a4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a06:	f7fe fe25 	bl	8001654 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d302      	bcc.n	8002a1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d116      	bne.n	8002a4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f043 0220 	orr.w	r2, r3, #32
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e007      	b.n	8002a5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a54:	2b80      	cmp	r3, #128	; 0x80
 8002a56:	d1ca      	bne.n	80029ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a6e:	e02d      	b.n	8002acc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f88d 	bl	8002b90 <I2C_IsAcknowledgeFailed>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e02d      	b.n	8002adc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a86:	d021      	beq.n	8002acc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a88:	f7fe fde4 	bl	8001654 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d302      	bcc.n	8002a9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d116      	bne.n	8002acc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e007      	b.n	8002adc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d1ca      	bne.n	8002a70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002af0:	e042      	b.n	8002b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	d119      	bne.n	8002b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0210 	mvn.w	r2, #16
 8002b08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e029      	b.n	8002b88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b34:	f7fe fd8e 	bl	8001654 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d302      	bcc.n	8002b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d116      	bne.n	8002b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f043 0220 	orr.w	r2, r3, #32
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e007      	b.n	8002b88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b82:	2b40      	cmp	r3, #64	; 0x40
 8002b84:	d1b5      	bne.n	8002af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba6:	d11b      	bne.n	8002be0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f043 0204 	orr.w	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e26c      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8087 	beq.w	8002d1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c0c:	4b92      	ldr	r3, [pc, #584]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d00c      	beq.n	8002c32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c18:	4b8f      	ldr	r3, [pc, #572]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d112      	bne.n	8002c4a <HAL_RCC_OscConfig+0x5e>
 8002c24:	4b8c      	ldr	r3, [pc, #560]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c30:	d10b      	bne.n	8002c4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c32:	4b89      	ldr	r3, [pc, #548]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d06c      	beq.n	8002d18 <HAL_RCC_OscConfig+0x12c>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d168      	bne.n	8002d18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e246      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_OscConfig+0x76>
 8002c54:	4b80      	ldr	r3, [pc, #512]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a7f      	ldr	r2, [pc, #508]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	e02e      	b.n	8002cc0 <HAL_RCC_OscConfig+0xd4>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x98>
 8002c6a:	4b7b      	ldr	r3, [pc, #492]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a7a      	ldr	r2, [pc, #488]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b78      	ldr	r3, [pc, #480]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a77      	ldr	r2, [pc, #476]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e01d      	b.n	8002cc0 <HAL_RCC_OscConfig+0xd4>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xbc>
 8002c8e:	4b72      	ldr	r3, [pc, #456]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a71      	ldr	r2, [pc, #452]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	4b6f      	ldr	r3, [pc, #444]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6e      	ldr	r2, [pc, #440]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCC_OscConfig+0xd4>
 8002ca8:	4b6b      	ldr	r3, [pc, #428]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a6a      	ldr	r2, [pc, #424]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b68      	ldr	r3, [pc, #416]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a67      	ldr	r2, [pc, #412]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d013      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fcc4 	bl	8001654 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7fe fcc0 	bl	8001654 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	; 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e1fa      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b5d      	ldr	r3, [pc, #372]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0xe4>
 8002cee:	e014      	b.n	8002d1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fcb0 	bl	8001654 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fcac 	bl	8001654 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1e6      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0a:	4b53      	ldr	r3, [pc, #332]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x10c>
 8002d16:	e000      	b.n	8002d1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d063      	beq.n	8002dee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d26:	4b4c      	ldr	r3, [pc, #304]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d32:	4b49      	ldr	r3, [pc, #292]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d11c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x18c>
 8002d3e:	4b46      	ldr	r3, [pc, #280]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d116      	bne.n	8002d78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4a:	4b43      	ldr	r3, [pc, #268]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_RCC_OscConfig+0x176>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e1ba      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d62:	4b3d      	ldr	r3, [pc, #244]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4939      	ldr	r1, [pc, #228]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	e03a      	b.n	8002dee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d80:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fe fc65 	bl	8001654 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8e:	f7fe fc61 	bl	8001654 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e19b      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dac:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4927      	ldr	r1, [pc, #156]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	e015      	b.n	8002dee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc2:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fc44 	bl	8001654 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fc40 	bl	8001654 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e17a      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d03a      	beq.n	8002e70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d019      	beq.n	8002e36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e08:	f7fe fc24 	bl	8001654 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e10:	f7fe fc20 	bl	8001654 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e15a      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f000 fad8 	bl	80033e4 <RCC_Delay>
 8002e34:	e01c      	b.n	8002e70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3c:	f7fe fc0a 	bl	8001654 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e42:	e00f      	b.n	8002e64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e44:	f7fe fc06 	bl	8001654 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d908      	bls.n	8002e64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e140      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	42420000 	.word	0x42420000
 8002e60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e64:	4b9e      	ldr	r3, [pc, #632]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e9      	bne.n	8002e44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80a6 	beq.w	8002fca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e82:	4b97      	ldr	r3, [pc, #604]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10d      	bne.n	8002eaa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	4b94      	ldr	r3, [pc, #592]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	4a93      	ldr	r2, [pc, #588]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e98:	61d3      	str	r3, [r2, #28]
 8002e9a:	4b91      	ldr	r3, [pc, #580]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	4b8e      	ldr	r3, [pc, #568]	; (80030e4 <HAL_RCC_OscConfig+0x4f8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d118      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb6:	4b8b      	ldr	r3, [pc, #556]	; (80030e4 <HAL_RCC_OscConfig+0x4f8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a8a      	ldr	r2, [pc, #552]	; (80030e4 <HAL_RCC_OscConfig+0x4f8>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe fbc7 	bl	8001654 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eca:	f7fe fbc3 	bl	8001654 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b64      	cmp	r3, #100	; 0x64
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0fd      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002edc:	4b81      	ldr	r3, [pc, #516]	; (80030e4 <HAL_RCC_OscConfig+0x4f8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x312>
 8002ef0:	4b7b      	ldr	r3, [pc, #492]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a7a      	ldr	r2, [pc, #488]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6213      	str	r3, [r2, #32]
 8002efc:	e02d      	b.n	8002f5a <HAL_RCC_OscConfig+0x36e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x334>
 8002f06:	4b76      	ldr	r3, [pc, #472]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4a75      	ldr	r2, [pc, #468]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	6213      	str	r3, [r2, #32]
 8002f12:	4b73      	ldr	r3, [pc, #460]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4a72      	ldr	r2, [pc, #456]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	6213      	str	r3, [r2, #32]
 8002f1e:	e01c      	b.n	8002f5a <HAL_RCC_OscConfig+0x36e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	d10c      	bne.n	8002f42 <HAL_RCC_OscConfig+0x356>
 8002f28:	4b6d      	ldr	r3, [pc, #436]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	4a6c      	ldr	r2, [pc, #432]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f2e:	f043 0304 	orr.w	r3, r3, #4
 8002f32:	6213      	str	r3, [r2, #32]
 8002f34:	4b6a      	ldr	r3, [pc, #424]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4a69      	ldr	r2, [pc, #420]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6213      	str	r3, [r2, #32]
 8002f40:	e00b      	b.n	8002f5a <HAL_RCC_OscConfig+0x36e>
 8002f42:	4b67      	ldr	r3, [pc, #412]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	4a66      	ldr	r2, [pc, #408]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f48:	f023 0301 	bic.w	r3, r3, #1
 8002f4c:	6213      	str	r3, [r2, #32]
 8002f4e:	4b64      	ldr	r3, [pc, #400]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	4a63      	ldr	r2, [pc, #396]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f54:	f023 0304 	bic.w	r3, r3, #4
 8002f58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d015      	beq.n	8002f8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f62:	f7fe fb77 	bl	8001654 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fe fb73 	bl	8001654 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e0ab      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f80:	4b57      	ldr	r3, [pc, #348]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ee      	beq.n	8002f6a <HAL_RCC_OscConfig+0x37e>
 8002f8c:	e014      	b.n	8002fb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8e:	f7fe fb61 	bl	8001654 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fe fb5d 	bl	8001654 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e095      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fac:	4b4c      	ldr	r3, [pc, #304]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1ee      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d105      	bne.n	8002fca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fbe:	4b48      	ldr	r3, [pc, #288]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	4a47      	ldr	r2, [pc, #284]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8081 	beq.w	80030d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd4:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d061      	beq.n	80030a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d146      	bne.n	8003076 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe8:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <HAL_RCC_OscConfig+0x4fc>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fe fb31 	bl	8001654 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fe fb2d 	bl	8001654 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e067      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003008:	4b35      	ldr	r3, [pc, #212]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f0      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301c:	d108      	bne.n	8003030 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800301e:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	492d      	ldr	r1, [pc, #180]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003030:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a19      	ldr	r1, [r3, #32]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	430b      	orrs	r3, r1
 8003042:	4927      	ldr	r1, [pc, #156]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <HAL_RCC_OscConfig+0x4fc>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7fe fb01 	bl	8001654 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003056:	f7fe fafd 	bl	8001654 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e037      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003068:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x46a>
 8003074:	e02f      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003076:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <HAL_RCC_OscConfig+0x4fc>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fe faea 	bl	8001654 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe fae6 	bl	8001654 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e020      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003096:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x498>
 80030a2:	e018      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e013      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_OscConfig+0x4f4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d106      	bne.n	80030d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40007000 	.word	0x40007000
 80030e8:	42420060 	.word	0x42420060

080030ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0d0      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003100:	4b6a      	ldr	r3, [pc, #424]	; (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d910      	bls.n	8003130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310e:	4b67      	ldr	r3, [pc, #412]	; (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 0207 	bic.w	r2, r3, #7
 8003116:	4965      	ldr	r1, [pc, #404]	; (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	4313      	orrs	r3, r2
 800311c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b63      	ldr	r3, [pc, #396]	; (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0b8      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d020      	beq.n	800317e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003148:	4b59      	ldr	r3, [pc, #356]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4a58      	ldr	r2, [pc, #352]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003160:	4b53      	ldr	r3, [pc, #332]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4a52      	ldr	r2, [pc, #328]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800316a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800316c:	4b50      	ldr	r3, [pc, #320]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	494d      	ldr	r1, [pc, #308]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 800317a:	4313      	orrs	r3, r2
 800317c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d040      	beq.n	800320c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003192:	4b47      	ldr	r3, [pc, #284]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d115      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e07f      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031aa:	4b41      	ldr	r3, [pc, #260]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e073      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ba:	4b3d      	ldr	r3, [pc, #244]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e06b      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ca:	4b39      	ldr	r3, [pc, #228]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f023 0203 	bic.w	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4936      	ldr	r1, [pc, #216]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031dc:	f7fe fa3a 	bl	8001654 <HAL_GetTick>
 80031e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	e00a      	b.n	80031fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e4:	f7fe fa36 	bl	8001654 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e053      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	4b2d      	ldr	r3, [pc, #180]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 020c 	and.w	r2, r3, #12
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	429a      	cmp	r2, r3
 800320a:	d1eb      	bne.n	80031e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800320c:	4b27      	ldr	r3, [pc, #156]	; (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d210      	bcs.n	800323c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b24      	ldr	r3, [pc, #144]	; (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 0207 	bic.w	r2, r3, #7
 8003222:	4922      	ldr	r1, [pc, #136]	; (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b20      	ldr	r3, [pc, #128]	; (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e032      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003248:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	4916      	ldr	r1, [pc, #88]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003266:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	490e      	ldr	r1, [pc, #56]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800327a:	f000 f821 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 800327e:	4602      	mov	r2, r0
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	490a      	ldr	r1, [pc, #40]	; (80032b4 <HAL_RCC_ClockConfig+0x1c8>)
 800328c:	5ccb      	ldrb	r3, [r1, r3]
 800328e:	fa22 f303 	lsr.w	r3, r2, r3
 8003292:	4a09      	ldr	r2, [pc, #36]	; (80032b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_RCC_ClockConfig+0x1d0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe f998 	bl	80015d0 <HAL_InitTick>

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40022000 	.word	0x40022000
 80032b0:	40021000 	.word	0x40021000
 80032b4:	08006010 	.word	0x08006010
 80032b8:	20000000 	.word	0x20000000
 80032bc:	20000004 	.word	0x20000004

080032c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c0:	b490      	push	{r4, r7}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032c6:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032c8:	1d3c      	adds	r4, r7, #4
 80032ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032d0:	f240 2301 	movw	r3, #513	; 0x201
 80032d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032ea:	4b22      	ldr	r3, [pc, #136]	; (8003374 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d002      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x40>
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d003      	beq.n	8003306 <HAL_RCC_GetSysClockFreq+0x46>
 80032fe:	e02d      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003300:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003302:	623b      	str	r3, [r7, #32]
      break;
 8003304:	e02d      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	0c9b      	lsrs	r3, r3, #18
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003312:	4413      	add	r3, r2
 8003314:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003318:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d013      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003324:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	0c5b      	lsrs	r3, r3, #17
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003332:	4413      	add	r3, r2
 8003334:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003338:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	4a0e      	ldr	r2, [pc, #56]	; (8003378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800333e:	fb02 f203 	mul.w	r2, r2, r3
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	e004      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	4a0b      	ldr	r2, [pc, #44]	; (800337c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003350:	fb02 f303 	mul.w	r3, r2, r3
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	623b      	str	r3, [r7, #32]
      break;
 800335a:	e002      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800335e:	623b      	str	r3, [r7, #32]
      break;
 8003360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003362:	6a3b      	ldr	r3, [r7, #32]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3728      	adds	r7, #40	; 0x28
 8003368:	46bd      	mov	sp, r7
 800336a:	bc90      	pop	{r4, r7}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	08006000 	.word	0x08006000
 8003374:	40021000 	.word	0x40021000
 8003378:	007a1200 	.word	0x007a1200
 800337c:	003d0900 	.word	0x003d0900

08003380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003384:	4b02      	ldr	r3, [pc, #8]	; (8003390 <HAL_RCC_GetHCLKFreq+0x10>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	20000000 	.word	0x20000000

08003394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003398:	f7ff fff2 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4903      	ldr	r1, [pc, #12]	; (80033b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033aa:	5ccb      	ldrb	r3, [r1, r3]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	08006020 	.word	0x08006020

080033bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033c0:	f7ff ffde 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	0adb      	lsrs	r3, r3, #11
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4903      	ldr	r1, [pc, #12]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d2:	5ccb      	ldrb	r3, [r1, r3]
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000
 80033e0:	08006020 	.word	0x08006020

080033e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <RCC_Delay+0x34>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <RCC_Delay+0x38>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	0a5b      	lsrs	r3, r3, #9
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003400:	bf00      	nop
  }
  while (Delay --);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1e5a      	subs	r2, r3, #1
 8003406:	60fa      	str	r2, [r7, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f9      	bne.n	8003400 <RCC_Delay+0x1c>
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	20000000 	.word	0x20000000
 800341c:	10624dd3 	.word	0x10624dd3

08003420 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e03f      	b.n	80034b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fe f848 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2224      	movs	r2, #36	; 0x24
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003462:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f829 	bl	80034bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003478:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003488:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003498:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034f6:	f023 030c 	bic.w	r3, r3, #12
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	430b      	orrs	r3, r1
 8003502:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a2c      	ldr	r2, [pc, #176]	; (80035d0 <UART_SetConfig+0x114>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d103      	bne.n	800352c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003524:	f7ff ff4a 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	e002      	b.n	8003532 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800352c:	f7ff ff32 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8003530:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009a      	lsls	r2, r3, #2
 800353c:	441a      	add	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	4a22      	ldr	r2, [pc, #136]	; (80035d4 <UART_SetConfig+0x118>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	0119      	lsls	r1, r3, #4
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009a      	lsls	r2, r3, #2
 800355c:	441a      	add	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	fbb2 f2f3 	udiv	r2, r2, r3
 8003568:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <UART_SetConfig+0x118>)
 800356a:	fba3 0302 	umull	r0, r3, r3, r2
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2064      	movs	r0, #100	; 0x64
 8003572:	fb00 f303 	mul.w	r3, r0, r3
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	3332      	adds	r3, #50	; 0x32
 800357c:	4a15      	ldr	r2, [pc, #84]	; (80035d4 <UART_SetConfig+0x118>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003588:	4419      	add	r1, r3
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	009a      	lsls	r2, r3, #2
 8003594:	441a      	add	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	fbb2 f2f3 	udiv	r2, r2, r3
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <UART_SetConfig+0x118>)
 80035a2:	fba3 0302 	umull	r0, r3, r3, r2
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	2064      	movs	r0, #100	; 0x64
 80035aa:	fb00 f303 	mul.w	r3, r0, r3
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	3332      	adds	r3, #50	; 0x32
 80035b4:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <UART_SetConfig+0x118>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	f003 020f 	and.w	r2, r3, #15
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	440a      	add	r2, r1
 80035c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035c8:	bf00      	nop
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40013800 	.word	0x40013800
 80035d4:	51eb851f 	.word	0x51eb851f

080035d8 <__errno>:
 80035d8:	4b01      	ldr	r3, [pc, #4]	; (80035e0 <__errno+0x8>)
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	2000000c 	.word	0x2000000c

080035e4 <__libc_init_array>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	2600      	movs	r6, #0
 80035e8:	4d0c      	ldr	r5, [pc, #48]	; (800361c <__libc_init_array+0x38>)
 80035ea:	4c0d      	ldr	r4, [pc, #52]	; (8003620 <__libc_init_array+0x3c>)
 80035ec:	1b64      	subs	r4, r4, r5
 80035ee:	10a4      	asrs	r4, r4, #2
 80035f0:	42a6      	cmp	r6, r4
 80035f2:	d109      	bne.n	8003608 <__libc_init_array+0x24>
 80035f4:	f002 fcf6 	bl	8005fe4 <_init>
 80035f8:	2600      	movs	r6, #0
 80035fa:	4d0a      	ldr	r5, [pc, #40]	; (8003624 <__libc_init_array+0x40>)
 80035fc:	4c0a      	ldr	r4, [pc, #40]	; (8003628 <__libc_init_array+0x44>)
 80035fe:	1b64      	subs	r4, r4, r5
 8003600:	10a4      	asrs	r4, r4, #2
 8003602:	42a6      	cmp	r6, r4
 8003604:	d105      	bne.n	8003612 <__libc_init_array+0x2e>
 8003606:	bd70      	pop	{r4, r5, r6, pc}
 8003608:	f855 3b04 	ldr.w	r3, [r5], #4
 800360c:	4798      	blx	r3
 800360e:	3601      	adds	r6, #1
 8003610:	e7ee      	b.n	80035f0 <__libc_init_array+0xc>
 8003612:	f855 3b04 	ldr.w	r3, [r5], #4
 8003616:	4798      	blx	r3
 8003618:	3601      	adds	r6, #1
 800361a:	e7f2      	b.n	8003602 <__libc_init_array+0x1e>
 800361c:	0800640c 	.word	0x0800640c
 8003620:	0800640c 	.word	0x0800640c
 8003624:	0800640c 	.word	0x0800640c
 8003628:	08006410 	.word	0x08006410

0800362c <memset>:
 800362c:	4603      	mov	r3, r0
 800362e:	4402      	add	r2, r0
 8003630:	4293      	cmp	r3, r2
 8003632:	d100      	bne.n	8003636 <memset+0xa>
 8003634:	4770      	bx	lr
 8003636:	f803 1b01 	strb.w	r1, [r3], #1
 800363a:	e7f9      	b.n	8003630 <memset+0x4>

0800363c <__cvt>:
 800363c:	2b00      	cmp	r3, #0
 800363e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003642:	461f      	mov	r7, r3
 8003644:	bfbb      	ittet	lt
 8003646:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800364a:	461f      	movlt	r7, r3
 800364c:	2300      	movge	r3, #0
 800364e:	232d      	movlt	r3, #45	; 0x2d
 8003650:	b088      	sub	sp, #32
 8003652:	4614      	mov	r4, r2
 8003654:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003656:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003658:	7013      	strb	r3, [r2, #0]
 800365a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800365c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003660:	f023 0820 	bic.w	r8, r3, #32
 8003664:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003668:	d005      	beq.n	8003676 <__cvt+0x3a>
 800366a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800366e:	d100      	bne.n	8003672 <__cvt+0x36>
 8003670:	3501      	adds	r5, #1
 8003672:	2302      	movs	r3, #2
 8003674:	e000      	b.n	8003678 <__cvt+0x3c>
 8003676:	2303      	movs	r3, #3
 8003678:	aa07      	add	r2, sp, #28
 800367a:	9204      	str	r2, [sp, #16]
 800367c:	aa06      	add	r2, sp, #24
 800367e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003682:	e9cd 3500 	strd	r3, r5, [sp]
 8003686:	4622      	mov	r2, r4
 8003688:	463b      	mov	r3, r7
 800368a:	f000 fcc5 	bl	8004018 <_dtoa_r>
 800368e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003692:	4606      	mov	r6, r0
 8003694:	d102      	bne.n	800369c <__cvt+0x60>
 8003696:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003698:	07db      	lsls	r3, r3, #31
 800369a:	d522      	bpl.n	80036e2 <__cvt+0xa6>
 800369c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80036a0:	eb06 0905 	add.w	r9, r6, r5
 80036a4:	d110      	bne.n	80036c8 <__cvt+0x8c>
 80036a6:	7833      	ldrb	r3, [r6, #0]
 80036a8:	2b30      	cmp	r3, #48	; 0x30
 80036aa:	d10a      	bne.n	80036c2 <__cvt+0x86>
 80036ac:	2200      	movs	r2, #0
 80036ae:	2300      	movs	r3, #0
 80036b0:	4620      	mov	r0, r4
 80036b2:	4639      	mov	r1, r7
 80036b4:	f7fd f978 	bl	80009a8 <__aeabi_dcmpeq>
 80036b8:	b918      	cbnz	r0, 80036c2 <__cvt+0x86>
 80036ba:	f1c5 0501 	rsb	r5, r5, #1
 80036be:	f8ca 5000 	str.w	r5, [sl]
 80036c2:	f8da 3000 	ldr.w	r3, [sl]
 80036c6:	4499      	add	r9, r3
 80036c8:	2200      	movs	r2, #0
 80036ca:	2300      	movs	r3, #0
 80036cc:	4620      	mov	r0, r4
 80036ce:	4639      	mov	r1, r7
 80036d0:	f7fd f96a 	bl	80009a8 <__aeabi_dcmpeq>
 80036d4:	b108      	cbz	r0, 80036da <__cvt+0x9e>
 80036d6:	f8cd 901c 	str.w	r9, [sp, #28]
 80036da:	2230      	movs	r2, #48	; 0x30
 80036dc:	9b07      	ldr	r3, [sp, #28]
 80036de:	454b      	cmp	r3, r9
 80036e0:	d307      	bcc.n	80036f2 <__cvt+0xb6>
 80036e2:	4630      	mov	r0, r6
 80036e4:	9b07      	ldr	r3, [sp, #28]
 80036e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80036e8:	1b9b      	subs	r3, r3, r6
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	b008      	add	sp, #32
 80036ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036f2:	1c59      	adds	r1, r3, #1
 80036f4:	9107      	str	r1, [sp, #28]
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	e7f0      	b.n	80036dc <__cvt+0xa0>

080036fa <__exponent>:
 80036fa:	4603      	mov	r3, r0
 80036fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036fe:	2900      	cmp	r1, #0
 8003700:	f803 2b02 	strb.w	r2, [r3], #2
 8003704:	bfb6      	itet	lt
 8003706:	222d      	movlt	r2, #45	; 0x2d
 8003708:	222b      	movge	r2, #43	; 0x2b
 800370a:	4249      	neglt	r1, r1
 800370c:	2909      	cmp	r1, #9
 800370e:	7042      	strb	r2, [r0, #1]
 8003710:	dd2b      	ble.n	800376a <__exponent+0x70>
 8003712:	f10d 0407 	add.w	r4, sp, #7
 8003716:	46a4      	mov	ip, r4
 8003718:	270a      	movs	r7, #10
 800371a:	fb91 f6f7 	sdiv	r6, r1, r7
 800371e:	460a      	mov	r2, r1
 8003720:	46a6      	mov	lr, r4
 8003722:	fb07 1516 	mls	r5, r7, r6, r1
 8003726:	2a63      	cmp	r2, #99	; 0x63
 8003728:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800372c:	4631      	mov	r1, r6
 800372e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003732:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003736:	dcf0      	bgt.n	800371a <__exponent+0x20>
 8003738:	3130      	adds	r1, #48	; 0x30
 800373a:	f1ae 0502 	sub.w	r5, lr, #2
 800373e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003742:	4629      	mov	r1, r5
 8003744:	1c44      	adds	r4, r0, #1
 8003746:	4561      	cmp	r1, ip
 8003748:	d30a      	bcc.n	8003760 <__exponent+0x66>
 800374a:	f10d 0209 	add.w	r2, sp, #9
 800374e:	eba2 020e 	sub.w	r2, r2, lr
 8003752:	4565      	cmp	r5, ip
 8003754:	bf88      	it	hi
 8003756:	2200      	movhi	r2, #0
 8003758:	4413      	add	r3, r2
 800375a:	1a18      	subs	r0, r3, r0
 800375c:	b003      	add	sp, #12
 800375e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003760:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003764:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003768:	e7ed      	b.n	8003746 <__exponent+0x4c>
 800376a:	2330      	movs	r3, #48	; 0x30
 800376c:	3130      	adds	r1, #48	; 0x30
 800376e:	7083      	strb	r3, [r0, #2]
 8003770:	70c1      	strb	r1, [r0, #3]
 8003772:	1d03      	adds	r3, r0, #4
 8003774:	e7f1      	b.n	800375a <__exponent+0x60>
	...

08003778 <_printf_float>:
 8003778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800377c:	b091      	sub	sp, #68	; 0x44
 800377e:	460c      	mov	r4, r1
 8003780:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003784:	4616      	mov	r6, r2
 8003786:	461f      	mov	r7, r3
 8003788:	4605      	mov	r5, r0
 800378a:	f001 fa33 	bl	8004bf4 <_localeconv_r>
 800378e:	6803      	ldr	r3, [r0, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	9309      	str	r3, [sp, #36]	; 0x24
 8003794:	f7fc fcdc 	bl	8000150 <strlen>
 8003798:	2300      	movs	r3, #0
 800379a:	930e      	str	r3, [sp, #56]	; 0x38
 800379c:	f8d8 3000 	ldr.w	r3, [r8]
 80037a0:	900a      	str	r0, [sp, #40]	; 0x28
 80037a2:	3307      	adds	r3, #7
 80037a4:	f023 0307 	bic.w	r3, r3, #7
 80037a8:	f103 0208 	add.w	r2, r3, #8
 80037ac:	f894 9018 	ldrb.w	r9, [r4, #24]
 80037b0:	f8d4 b000 	ldr.w	fp, [r4]
 80037b4:	f8c8 2000 	str.w	r2, [r8]
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80037c0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80037c4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80037c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80037ca:	f04f 32ff 	mov.w	r2, #4294967295
 80037ce:	4640      	mov	r0, r8
 80037d0:	4b9c      	ldr	r3, [pc, #624]	; (8003a44 <_printf_float+0x2cc>)
 80037d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80037d4:	f7fd f91a 	bl	8000a0c <__aeabi_dcmpun>
 80037d8:	bb70      	cbnz	r0, 8003838 <_printf_float+0xc0>
 80037da:	f04f 32ff 	mov.w	r2, #4294967295
 80037de:	4640      	mov	r0, r8
 80037e0:	4b98      	ldr	r3, [pc, #608]	; (8003a44 <_printf_float+0x2cc>)
 80037e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80037e4:	f7fd f8f4 	bl	80009d0 <__aeabi_dcmple>
 80037e8:	bb30      	cbnz	r0, 8003838 <_printf_float+0xc0>
 80037ea:	2200      	movs	r2, #0
 80037ec:	2300      	movs	r3, #0
 80037ee:	4640      	mov	r0, r8
 80037f0:	4651      	mov	r1, sl
 80037f2:	f7fd f8e3 	bl	80009bc <__aeabi_dcmplt>
 80037f6:	b110      	cbz	r0, 80037fe <_printf_float+0x86>
 80037f8:	232d      	movs	r3, #45	; 0x2d
 80037fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037fe:	4b92      	ldr	r3, [pc, #584]	; (8003a48 <_printf_float+0x2d0>)
 8003800:	4892      	ldr	r0, [pc, #584]	; (8003a4c <_printf_float+0x2d4>)
 8003802:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003806:	bf94      	ite	ls
 8003808:	4698      	movls	r8, r3
 800380a:	4680      	movhi	r8, r0
 800380c:	2303      	movs	r3, #3
 800380e:	f04f 0a00 	mov.w	sl, #0
 8003812:	6123      	str	r3, [r4, #16]
 8003814:	f02b 0304 	bic.w	r3, fp, #4
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	4633      	mov	r3, r6
 800381c:	4621      	mov	r1, r4
 800381e:	4628      	mov	r0, r5
 8003820:	9700      	str	r7, [sp, #0]
 8003822:	aa0f      	add	r2, sp, #60	; 0x3c
 8003824:	f000 f9d4 	bl	8003bd0 <_printf_common>
 8003828:	3001      	adds	r0, #1
 800382a:	f040 8090 	bne.w	800394e <_printf_float+0x1d6>
 800382e:	f04f 30ff 	mov.w	r0, #4294967295
 8003832:	b011      	add	sp, #68	; 0x44
 8003834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003838:	4642      	mov	r2, r8
 800383a:	4653      	mov	r3, sl
 800383c:	4640      	mov	r0, r8
 800383e:	4651      	mov	r1, sl
 8003840:	f7fd f8e4 	bl	8000a0c <__aeabi_dcmpun>
 8003844:	b148      	cbz	r0, 800385a <_printf_float+0xe2>
 8003846:	f1ba 0f00 	cmp.w	sl, #0
 800384a:	bfb8      	it	lt
 800384c:	232d      	movlt	r3, #45	; 0x2d
 800384e:	4880      	ldr	r0, [pc, #512]	; (8003a50 <_printf_float+0x2d8>)
 8003850:	bfb8      	it	lt
 8003852:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003856:	4b7f      	ldr	r3, [pc, #508]	; (8003a54 <_printf_float+0x2dc>)
 8003858:	e7d3      	b.n	8003802 <_printf_float+0x8a>
 800385a:	6863      	ldr	r3, [r4, #4]
 800385c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	d142      	bne.n	80038ea <_printf_float+0x172>
 8003864:	2306      	movs	r3, #6
 8003866:	6063      	str	r3, [r4, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	9206      	str	r2, [sp, #24]
 800386c:	aa0e      	add	r2, sp, #56	; 0x38
 800386e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003872:	aa0d      	add	r2, sp, #52	; 0x34
 8003874:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003878:	9203      	str	r2, [sp, #12]
 800387a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800387e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003882:	6023      	str	r3, [r4, #0]
 8003884:	6863      	ldr	r3, [r4, #4]
 8003886:	4642      	mov	r2, r8
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	4628      	mov	r0, r5
 800388c:	4653      	mov	r3, sl
 800388e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003890:	f7ff fed4 	bl	800363c <__cvt>
 8003894:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003896:	4680      	mov	r8, r0
 8003898:	2947      	cmp	r1, #71	; 0x47
 800389a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800389c:	d108      	bne.n	80038b0 <_printf_float+0x138>
 800389e:	1cc8      	adds	r0, r1, #3
 80038a0:	db02      	blt.n	80038a8 <_printf_float+0x130>
 80038a2:	6863      	ldr	r3, [r4, #4]
 80038a4:	4299      	cmp	r1, r3
 80038a6:	dd40      	ble.n	800392a <_printf_float+0x1b2>
 80038a8:	f1a9 0902 	sub.w	r9, r9, #2
 80038ac:	fa5f f989 	uxtb.w	r9, r9
 80038b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80038b4:	d81f      	bhi.n	80038f6 <_printf_float+0x17e>
 80038b6:	464a      	mov	r2, r9
 80038b8:	3901      	subs	r1, #1
 80038ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80038be:	910d      	str	r1, [sp, #52]	; 0x34
 80038c0:	f7ff ff1b 	bl	80036fa <__exponent>
 80038c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038c6:	4682      	mov	sl, r0
 80038c8:	1813      	adds	r3, r2, r0
 80038ca:	2a01      	cmp	r2, #1
 80038cc:	6123      	str	r3, [r4, #16]
 80038ce:	dc02      	bgt.n	80038d6 <_printf_float+0x15e>
 80038d0:	6822      	ldr	r2, [r4, #0]
 80038d2:	07d2      	lsls	r2, r2, #31
 80038d4:	d501      	bpl.n	80038da <_printf_float+0x162>
 80038d6:	3301      	adds	r3, #1
 80038d8:	6123      	str	r3, [r4, #16]
 80038da:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d09b      	beq.n	800381a <_printf_float+0xa2>
 80038e2:	232d      	movs	r3, #45	; 0x2d
 80038e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038e8:	e797      	b.n	800381a <_printf_float+0xa2>
 80038ea:	2947      	cmp	r1, #71	; 0x47
 80038ec:	d1bc      	bne.n	8003868 <_printf_float+0xf0>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1ba      	bne.n	8003868 <_printf_float+0xf0>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e7b7      	b.n	8003866 <_printf_float+0xee>
 80038f6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80038fa:	d118      	bne.n	800392e <_printf_float+0x1b6>
 80038fc:	2900      	cmp	r1, #0
 80038fe:	6863      	ldr	r3, [r4, #4]
 8003900:	dd0b      	ble.n	800391a <_printf_float+0x1a2>
 8003902:	6121      	str	r1, [r4, #16]
 8003904:	b913      	cbnz	r3, 800390c <_printf_float+0x194>
 8003906:	6822      	ldr	r2, [r4, #0]
 8003908:	07d0      	lsls	r0, r2, #31
 800390a:	d502      	bpl.n	8003912 <_printf_float+0x19a>
 800390c:	3301      	adds	r3, #1
 800390e:	440b      	add	r3, r1
 8003910:	6123      	str	r3, [r4, #16]
 8003912:	f04f 0a00 	mov.w	sl, #0
 8003916:	65a1      	str	r1, [r4, #88]	; 0x58
 8003918:	e7df      	b.n	80038da <_printf_float+0x162>
 800391a:	b913      	cbnz	r3, 8003922 <_printf_float+0x1aa>
 800391c:	6822      	ldr	r2, [r4, #0]
 800391e:	07d2      	lsls	r2, r2, #31
 8003920:	d501      	bpl.n	8003926 <_printf_float+0x1ae>
 8003922:	3302      	adds	r3, #2
 8003924:	e7f4      	b.n	8003910 <_printf_float+0x198>
 8003926:	2301      	movs	r3, #1
 8003928:	e7f2      	b.n	8003910 <_printf_float+0x198>
 800392a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800392e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003930:	4299      	cmp	r1, r3
 8003932:	db05      	blt.n	8003940 <_printf_float+0x1c8>
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	6121      	str	r1, [r4, #16]
 8003938:	07d8      	lsls	r0, r3, #31
 800393a:	d5ea      	bpl.n	8003912 <_printf_float+0x19a>
 800393c:	1c4b      	adds	r3, r1, #1
 800393e:	e7e7      	b.n	8003910 <_printf_float+0x198>
 8003940:	2900      	cmp	r1, #0
 8003942:	bfcc      	ite	gt
 8003944:	2201      	movgt	r2, #1
 8003946:	f1c1 0202 	rsble	r2, r1, #2
 800394a:	4413      	add	r3, r2
 800394c:	e7e0      	b.n	8003910 <_printf_float+0x198>
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	055a      	lsls	r2, r3, #21
 8003952:	d407      	bmi.n	8003964 <_printf_float+0x1ec>
 8003954:	6923      	ldr	r3, [r4, #16]
 8003956:	4642      	mov	r2, r8
 8003958:	4631      	mov	r1, r6
 800395a:	4628      	mov	r0, r5
 800395c:	47b8      	blx	r7
 800395e:	3001      	adds	r0, #1
 8003960:	d12b      	bne.n	80039ba <_printf_float+0x242>
 8003962:	e764      	b.n	800382e <_printf_float+0xb6>
 8003964:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003968:	f240 80dd 	bls.w	8003b26 <_printf_float+0x3ae>
 800396c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003970:	2200      	movs	r2, #0
 8003972:	2300      	movs	r3, #0
 8003974:	f7fd f818 	bl	80009a8 <__aeabi_dcmpeq>
 8003978:	2800      	cmp	r0, #0
 800397a:	d033      	beq.n	80039e4 <_printf_float+0x26c>
 800397c:	2301      	movs	r3, #1
 800397e:	4631      	mov	r1, r6
 8003980:	4628      	mov	r0, r5
 8003982:	4a35      	ldr	r2, [pc, #212]	; (8003a58 <_printf_float+0x2e0>)
 8003984:	47b8      	blx	r7
 8003986:	3001      	adds	r0, #1
 8003988:	f43f af51 	beq.w	800382e <_printf_float+0xb6>
 800398c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003990:	429a      	cmp	r2, r3
 8003992:	db02      	blt.n	800399a <_printf_float+0x222>
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	07d8      	lsls	r0, r3, #31
 8003998:	d50f      	bpl.n	80039ba <_printf_float+0x242>
 800399a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800399e:	4631      	mov	r1, r6
 80039a0:	4628      	mov	r0, r5
 80039a2:	47b8      	blx	r7
 80039a4:	3001      	adds	r0, #1
 80039a6:	f43f af42 	beq.w	800382e <_printf_float+0xb6>
 80039aa:	f04f 0800 	mov.w	r8, #0
 80039ae:	f104 091a 	add.w	r9, r4, #26
 80039b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039b4:	3b01      	subs	r3, #1
 80039b6:	4543      	cmp	r3, r8
 80039b8:	dc09      	bgt.n	80039ce <_printf_float+0x256>
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	079b      	lsls	r3, r3, #30
 80039be:	f100 8102 	bmi.w	8003bc6 <_printf_float+0x44e>
 80039c2:	68e0      	ldr	r0, [r4, #12]
 80039c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80039c6:	4298      	cmp	r0, r3
 80039c8:	bfb8      	it	lt
 80039ca:	4618      	movlt	r0, r3
 80039cc:	e731      	b.n	8003832 <_printf_float+0xba>
 80039ce:	2301      	movs	r3, #1
 80039d0:	464a      	mov	r2, r9
 80039d2:	4631      	mov	r1, r6
 80039d4:	4628      	mov	r0, r5
 80039d6:	47b8      	blx	r7
 80039d8:	3001      	adds	r0, #1
 80039da:	f43f af28 	beq.w	800382e <_printf_float+0xb6>
 80039de:	f108 0801 	add.w	r8, r8, #1
 80039e2:	e7e6      	b.n	80039b2 <_printf_float+0x23a>
 80039e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	dc38      	bgt.n	8003a5c <_printf_float+0x2e4>
 80039ea:	2301      	movs	r3, #1
 80039ec:	4631      	mov	r1, r6
 80039ee:	4628      	mov	r0, r5
 80039f0:	4a19      	ldr	r2, [pc, #100]	; (8003a58 <_printf_float+0x2e0>)
 80039f2:	47b8      	blx	r7
 80039f4:	3001      	adds	r0, #1
 80039f6:	f43f af1a 	beq.w	800382e <_printf_float+0xb6>
 80039fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80039fe:	4313      	orrs	r3, r2
 8003a00:	d102      	bne.n	8003a08 <_printf_float+0x290>
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	07d9      	lsls	r1, r3, #31
 8003a06:	d5d8      	bpl.n	80039ba <_printf_float+0x242>
 8003a08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a0c:	4631      	mov	r1, r6
 8003a0e:	4628      	mov	r0, r5
 8003a10:	47b8      	blx	r7
 8003a12:	3001      	adds	r0, #1
 8003a14:	f43f af0b 	beq.w	800382e <_printf_float+0xb6>
 8003a18:	f04f 0900 	mov.w	r9, #0
 8003a1c:	f104 0a1a 	add.w	sl, r4, #26
 8003a20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a22:	425b      	negs	r3, r3
 8003a24:	454b      	cmp	r3, r9
 8003a26:	dc01      	bgt.n	8003a2c <_printf_float+0x2b4>
 8003a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a2a:	e794      	b.n	8003956 <_printf_float+0x1de>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	4652      	mov	r2, sl
 8003a30:	4631      	mov	r1, r6
 8003a32:	4628      	mov	r0, r5
 8003a34:	47b8      	blx	r7
 8003a36:	3001      	adds	r0, #1
 8003a38:	f43f aef9 	beq.w	800382e <_printf_float+0xb6>
 8003a3c:	f109 0901 	add.w	r9, r9, #1
 8003a40:	e7ee      	b.n	8003a20 <_printf_float+0x2a8>
 8003a42:	bf00      	nop
 8003a44:	7fefffff 	.word	0x7fefffff
 8003a48:	0800602c 	.word	0x0800602c
 8003a4c:	08006030 	.word	0x08006030
 8003a50:	08006038 	.word	0x08006038
 8003a54:	08006034 	.word	0x08006034
 8003a58:	0800603c 	.word	0x0800603c
 8003a5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a60:	429a      	cmp	r2, r3
 8003a62:	bfa8      	it	ge
 8003a64:	461a      	movge	r2, r3
 8003a66:	2a00      	cmp	r2, #0
 8003a68:	4691      	mov	r9, r2
 8003a6a:	dc37      	bgt.n	8003adc <_printf_float+0x364>
 8003a6c:	f04f 0b00 	mov.w	fp, #0
 8003a70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a74:	f104 021a 	add.w	r2, r4, #26
 8003a78:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003a7c:	ebaa 0309 	sub.w	r3, sl, r9
 8003a80:	455b      	cmp	r3, fp
 8003a82:	dc33      	bgt.n	8003aec <_printf_float+0x374>
 8003a84:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	db3b      	blt.n	8003b04 <_printf_float+0x38c>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	07da      	lsls	r2, r3, #31
 8003a90:	d438      	bmi.n	8003b04 <_printf_float+0x38c>
 8003a92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a94:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003a96:	eba2 030a 	sub.w	r3, r2, sl
 8003a9a:	eba2 0901 	sub.w	r9, r2, r1
 8003a9e:	4599      	cmp	r9, r3
 8003aa0:	bfa8      	it	ge
 8003aa2:	4699      	movge	r9, r3
 8003aa4:	f1b9 0f00 	cmp.w	r9, #0
 8003aa8:	dc34      	bgt.n	8003b14 <_printf_float+0x39c>
 8003aaa:	f04f 0800 	mov.w	r8, #0
 8003aae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ab2:	f104 0a1a 	add.w	sl, r4, #26
 8003ab6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	eba3 0309 	sub.w	r3, r3, r9
 8003ac0:	4543      	cmp	r3, r8
 8003ac2:	f77f af7a 	ble.w	80039ba <_printf_float+0x242>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	4652      	mov	r2, sl
 8003aca:	4631      	mov	r1, r6
 8003acc:	4628      	mov	r0, r5
 8003ace:	47b8      	blx	r7
 8003ad0:	3001      	adds	r0, #1
 8003ad2:	f43f aeac 	beq.w	800382e <_printf_float+0xb6>
 8003ad6:	f108 0801 	add.w	r8, r8, #1
 8003ada:	e7ec      	b.n	8003ab6 <_printf_float+0x33e>
 8003adc:	4613      	mov	r3, r2
 8003ade:	4631      	mov	r1, r6
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	47b8      	blx	r7
 8003ae6:	3001      	adds	r0, #1
 8003ae8:	d1c0      	bne.n	8003a6c <_printf_float+0x2f4>
 8003aea:	e6a0      	b.n	800382e <_printf_float+0xb6>
 8003aec:	2301      	movs	r3, #1
 8003aee:	4631      	mov	r1, r6
 8003af0:	4628      	mov	r0, r5
 8003af2:	920b      	str	r2, [sp, #44]	; 0x2c
 8003af4:	47b8      	blx	r7
 8003af6:	3001      	adds	r0, #1
 8003af8:	f43f ae99 	beq.w	800382e <_printf_float+0xb6>
 8003afc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003afe:	f10b 0b01 	add.w	fp, fp, #1
 8003b02:	e7b9      	b.n	8003a78 <_printf_float+0x300>
 8003b04:	4631      	mov	r1, r6
 8003b06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	47b8      	blx	r7
 8003b0e:	3001      	adds	r0, #1
 8003b10:	d1bf      	bne.n	8003a92 <_printf_float+0x31a>
 8003b12:	e68c      	b.n	800382e <_printf_float+0xb6>
 8003b14:	464b      	mov	r3, r9
 8003b16:	4631      	mov	r1, r6
 8003b18:	4628      	mov	r0, r5
 8003b1a:	eb08 020a 	add.w	r2, r8, sl
 8003b1e:	47b8      	blx	r7
 8003b20:	3001      	adds	r0, #1
 8003b22:	d1c2      	bne.n	8003aaa <_printf_float+0x332>
 8003b24:	e683      	b.n	800382e <_printf_float+0xb6>
 8003b26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b28:	2a01      	cmp	r2, #1
 8003b2a:	dc01      	bgt.n	8003b30 <_printf_float+0x3b8>
 8003b2c:	07db      	lsls	r3, r3, #31
 8003b2e:	d537      	bpl.n	8003ba0 <_printf_float+0x428>
 8003b30:	2301      	movs	r3, #1
 8003b32:	4642      	mov	r2, r8
 8003b34:	4631      	mov	r1, r6
 8003b36:	4628      	mov	r0, r5
 8003b38:	47b8      	blx	r7
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	f43f ae77 	beq.w	800382e <_printf_float+0xb6>
 8003b40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b44:	4631      	mov	r1, r6
 8003b46:	4628      	mov	r0, r5
 8003b48:	47b8      	blx	r7
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	f43f ae6f 	beq.w	800382e <_printf_float+0xb6>
 8003b50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b54:	2200      	movs	r2, #0
 8003b56:	2300      	movs	r3, #0
 8003b58:	f7fc ff26 	bl	80009a8 <__aeabi_dcmpeq>
 8003b5c:	b9d8      	cbnz	r0, 8003b96 <_printf_float+0x41e>
 8003b5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b60:	f108 0201 	add.w	r2, r8, #1
 8003b64:	3b01      	subs	r3, #1
 8003b66:	4631      	mov	r1, r6
 8003b68:	4628      	mov	r0, r5
 8003b6a:	47b8      	blx	r7
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	d10e      	bne.n	8003b8e <_printf_float+0x416>
 8003b70:	e65d      	b.n	800382e <_printf_float+0xb6>
 8003b72:	2301      	movs	r3, #1
 8003b74:	464a      	mov	r2, r9
 8003b76:	4631      	mov	r1, r6
 8003b78:	4628      	mov	r0, r5
 8003b7a:	47b8      	blx	r7
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	f43f ae56 	beq.w	800382e <_printf_float+0xb6>
 8003b82:	f108 0801 	add.w	r8, r8, #1
 8003b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	4543      	cmp	r3, r8
 8003b8c:	dcf1      	bgt.n	8003b72 <_printf_float+0x3fa>
 8003b8e:	4653      	mov	r3, sl
 8003b90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003b94:	e6e0      	b.n	8003958 <_printf_float+0x1e0>
 8003b96:	f04f 0800 	mov.w	r8, #0
 8003b9a:	f104 091a 	add.w	r9, r4, #26
 8003b9e:	e7f2      	b.n	8003b86 <_printf_float+0x40e>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	4642      	mov	r2, r8
 8003ba4:	e7df      	b.n	8003b66 <_printf_float+0x3ee>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	464a      	mov	r2, r9
 8003baa:	4631      	mov	r1, r6
 8003bac:	4628      	mov	r0, r5
 8003bae:	47b8      	blx	r7
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	f43f ae3c 	beq.w	800382e <_printf_float+0xb6>
 8003bb6:	f108 0801 	add.w	r8, r8, #1
 8003bba:	68e3      	ldr	r3, [r4, #12]
 8003bbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003bbe:	1a5b      	subs	r3, r3, r1
 8003bc0:	4543      	cmp	r3, r8
 8003bc2:	dcf0      	bgt.n	8003ba6 <_printf_float+0x42e>
 8003bc4:	e6fd      	b.n	80039c2 <_printf_float+0x24a>
 8003bc6:	f04f 0800 	mov.w	r8, #0
 8003bca:	f104 0919 	add.w	r9, r4, #25
 8003bce:	e7f4      	b.n	8003bba <_printf_float+0x442>

08003bd0 <_printf_common>:
 8003bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd4:	4616      	mov	r6, r2
 8003bd6:	4699      	mov	r9, r3
 8003bd8:	688a      	ldr	r2, [r1, #8]
 8003bda:	690b      	ldr	r3, [r1, #16]
 8003bdc:	4607      	mov	r7, r0
 8003bde:	4293      	cmp	r3, r2
 8003be0:	bfb8      	it	lt
 8003be2:	4613      	movlt	r3, r2
 8003be4:	6033      	str	r3, [r6, #0]
 8003be6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bea:	460c      	mov	r4, r1
 8003bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bf0:	b10a      	cbz	r2, 8003bf6 <_printf_common+0x26>
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	6033      	str	r3, [r6, #0]
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	0699      	lsls	r1, r3, #26
 8003bfa:	bf42      	ittt	mi
 8003bfc:	6833      	ldrmi	r3, [r6, #0]
 8003bfe:	3302      	addmi	r3, #2
 8003c00:	6033      	strmi	r3, [r6, #0]
 8003c02:	6825      	ldr	r5, [r4, #0]
 8003c04:	f015 0506 	ands.w	r5, r5, #6
 8003c08:	d106      	bne.n	8003c18 <_printf_common+0x48>
 8003c0a:	f104 0a19 	add.w	sl, r4, #25
 8003c0e:	68e3      	ldr	r3, [r4, #12]
 8003c10:	6832      	ldr	r2, [r6, #0]
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	42ab      	cmp	r3, r5
 8003c16:	dc28      	bgt.n	8003c6a <_printf_common+0x9a>
 8003c18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c1c:	1e13      	subs	r3, r2, #0
 8003c1e:	6822      	ldr	r2, [r4, #0]
 8003c20:	bf18      	it	ne
 8003c22:	2301      	movne	r3, #1
 8003c24:	0692      	lsls	r2, r2, #26
 8003c26:	d42d      	bmi.n	8003c84 <_printf_common+0xb4>
 8003c28:	4649      	mov	r1, r9
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c30:	47c0      	blx	r8
 8003c32:	3001      	adds	r0, #1
 8003c34:	d020      	beq.n	8003c78 <_printf_common+0xa8>
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	68e5      	ldr	r5, [r4, #12]
 8003c3a:	f003 0306 	and.w	r3, r3, #6
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	bf18      	it	ne
 8003c42:	2500      	movne	r5, #0
 8003c44:	6832      	ldr	r2, [r6, #0]
 8003c46:	f04f 0600 	mov.w	r6, #0
 8003c4a:	68a3      	ldr	r3, [r4, #8]
 8003c4c:	bf08      	it	eq
 8003c4e:	1aad      	subeq	r5, r5, r2
 8003c50:	6922      	ldr	r2, [r4, #16]
 8003c52:	bf08      	it	eq
 8003c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	bfc4      	itt	gt
 8003c5c:	1a9b      	subgt	r3, r3, r2
 8003c5e:	18ed      	addgt	r5, r5, r3
 8003c60:	341a      	adds	r4, #26
 8003c62:	42b5      	cmp	r5, r6
 8003c64:	d11a      	bne.n	8003c9c <_printf_common+0xcc>
 8003c66:	2000      	movs	r0, #0
 8003c68:	e008      	b.n	8003c7c <_printf_common+0xac>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	4652      	mov	r2, sl
 8003c6e:	4649      	mov	r1, r9
 8003c70:	4638      	mov	r0, r7
 8003c72:	47c0      	blx	r8
 8003c74:	3001      	adds	r0, #1
 8003c76:	d103      	bne.n	8003c80 <_printf_common+0xb0>
 8003c78:	f04f 30ff 	mov.w	r0, #4294967295
 8003c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c80:	3501      	adds	r5, #1
 8003c82:	e7c4      	b.n	8003c0e <_printf_common+0x3e>
 8003c84:	2030      	movs	r0, #48	; 0x30
 8003c86:	18e1      	adds	r1, r4, r3
 8003c88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c92:	4422      	add	r2, r4
 8003c94:	3302      	adds	r3, #2
 8003c96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c9a:	e7c5      	b.n	8003c28 <_printf_common+0x58>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	4649      	mov	r1, r9
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	47c0      	blx	r8
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d0e6      	beq.n	8003c78 <_printf_common+0xa8>
 8003caa:	3601      	adds	r6, #1
 8003cac:	e7d9      	b.n	8003c62 <_printf_common+0x92>
	...

08003cb0 <_printf_i>:
 8003cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb4:	460c      	mov	r4, r1
 8003cb6:	7e27      	ldrb	r7, [r4, #24]
 8003cb8:	4691      	mov	r9, r2
 8003cba:	2f78      	cmp	r7, #120	; 0x78
 8003cbc:	4680      	mov	r8, r0
 8003cbe:	469a      	mov	sl, r3
 8003cc0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003cc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cc6:	d807      	bhi.n	8003cd8 <_printf_i+0x28>
 8003cc8:	2f62      	cmp	r7, #98	; 0x62
 8003cca:	d80a      	bhi.n	8003ce2 <_printf_i+0x32>
 8003ccc:	2f00      	cmp	r7, #0
 8003cce:	f000 80d9 	beq.w	8003e84 <_printf_i+0x1d4>
 8003cd2:	2f58      	cmp	r7, #88	; 0x58
 8003cd4:	f000 80a4 	beq.w	8003e20 <_printf_i+0x170>
 8003cd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ce0:	e03a      	b.n	8003d58 <_printf_i+0xa8>
 8003ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ce6:	2b15      	cmp	r3, #21
 8003ce8:	d8f6      	bhi.n	8003cd8 <_printf_i+0x28>
 8003cea:	a001      	add	r0, pc, #4	; (adr r0, 8003cf0 <_printf_i+0x40>)
 8003cec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003cf0:	08003d49 	.word	0x08003d49
 8003cf4:	08003d5d 	.word	0x08003d5d
 8003cf8:	08003cd9 	.word	0x08003cd9
 8003cfc:	08003cd9 	.word	0x08003cd9
 8003d00:	08003cd9 	.word	0x08003cd9
 8003d04:	08003cd9 	.word	0x08003cd9
 8003d08:	08003d5d 	.word	0x08003d5d
 8003d0c:	08003cd9 	.word	0x08003cd9
 8003d10:	08003cd9 	.word	0x08003cd9
 8003d14:	08003cd9 	.word	0x08003cd9
 8003d18:	08003cd9 	.word	0x08003cd9
 8003d1c:	08003e6b 	.word	0x08003e6b
 8003d20:	08003d8d 	.word	0x08003d8d
 8003d24:	08003e4d 	.word	0x08003e4d
 8003d28:	08003cd9 	.word	0x08003cd9
 8003d2c:	08003cd9 	.word	0x08003cd9
 8003d30:	08003e8d 	.word	0x08003e8d
 8003d34:	08003cd9 	.word	0x08003cd9
 8003d38:	08003d8d 	.word	0x08003d8d
 8003d3c:	08003cd9 	.word	0x08003cd9
 8003d40:	08003cd9 	.word	0x08003cd9
 8003d44:	08003e55 	.word	0x08003e55
 8003d48:	680b      	ldr	r3, [r1, #0]
 8003d4a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d4e:	1d1a      	adds	r2, r3, #4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	600a      	str	r2, [r1, #0]
 8003d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0a4      	b.n	8003ea6 <_printf_i+0x1f6>
 8003d5c:	6825      	ldr	r5, [r4, #0]
 8003d5e:	6808      	ldr	r0, [r1, #0]
 8003d60:	062e      	lsls	r6, r5, #24
 8003d62:	f100 0304 	add.w	r3, r0, #4
 8003d66:	d50a      	bpl.n	8003d7e <_printf_i+0xce>
 8003d68:	6805      	ldr	r5, [r0, #0]
 8003d6a:	600b      	str	r3, [r1, #0]
 8003d6c:	2d00      	cmp	r5, #0
 8003d6e:	da03      	bge.n	8003d78 <_printf_i+0xc8>
 8003d70:	232d      	movs	r3, #45	; 0x2d
 8003d72:	426d      	negs	r5, r5
 8003d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d78:	230a      	movs	r3, #10
 8003d7a:	485e      	ldr	r0, [pc, #376]	; (8003ef4 <_printf_i+0x244>)
 8003d7c:	e019      	b.n	8003db2 <_printf_i+0x102>
 8003d7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d82:	6805      	ldr	r5, [r0, #0]
 8003d84:	600b      	str	r3, [r1, #0]
 8003d86:	bf18      	it	ne
 8003d88:	b22d      	sxthne	r5, r5
 8003d8a:	e7ef      	b.n	8003d6c <_printf_i+0xbc>
 8003d8c:	680b      	ldr	r3, [r1, #0]
 8003d8e:	6825      	ldr	r5, [r4, #0]
 8003d90:	1d18      	adds	r0, r3, #4
 8003d92:	6008      	str	r0, [r1, #0]
 8003d94:	0628      	lsls	r0, r5, #24
 8003d96:	d501      	bpl.n	8003d9c <_printf_i+0xec>
 8003d98:	681d      	ldr	r5, [r3, #0]
 8003d9a:	e002      	b.n	8003da2 <_printf_i+0xf2>
 8003d9c:	0669      	lsls	r1, r5, #25
 8003d9e:	d5fb      	bpl.n	8003d98 <_printf_i+0xe8>
 8003da0:	881d      	ldrh	r5, [r3, #0]
 8003da2:	2f6f      	cmp	r7, #111	; 0x6f
 8003da4:	bf0c      	ite	eq
 8003da6:	2308      	moveq	r3, #8
 8003da8:	230a      	movne	r3, #10
 8003daa:	4852      	ldr	r0, [pc, #328]	; (8003ef4 <_printf_i+0x244>)
 8003dac:	2100      	movs	r1, #0
 8003dae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003db2:	6866      	ldr	r6, [r4, #4]
 8003db4:	2e00      	cmp	r6, #0
 8003db6:	bfa8      	it	ge
 8003db8:	6821      	ldrge	r1, [r4, #0]
 8003dba:	60a6      	str	r6, [r4, #8]
 8003dbc:	bfa4      	itt	ge
 8003dbe:	f021 0104 	bicge.w	r1, r1, #4
 8003dc2:	6021      	strge	r1, [r4, #0]
 8003dc4:	b90d      	cbnz	r5, 8003dca <_printf_i+0x11a>
 8003dc6:	2e00      	cmp	r6, #0
 8003dc8:	d04d      	beq.n	8003e66 <_printf_i+0x1b6>
 8003dca:	4616      	mov	r6, r2
 8003dcc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dd0:	fb03 5711 	mls	r7, r3, r1, r5
 8003dd4:	5dc7      	ldrb	r7, [r0, r7]
 8003dd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dda:	462f      	mov	r7, r5
 8003ddc:	42bb      	cmp	r3, r7
 8003dde:	460d      	mov	r5, r1
 8003de0:	d9f4      	bls.n	8003dcc <_printf_i+0x11c>
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d10b      	bne.n	8003dfe <_printf_i+0x14e>
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	07df      	lsls	r7, r3, #31
 8003dea:	d508      	bpl.n	8003dfe <_printf_i+0x14e>
 8003dec:	6923      	ldr	r3, [r4, #16]
 8003dee:	6861      	ldr	r1, [r4, #4]
 8003df0:	4299      	cmp	r1, r3
 8003df2:	bfde      	ittt	le
 8003df4:	2330      	movle	r3, #48	; 0x30
 8003df6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dfa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003dfe:	1b92      	subs	r2, r2, r6
 8003e00:	6122      	str	r2, [r4, #16]
 8003e02:	464b      	mov	r3, r9
 8003e04:	4621      	mov	r1, r4
 8003e06:	4640      	mov	r0, r8
 8003e08:	f8cd a000 	str.w	sl, [sp]
 8003e0c:	aa03      	add	r2, sp, #12
 8003e0e:	f7ff fedf 	bl	8003bd0 <_printf_common>
 8003e12:	3001      	adds	r0, #1
 8003e14:	d14c      	bne.n	8003eb0 <_printf_i+0x200>
 8003e16:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1a:	b004      	add	sp, #16
 8003e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e20:	4834      	ldr	r0, [pc, #208]	; (8003ef4 <_printf_i+0x244>)
 8003e22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e26:	680e      	ldr	r6, [r1, #0]
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003e2e:	061f      	lsls	r7, r3, #24
 8003e30:	600e      	str	r6, [r1, #0]
 8003e32:	d514      	bpl.n	8003e5e <_printf_i+0x1ae>
 8003e34:	07d9      	lsls	r1, r3, #31
 8003e36:	bf44      	itt	mi
 8003e38:	f043 0320 	orrmi.w	r3, r3, #32
 8003e3c:	6023      	strmi	r3, [r4, #0]
 8003e3e:	b91d      	cbnz	r5, 8003e48 <_printf_i+0x198>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	f023 0320 	bic.w	r3, r3, #32
 8003e46:	6023      	str	r3, [r4, #0]
 8003e48:	2310      	movs	r3, #16
 8003e4a:	e7af      	b.n	8003dac <_printf_i+0xfc>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	f043 0320 	orr.w	r3, r3, #32
 8003e52:	6023      	str	r3, [r4, #0]
 8003e54:	2378      	movs	r3, #120	; 0x78
 8003e56:	4828      	ldr	r0, [pc, #160]	; (8003ef8 <_printf_i+0x248>)
 8003e58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e5c:	e7e3      	b.n	8003e26 <_printf_i+0x176>
 8003e5e:	065e      	lsls	r6, r3, #25
 8003e60:	bf48      	it	mi
 8003e62:	b2ad      	uxthmi	r5, r5
 8003e64:	e7e6      	b.n	8003e34 <_printf_i+0x184>
 8003e66:	4616      	mov	r6, r2
 8003e68:	e7bb      	b.n	8003de2 <_printf_i+0x132>
 8003e6a:	680b      	ldr	r3, [r1, #0]
 8003e6c:	6826      	ldr	r6, [r4, #0]
 8003e6e:	1d1d      	adds	r5, r3, #4
 8003e70:	6960      	ldr	r0, [r4, #20]
 8003e72:	600d      	str	r5, [r1, #0]
 8003e74:	0635      	lsls	r5, r6, #24
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	d501      	bpl.n	8003e7e <_printf_i+0x1ce>
 8003e7a:	6018      	str	r0, [r3, #0]
 8003e7c:	e002      	b.n	8003e84 <_printf_i+0x1d4>
 8003e7e:	0671      	lsls	r1, r6, #25
 8003e80:	d5fb      	bpl.n	8003e7a <_printf_i+0x1ca>
 8003e82:	8018      	strh	r0, [r3, #0]
 8003e84:	2300      	movs	r3, #0
 8003e86:	4616      	mov	r6, r2
 8003e88:	6123      	str	r3, [r4, #16]
 8003e8a:	e7ba      	b.n	8003e02 <_printf_i+0x152>
 8003e8c:	680b      	ldr	r3, [r1, #0]
 8003e8e:	1d1a      	adds	r2, r3, #4
 8003e90:	600a      	str	r2, [r1, #0]
 8003e92:	681e      	ldr	r6, [r3, #0]
 8003e94:	2100      	movs	r1, #0
 8003e96:	4630      	mov	r0, r6
 8003e98:	6862      	ldr	r2, [r4, #4]
 8003e9a:	f000 feb7 	bl	8004c0c <memchr>
 8003e9e:	b108      	cbz	r0, 8003ea4 <_printf_i+0x1f4>
 8003ea0:	1b80      	subs	r0, r0, r6
 8003ea2:	6060      	str	r0, [r4, #4]
 8003ea4:	6863      	ldr	r3, [r4, #4]
 8003ea6:	6123      	str	r3, [r4, #16]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eae:	e7a8      	b.n	8003e02 <_printf_i+0x152>
 8003eb0:	4632      	mov	r2, r6
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	4640      	mov	r0, r8
 8003eb6:	6923      	ldr	r3, [r4, #16]
 8003eb8:	47d0      	blx	sl
 8003eba:	3001      	adds	r0, #1
 8003ebc:	d0ab      	beq.n	8003e16 <_printf_i+0x166>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	079b      	lsls	r3, r3, #30
 8003ec2:	d413      	bmi.n	8003eec <_printf_i+0x23c>
 8003ec4:	68e0      	ldr	r0, [r4, #12]
 8003ec6:	9b03      	ldr	r3, [sp, #12]
 8003ec8:	4298      	cmp	r0, r3
 8003eca:	bfb8      	it	lt
 8003ecc:	4618      	movlt	r0, r3
 8003ece:	e7a4      	b.n	8003e1a <_printf_i+0x16a>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	4632      	mov	r2, r6
 8003ed4:	4649      	mov	r1, r9
 8003ed6:	4640      	mov	r0, r8
 8003ed8:	47d0      	blx	sl
 8003eda:	3001      	adds	r0, #1
 8003edc:	d09b      	beq.n	8003e16 <_printf_i+0x166>
 8003ede:	3501      	adds	r5, #1
 8003ee0:	68e3      	ldr	r3, [r4, #12]
 8003ee2:	9903      	ldr	r1, [sp, #12]
 8003ee4:	1a5b      	subs	r3, r3, r1
 8003ee6:	42ab      	cmp	r3, r5
 8003ee8:	dcf2      	bgt.n	8003ed0 <_printf_i+0x220>
 8003eea:	e7eb      	b.n	8003ec4 <_printf_i+0x214>
 8003eec:	2500      	movs	r5, #0
 8003eee:	f104 0619 	add.w	r6, r4, #25
 8003ef2:	e7f5      	b.n	8003ee0 <_printf_i+0x230>
 8003ef4:	0800603e 	.word	0x0800603e
 8003ef8:	0800604f 	.word	0x0800604f

08003efc <quorem>:
 8003efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f00:	6903      	ldr	r3, [r0, #16]
 8003f02:	690c      	ldr	r4, [r1, #16]
 8003f04:	4607      	mov	r7, r0
 8003f06:	42a3      	cmp	r3, r4
 8003f08:	f2c0 8083 	blt.w	8004012 <quorem+0x116>
 8003f0c:	3c01      	subs	r4, #1
 8003f0e:	f100 0514 	add.w	r5, r0, #20
 8003f12:	f101 0814 	add.w	r8, r1, #20
 8003f16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003f20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f24:	3301      	adds	r3, #1
 8003f26:	429a      	cmp	r2, r3
 8003f28:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003f30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003f34:	d332      	bcc.n	8003f9c <quorem+0xa0>
 8003f36:	f04f 0e00 	mov.w	lr, #0
 8003f3a:	4640      	mov	r0, r8
 8003f3c:	46ac      	mov	ip, r5
 8003f3e:	46f2      	mov	sl, lr
 8003f40:	f850 2b04 	ldr.w	r2, [r0], #4
 8003f44:	b293      	uxth	r3, r2
 8003f46:	fb06 e303 	mla	r3, r6, r3, lr
 8003f4a:	0c12      	lsrs	r2, r2, #16
 8003f4c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003f50:	fb06 e202 	mla	r2, r6, r2, lr
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	ebaa 0303 	sub.w	r3, sl, r3
 8003f5a:	f8dc a000 	ldr.w	sl, [ip]
 8003f5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003f62:	fa1f fa8a 	uxth.w	sl, sl
 8003f66:	4453      	add	r3, sl
 8003f68:	fa1f fa82 	uxth.w	sl, r2
 8003f6c:	f8dc 2000 	ldr.w	r2, [ip]
 8003f70:	4581      	cmp	r9, r0
 8003f72:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003f76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f80:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003f84:	f84c 3b04 	str.w	r3, [ip], #4
 8003f88:	d2da      	bcs.n	8003f40 <quorem+0x44>
 8003f8a:	f855 300b 	ldr.w	r3, [r5, fp]
 8003f8e:	b92b      	cbnz	r3, 8003f9c <quorem+0xa0>
 8003f90:	9b01      	ldr	r3, [sp, #4]
 8003f92:	3b04      	subs	r3, #4
 8003f94:	429d      	cmp	r5, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	d32f      	bcc.n	8003ffa <quorem+0xfe>
 8003f9a:	613c      	str	r4, [r7, #16]
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	f001 f8cb 	bl	8005138 <__mcmp>
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	db25      	blt.n	8003ff2 <quorem+0xf6>
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f04f 0c00 	mov.w	ip, #0
 8003fac:	3601      	adds	r6, #1
 8003fae:	f858 1b04 	ldr.w	r1, [r8], #4
 8003fb2:	f8d0 e000 	ldr.w	lr, [r0]
 8003fb6:	b28b      	uxth	r3, r1
 8003fb8:	ebac 0303 	sub.w	r3, ip, r3
 8003fbc:	fa1f f28e 	uxth.w	r2, lr
 8003fc0:	4413      	add	r3, r2
 8003fc2:	0c0a      	lsrs	r2, r1, #16
 8003fc4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003fc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fd2:	45c1      	cmp	r9, r8
 8003fd4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003fd8:	f840 3b04 	str.w	r3, [r0], #4
 8003fdc:	d2e7      	bcs.n	8003fae <quorem+0xb2>
 8003fde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fe2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fe6:	b922      	cbnz	r2, 8003ff2 <quorem+0xf6>
 8003fe8:	3b04      	subs	r3, #4
 8003fea:	429d      	cmp	r5, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	d30a      	bcc.n	8004006 <quorem+0x10a>
 8003ff0:	613c      	str	r4, [r7, #16]
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	b003      	add	sp, #12
 8003ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	3b04      	subs	r3, #4
 8003ffe:	2a00      	cmp	r2, #0
 8004000:	d1cb      	bne.n	8003f9a <quorem+0x9e>
 8004002:	3c01      	subs	r4, #1
 8004004:	e7c6      	b.n	8003f94 <quorem+0x98>
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	3b04      	subs	r3, #4
 800400a:	2a00      	cmp	r2, #0
 800400c:	d1f0      	bne.n	8003ff0 <quorem+0xf4>
 800400e:	3c01      	subs	r4, #1
 8004010:	e7eb      	b.n	8003fea <quorem+0xee>
 8004012:	2000      	movs	r0, #0
 8004014:	e7ee      	b.n	8003ff4 <quorem+0xf8>
	...

08004018 <_dtoa_r>:
 8004018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401c:	4616      	mov	r6, r2
 800401e:	461f      	mov	r7, r3
 8004020:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004022:	b099      	sub	sp, #100	; 0x64
 8004024:	4605      	mov	r5, r0
 8004026:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800402a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800402e:	b974      	cbnz	r4, 800404e <_dtoa_r+0x36>
 8004030:	2010      	movs	r0, #16
 8004032:	f000 fde3 	bl	8004bfc <malloc>
 8004036:	4602      	mov	r2, r0
 8004038:	6268      	str	r0, [r5, #36]	; 0x24
 800403a:	b920      	cbnz	r0, 8004046 <_dtoa_r+0x2e>
 800403c:	21ea      	movs	r1, #234	; 0xea
 800403e:	4bae      	ldr	r3, [pc, #696]	; (80042f8 <_dtoa_r+0x2e0>)
 8004040:	48ae      	ldr	r0, [pc, #696]	; (80042fc <_dtoa_r+0x2e4>)
 8004042:	f001 fa45 	bl	80054d0 <__assert_func>
 8004046:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800404a:	6004      	str	r4, [r0, #0]
 800404c:	60c4      	str	r4, [r0, #12]
 800404e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004050:	6819      	ldr	r1, [r3, #0]
 8004052:	b151      	cbz	r1, 800406a <_dtoa_r+0x52>
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	2301      	movs	r3, #1
 8004058:	4093      	lsls	r3, r2
 800405a:	604a      	str	r2, [r1, #4]
 800405c:	608b      	str	r3, [r1, #8]
 800405e:	4628      	mov	r0, r5
 8004060:	f000 fe30 	bl	8004cc4 <_Bfree>
 8004064:	2200      	movs	r2, #0
 8004066:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	1e3b      	subs	r3, r7, #0
 800406c:	bfaf      	iteee	ge
 800406e:	2300      	movge	r3, #0
 8004070:	2201      	movlt	r2, #1
 8004072:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004076:	9305      	strlt	r3, [sp, #20]
 8004078:	bfa8      	it	ge
 800407a:	f8c8 3000 	strge.w	r3, [r8]
 800407e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004082:	4b9f      	ldr	r3, [pc, #636]	; (8004300 <_dtoa_r+0x2e8>)
 8004084:	bfb8      	it	lt
 8004086:	f8c8 2000 	strlt.w	r2, [r8]
 800408a:	ea33 0309 	bics.w	r3, r3, r9
 800408e:	d119      	bne.n	80040c4 <_dtoa_r+0xac>
 8004090:	f242 730f 	movw	r3, #9999	; 0x270f
 8004094:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800409c:	4333      	orrs	r3, r6
 800409e:	f000 8580 	beq.w	8004ba2 <_dtoa_r+0xb8a>
 80040a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80040a4:	b953      	cbnz	r3, 80040bc <_dtoa_r+0xa4>
 80040a6:	4b97      	ldr	r3, [pc, #604]	; (8004304 <_dtoa_r+0x2ec>)
 80040a8:	e022      	b.n	80040f0 <_dtoa_r+0xd8>
 80040aa:	4b97      	ldr	r3, [pc, #604]	; (8004308 <_dtoa_r+0x2f0>)
 80040ac:	9308      	str	r3, [sp, #32]
 80040ae:	3308      	adds	r3, #8
 80040b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	9808      	ldr	r0, [sp, #32]
 80040b6:	b019      	add	sp, #100	; 0x64
 80040b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040bc:	4b91      	ldr	r3, [pc, #580]	; (8004304 <_dtoa_r+0x2ec>)
 80040be:	9308      	str	r3, [sp, #32]
 80040c0:	3303      	adds	r3, #3
 80040c2:	e7f5      	b.n	80040b0 <_dtoa_r+0x98>
 80040c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80040c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80040cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80040d0:	2200      	movs	r2, #0
 80040d2:	2300      	movs	r3, #0
 80040d4:	f7fc fc68 	bl	80009a8 <__aeabi_dcmpeq>
 80040d8:	4680      	mov	r8, r0
 80040da:	b158      	cbz	r0, 80040f4 <_dtoa_r+0xdc>
 80040dc:	2301      	movs	r3, #1
 80040de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 8559 	beq.w	8004b9c <_dtoa_r+0xb84>
 80040ea:	4888      	ldr	r0, [pc, #544]	; (800430c <_dtoa_r+0x2f4>)
 80040ec:	6018      	str	r0, [r3, #0]
 80040ee:	1e43      	subs	r3, r0, #1
 80040f0:	9308      	str	r3, [sp, #32]
 80040f2:	e7df      	b.n	80040b4 <_dtoa_r+0x9c>
 80040f4:	ab16      	add	r3, sp, #88	; 0x58
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	ab17      	add	r3, sp, #92	; 0x5c
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	4628      	mov	r0, r5
 80040fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004102:	f001 f8c5 	bl	8005290 <__d2b>
 8004106:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800410a:	4682      	mov	sl, r0
 800410c:	2c00      	cmp	r4, #0
 800410e:	d07e      	beq.n	800420e <_dtoa_r+0x1f6>
 8004110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004116:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800411a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800411e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004122:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004126:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800412a:	2200      	movs	r2, #0
 800412c:	4b78      	ldr	r3, [pc, #480]	; (8004310 <_dtoa_r+0x2f8>)
 800412e:	f7fc f81b 	bl	8000168 <__aeabi_dsub>
 8004132:	a36b      	add	r3, pc, #428	; (adr r3, 80042e0 <_dtoa_r+0x2c8>)
 8004134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004138:	f7fc f9ce 	bl	80004d8 <__aeabi_dmul>
 800413c:	a36a      	add	r3, pc, #424	; (adr r3, 80042e8 <_dtoa_r+0x2d0>)
 800413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004142:	f7fc f813 	bl	800016c <__adddf3>
 8004146:	4606      	mov	r6, r0
 8004148:	4620      	mov	r0, r4
 800414a:	460f      	mov	r7, r1
 800414c:	f7fc f95a 	bl	8000404 <__aeabi_i2d>
 8004150:	a367      	add	r3, pc, #412	; (adr r3, 80042f0 <_dtoa_r+0x2d8>)
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f7fc f9bf 	bl	80004d8 <__aeabi_dmul>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4630      	mov	r0, r6
 8004160:	4639      	mov	r1, r7
 8004162:	f7fc f803 	bl	800016c <__adddf3>
 8004166:	4606      	mov	r6, r0
 8004168:	460f      	mov	r7, r1
 800416a:	f7fc fc65 	bl	8000a38 <__aeabi_d2iz>
 800416e:	2200      	movs	r2, #0
 8004170:	4681      	mov	r9, r0
 8004172:	2300      	movs	r3, #0
 8004174:	4630      	mov	r0, r6
 8004176:	4639      	mov	r1, r7
 8004178:	f7fc fc20 	bl	80009bc <__aeabi_dcmplt>
 800417c:	b148      	cbz	r0, 8004192 <_dtoa_r+0x17a>
 800417e:	4648      	mov	r0, r9
 8004180:	f7fc f940 	bl	8000404 <__aeabi_i2d>
 8004184:	4632      	mov	r2, r6
 8004186:	463b      	mov	r3, r7
 8004188:	f7fc fc0e 	bl	80009a8 <__aeabi_dcmpeq>
 800418c:	b908      	cbnz	r0, 8004192 <_dtoa_r+0x17a>
 800418e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004192:	f1b9 0f16 	cmp.w	r9, #22
 8004196:	d857      	bhi.n	8004248 <_dtoa_r+0x230>
 8004198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800419c:	4b5d      	ldr	r3, [pc, #372]	; (8004314 <_dtoa_r+0x2fc>)
 800419e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	f7fc fc09 	bl	80009bc <__aeabi_dcmplt>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d04e      	beq.n	800424c <_dtoa_r+0x234>
 80041ae:	2300      	movs	r3, #0
 80041b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80041b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80041b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80041b8:	1b1c      	subs	r4, r3, r4
 80041ba:	1e63      	subs	r3, r4, #1
 80041bc:	9309      	str	r3, [sp, #36]	; 0x24
 80041be:	bf49      	itett	mi
 80041c0:	f1c4 0301 	rsbmi	r3, r4, #1
 80041c4:	2300      	movpl	r3, #0
 80041c6:	9306      	strmi	r3, [sp, #24]
 80041c8:	2300      	movmi	r3, #0
 80041ca:	bf54      	ite	pl
 80041cc:	9306      	strpl	r3, [sp, #24]
 80041ce:	9309      	strmi	r3, [sp, #36]	; 0x24
 80041d0:	f1b9 0f00 	cmp.w	r9, #0
 80041d4:	db3c      	blt.n	8004250 <_dtoa_r+0x238>
 80041d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041d8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80041dc:	444b      	add	r3, r9
 80041de:	9309      	str	r3, [sp, #36]	; 0x24
 80041e0:	2300      	movs	r3, #0
 80041e2:	930a      	str	r3, [sp, #40]	; 0x28
 80041e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041e6:	2b09      	cmp	r3, #9
 80041e8:	d86c      	bhi.n	80042c4 <_dtoa_r+0x2ac>
 80041ea:	2b05      	cmp	r3, #5
 80041ec:	bfc4      	itt	gt
 80041ee:	3b04      	subgt	r3, #4
 80041f0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80041f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041f4:	bfc8      	it	gt
 80041f6:	2400      	movgt	r4, #0
 80041f8:	f1a3 0302 	sub.w	r3, r3, #2
 80041fc:	bfd8      	it	le
 80041fe:	2401      	movle	r4, #1
 8004200:	2b03      	cmp	r3, #3
 8004202:	f200 808b 	bhi.w	800431c <_dtoa_r+0x304>
 8004206:	e8df f003 	tbb	[pc, r3]
 800420a:	4f2d      	.short	0x4f2d
 800420c:	5b4d      	.short	0x5b4d
 800420e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004212:	441c      	add	r4, r3
 8004214:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004218:	2b20      	cmp	r3, #32
 800421a:	bfc3      	ittte	gt
 800421c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004220:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004224:	fa09 f303 	lslgt.w	r3, r9, r3
 8004228:	f1c3 0320 	rsble	r3, r3, #32
 800422c:	bfc6      	itte	gt
 800422e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004232:	4318      	orrgt	r0, r3
 8004234:	fa06 f003 	lslle.w	r0, r6, r3
 8004238:	f7fc f8d4 	bl	80003e4 <__aeabi_ui2d>
 800423c:	2301      	movs	r3, #1
 800423e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004242:	3c01      	subs	r4, #1
 8004244:	9313      	str	r3, [sp, #76]	; 0x4c
 8004246:	e770      	b.n	800412a <_dtoa_r+0x112>
 8004248:	2301      	movs	r3, #1
 800424a:	e7b3      	b.n	80041b4 <_dtoa_r+0x19c>
 800424c:	900f      	str	r0, [sp, #60]	; 0x3c
 800424e:	e7b2      	b.n	80041b6 <_dtoa_r+0x19e>
 8004250:	9b06      	ldr	r3, [sp, #24]
 8004252:	eba3 0309 	sub.w	r3, r3, r9
 8004256:	9306      	str	r3, [sp, #24]
 8004258:	f1c9 0300 	rsb	r3, r9, #0
 800425c:	930a      	str	r3, [sp, #40]	; 0x28
 800425e:	2300      	movs	r3, #0
 8004260:	930e      	str	r3, [sp, #56]	; 0x38
 8004262:	e7bf      	b.n	80041e4 <_dtoa_r+0x1cc>
 8004264:	2300      	movs	r3, #0
 8004266:	930b      	str	r3, [sp, #44]	; 0x2c
 8004268:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800426a:	2b00      	cmp	r3, #0
 800426c:	dc59      	bgt.n	8004322 <_dtoa_r+0x30a>
 800426e:	f04f 0b01 	mov.w	fp, #1
 8004272:	465b      	mov	r3, fp
 8004274:	f8cd b008 	str.w	fp, [sp, #8]
 8004278:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800427c:	2200      	movs	r2, #0
 800427e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004280:	6042      	str	r2, [r0, #4]
 8004282:	2204      	movs	r2, #4
 8004284:	f102 0614 	add.w	r6, r2, #20
 8004288:	429e      	cmp	r6, r3
 800428a:	6841      	ldr	r1, [r0, #4]
 800428c:	d94f      	bls.n	800432e <_dtoa_r+0x316>
 800428e:	4628      	mov	r0, r5
 8004290:	f000 fcd8 	bl	8004c44 <_Balloc>
 8004294:	9008      	str	r0, [sp, #32]
 8004296:	2800      	cmp	r0, #0
 8004298:	d14d      	bne.n	8004336 <_dtoa_r+0x31e>
 800429a:	4602      	mov	r2, r0
 800429c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80042a0:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <_dtoa_r+0x300>)
 80042a2:	e6cd      	b.n	8004040 <_dtoa_r+0x28>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e7de      	b.n	8004266 <_dtoa_r+0x24e>
 80042a8:	2300      	movs	r3, #0
 80042aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80042ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80042ae:	eb09 0b03 	add.w	fp, r9, r3
 80042b2:	f10b 0301 	add.w	r3, fp, #1
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	9302      	str	r3, [sp, #8]
 80042ba:	bfb8      	it	lt
 80042bc:	2301      	movlt	r3, #1
 80042be:	e7dd      	b.n	800427c <_dtoa_r+0x264>
 80042c0:	2301      	movs	r3, #1
 80042c2:	e7f2      	b.n	80042aa <_dtoa_r+0x292>
 80042c4:	2401      	movs	r4, #1
 80042c6:	2300      	movs	r3, #0
 80042c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80042ca:	9322      	str	r3, [sp, #136]	; 0x88
 80042cc:	f04f 3bff 	mov.w	fp, #4294967295
 80042d0:	2200      	movs	r2, #0
 80042d2:	2312      	movs	r3, #18
 80042d4:	f8cd b008 	str.w	fp, [sp, #8]
 80042d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80042da:	e7cf      	b.n	800427c <_dtoa_r+0x264>
 80042dc:	f3af 8000 	nop.w
 80042e0:	636f4361 	.word	0x636f4361
 80042e4:	3fd287a7 	.word	0x3fd287a7
 80042e8:	8b60c8b3 	.word	0x8b60c8b3
 80042ec:	3fc68a28 	.word	0x3fc68a28
 80042f0:	509f79fb 	.word	0x509f79fb
 80042f4:	3fd34413 	.word	0x3fd34413
 80042f8:	0800606d 	.word	0x0800606d
 80042fc:	08006084 	.word	0x08006084
 8004300:	7ff00000 	.word	0x7ff00000
 8004304:	08006069 	.word	0x08006069
 8004308:	08006060 	.word	0x08006060
 800430c:	0800603d 	.word	0x0800603d
 8004310:	3ff80000 	.word	0x3ff80000
 8004314:	08006180 	.word	0x08006180
 8004318:	080060e3 	.word	0x080060e3
 800431c:	2301      	movs	r3, #1
 800431e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004320:	e7d4      	b.n	80042cc <_dtoa_r+0x2b4>
 8004322:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004326:	465b      	mov	r3, fp
 8004328:	f8cd b008 	str.w	fp, [sp, #8]
 800432c:	e7a6      	b.n	800427c <_dtoa_r+0x264>
 800432e:	3101      	adds	r1, #1
 8004330:	6041      	str	r1, [r0, #4]
 8004332:	0052      	lsls	r2, r2, #1
 8004334:	e7a6      	b.n	8004284 <_dtoa_r+0x26c>
 8004336:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004338:	9a08      	ldr	r2, [sp, #32]
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	9b02      	ldr	r3, [sp, #8]
 800433e:	2b0e      	cmp	r3, #14
 8004340:	f200 80a8 	bhi.w	8004494 <_dtoa_r+0x47c>
 8004344:	2c00      	cmp	r4, #0
 8004346:	f000 80a5 	beq.w	8004494 <_dtoa_r+0x47c>
 800434a:	f1b9 0f00 	cmp.w	r9, #0
 800434e:	dd34      	ble.n	80043ba <_dtoa_r+0x3a2>
 8004350:	4a9a      	ldr	r2, [pc, #616]	; (80045bc <_dtoa_r+0x5a4>)
 8004352:	f009 030f 	and.w	r3, r9, #15
 8004356:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800435a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800435e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004362:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004366:	ea4f 1429 	mov.w	r4, r9, asr #4
 800436a:	d016      	beq.n	800439a <_dtoa_r+0x382>
 800436c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004370:	4b93      	ldr	r3, [pc, #588]	; (80045c0 <_dtoa_r+0x5a8>)
 8004372:	2703      	movs	r7, #3
 8004374:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004378:	f7fc f9d8 	bl	800072c <__aeabi_ddiv>
 800437c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004380:	f004 040f 	and.w	r4, r4, #15
 8004384:	4e8e      	ldr	r6, [pc, #568]	; (80045c0 <_dtoa_r+0x5a8>)
 8004386:	b954      	cbnz	r4, 800439e <_dtoa_r+0x386>
 8004388:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800438c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004390:	f7fc f9cc 	bl	800072c <__aeabi_ddiv>
 8004394:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004398:	e029      	b.n	80043ee <_dtoa_r+0x3d6>
 800439a:	2702      	movs	r7, #2
 800439c:	e7f2      	b.n	8004384 <_dtoa_r+0x36c>
 800439e:	07e1      	lsls	r1, r4, #31
 80043a0:	d508      	bpl.n	80043b4 <_dtoa_r+0x39c>
 80043a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80043aa:	f7fc f895 	bl	80004d8 <__aeabi_dmul>
 80043ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80043b2:	3701      	adds	r7, #1
 80043b4:	1064      	asrs	r4, r4, #1
 80043b6:	3608      	adds	r6, #8
 80043b8:	e7e5      	b.n	8004386 <_dtoa_r+0x36e>
 80043ba:	f000 80a5 	beq.w	8004508 <_dtoa_r+0x4f0>
 80043be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80043c2:	f1c9 0400 	rsb	r4, r9, #0
 80043c6:	4b7d      	ldr	r3, [pc, #500]	; (80045bc <_dtoa_r+0x5a4>)
 80043c8:	f004 020f 	and.w	r2, r4, #15
 80043cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	f7fc f880 	bl	80004d8 <__aeabi_dmul>
 80043d8:	2702      	movs	r7, #2
 80043da:	2300      	movs	r3, #0
 80043dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043e0:	4e77      	ldr	r6, [pc, #476]	; (80045c0 <_dtoa_r+0x5a8>)
 80043e2:	1124      	asrs	r4, r4, #4
 80043e4:	2c00      	cmp	r4, #0
 80043e6:	f040 8084 	bne.w	80044f2 <_dtoa_r+0x4da>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1d2      	bne.n	8004394 <_dtoa_r+0x37c>
 80043ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 808b 	beq.w	800450c <_dtoa_r+0x4f4>
 80043f6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80043fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80043fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004402:	2200      	movs	r2, #0
 8004404:	4b6f      	ldr	r3, [pc, #444]	; (80045c4 <_dtoa_r+0x5ac>)
 8004406:	f7fc fad9 	bl	80009bc <__aeabi_dcmplt>
 800440a:	2800      	cmp	r0, #0
 800440c:	d07e      	beq.n	800450c <_dtoa_r+0x4f4>
 800440e:	9b02      	ldr	r3, [sp, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d07b      	beq.n	800450c <_dtoa_r+0x4f4>
 8004414:	f1bb 0f00 	cmp.w	fp, #0
 8004418:	dd38      	ble.n	800448c <_dtoa_r+0x474>
 800441a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800441e:	2200      	movs	r2, #0
 8004420:	4b69      	ldr	r3, [pc, #420]	; (80045c8 <_dtoa_r+0x5b0>)
 8004422:	f7fc f859 	bl	80004d8 <__aeabi_dmul>
 8004426:	465c      	mov	r4, fp
 8004428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800442c:	f109 38ff 	add.w	r8, r9, #4294967295
 8004430:	3701      	adds	r7, #1
 8004432:	4638      	mov	r0, r7
 8004434:	f7fb ffe6 	bl	8000404 <__aeabi_i2d>
 8004438:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800443c:	f7fc f84c 	bl	80004d8 <__aeabi_dmul>
 8004440:	2200      	movs	r2, #0
 8004442:	4b62      	ldr	r3, [pc, #392]	; (80045cc <_dtoa_r+0x5b4>)
 8004444:	f7fb fe92 	bl	800016c <__adddf3>
 8004448:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800444c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004450:	9611      	str	r6, [sp, #68]	; 0x44
 8004452:	2c00      	cmp	r4, #0
 8004454:	d15d      	bne.n	8004512 <_dtoa_r+0x4fa>
 8004456:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800445a:	2200      	movs	r2, #0
 800445c:	4b5c      	ldr	r3, [pc, #368]	; (80045d0 <_dtoa_r+0x5b8>)
 800445e:	f7fb fe83 	bl	8000168 <__aeabi_dsub>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800446a:	4633      	mov	r3, r6
 800446c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800446e:	f7fc fac3 	bl	80009f8 <__aeabi_dcmpgt>
 8004472:	2800      	cmp	r0, #0
 8004474:	f040 829e 	bne.w	80049b4 <_dtoa_r+0x99c>
 8004478:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800447c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800447e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004482:	f7fc fa9b 	bl	80009bc <__aeabi_dcmplt>
 8004486:	2800      	cmp	r0, #0
 8004488:	f040 8292 	bne.w	80049b0 <_dtoa_r+0x998>
 800448c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004490:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004496:	2b00      	cmp	r3, #0
 8004498:	f2c0 8153 	blt.w	8004742 <_dtoa_r+0x72a>
 800449c:	f1b9 0f0e 	cmp.w	r9, #14
 80044a0:	f300 814f 	bgt.w	8004742 <_dtoa_r+0x72a>
 80044a4:	4b45      	ldr	r3, [pc, #276]	; (80045bc <_dtoa_r+0x5a4>)
 80044a6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80044aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80044b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f280 80db 	bge.w	8004670 <_dtoa_r+0x658>
 80044ba:	9b02      	ldr	r3, [sp, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f300 80d7 	bgt.w	8004670 <_dtoa_r+0x658>
 80044c2:	f040 8274 	bne.w	80049ae <_dtoa_r+0x996>
 80044c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044ca:	2200      	movs	r2, #0
 80044cc:	4b40      	ldr	r3, [pc, #256]	; (80045d0 <_dtoa_r+0x5b8>)
 80044ce:	f7fc f803 	bl	80004d8 <__aeabi_dmul>
 80044d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044d6:	f7fc fa85 	bl	80009e4 <__aeabi_dcmpge>
 80044da:	9c02      	ldr	r4, [sp, #8]
 80044dc:	4626      	mov	r6, r4
 80044de:	2800      	cmp	r0, #0
 80044e0:	f040 824a 	bne.w	8004978 <_dtoa_r+0x960>
 80044e4:	2331      	movs	r3, #49	; 0x31
 80044e6:	9f08      	ldr	r7, [sp, #32]
 80044e8:	f109 0901 	add.w	r9, r9, #1
 80044ec:	f807 3b01 	strb.w	r3, [r7], #1
 80044f0:	e246      	b.n	8004980 <_dtoa_r+0x968>
 80044f2:	07e2      	lsls	r2, r4, #31
 80044f4:	d505      	bpl.n	8004502 <_dtoa_r+0x4ea>
 80044f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80044fa:	f7fb ffed 	bl	80004d8 <__aeabi_dmul>
 80044fe:	2301      	movs	r3, #1
 8004500:	3701      	adds	r7, #1
 8004502:	1064      	asrs	r4, r4, #1
 8004504:	3608      	adds	r6, #8
 8004506:	e76d      	b.n	80043e4 <_dtoa_r+0x3cc>
 8004508:	2702      	movs	r7, #2
 800450a:	e770      	b.n	80043ee <_dtoa_r+0x3d6>
 800450c:	46c8      	mov	r8, r9
 800450e:	9c02      	ldr	r4, [sp, #8]
 8004510:	e78f      	b.n	8004432 <_dtoa_r+0x41a>
 8004512:	9908      	ldr	r1, [sp, #32]
 8004514:	4b29      	ldr	r3, [pc, #164]	; (80045bc <_dtoa_r+0x5a4>)
 8004516:	4421      	add	r1, r4
 8004518:	9112      	str	r1, [sp, #72]	; 0x48
 800451a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800451c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004520:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004524:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004528:	2900      	cmp	r1, #0
 800452a:	d055      	beq.n	80045d8 <_dtoa_r+0x5c0>
 800452c:	2000      	movs	r0, #0
 800452e:	4929      	ldr	r1, [pc, #164]	; (80045d4 <_dtoa_r+0x5bc>)
 8004530:	f7fc f8fc 	bl	800072c <__aeabi_ddiv>
 8004534:	463b      	mov	r3, r7
 8004536:	4632      	mov	r2, r6
 8004538:	f7fb fe16 	bl	8000168 <__aeabi_dsub>
 800453c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004540:	9f08      	ldr	r7, [sp, #32]
 8004542:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004546:	f7fc fa77 	bl	8000a38 <__aeabi_d2iz>
 800454a:	4604      	mov	r4, r0
 800454c:	f7fb ff5a 	bl	8000404 <__aeabi_i2d>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004558:	f7fb fe06 	bl	8000168 <__aeabi_dsub>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	3430      	adds	r4, #48	; 0x30
 8004562:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004566:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800456a:	f807 4b01 	strb.w	r4, [r7], #1
 800456e:	f7fc fa25 	bl	80009bc <__aeabi_dcmplt>
 8004572:	2800      	cmp	r0, #0
 8004574:	d174      	bne.n	8004660 <_dtoa_r+0x648>
 8004576:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800457a:	2000      	movs	r0, #0
 800457c:	4911      	ldr	r1, [pc, #68]	; (80045c4 <_dtoa_r+0x5ac>)
 800457e:	f7fb fdf3 	bl	8000168 <__aeabi_dsub>
 8004582:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004586:	f7fc fa19 	bl	80009bc <__aeabi_dcmplt>
 800458a:	2800      	cmp	r0, #0
 800458c:	f040 80b6 	bne.w	80046fc <_dtoa_r+0x6e4>
 8004590:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004592:	429f      	cmp	r7, r3
 8004594:	f43f af7a 	beq.w	800448c <_dtoa_r+0x474>
 8004598:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800459c:	2200      	movs	r2, #0
 800459e:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <_dtoa_r+0x5b0>)
 80045a0:	f7fb ff9a 	bl	80004d8 <__aeabi_dmul>
 80045a4:	2200      	movs	r2, #0
 80045a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80045aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <_dtoa_r+0x5b0>)
 80045b0:	f7fb ff92 	bl	80004d8 <__aeabi_dmul>
 80045b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045b8:	e7c3      	b.n	8004542 <_dtoa_r+0x52a>
 80045ba:	bf00      	nop
 80045bc:	08006180 	.word	0x08006180
 80045c0:	08006158 	.word	0x08006158
 80045c4:	3ff00000 	.word	0x3ff00000
 80045c8:	40240000 	.word	0x40240000
 80045cc:	401c0000 	.word	0x401c0000
 80045d0:	40140000 	.word	0x40140000
 80045d4:	3fe00000 	.word	0x3fe00000
 80045d8:	4630      	mov	r0, r6
 80045da:	4639      	mov	r1, r7
 80045dc:	f7fb ff7c 	bl	80004d8 <__aeabi_dmul>
 80045e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80045e6:	9c08      	ldr	r4, [sp, #32]
 80045e8:	9314      	str	r3, [sp, #80]	; 0x50
 80045ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045ee:	f7fc fa23 	bl	8000a38 <__aeabi_d2iz>
 80045f2:	9015      	str	r0, [sp, #84]	; 0x54
 80045f4:	f7fb ff06 	bl	8000404 <__aeabi_i2d>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004600:	f7fb fdb2 	bl	8000168 <__aeabi_dsub>
 8004604:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004606:	4606      	mov	r6, r0
 8004608:	3330      	adds	r3, #48	; 0x30
 800460a:	f804 3b01 	strb.w	r3, [r4], #1
 800460e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004610:	460f      	mov	r7, r1
 8004612:	429c      	cmp	r4, r3
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	d124      	bne.n	8004664 <_dtoa_r+0x64c>
 800461a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800461e:	4bb3      	ldr	r3, [pc, #716]	; (80048ec <_dtoa_r+0x8d4>)
 8004620:	f7fb fda4 	bl	800016c <__adddf3>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4630      	mov	r0, r6
 800462a:	4639      	mov	r1, r7
 800462c:	f7fc f9e4 	bl	80009f8 <__aeabi_dcmpgt>
 8004630:	2800      	cmp	r0, #0
 8004632:	d162      	bne.n	80046fa <_dtoa_r+0x6e2>
 8004634:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004638:	2000      	movs	r0, #0
 800463a:	49ac      	ldr	r1, [pc, #688]	; (80048ec <_dtoa_r+0x8d4>)
 800463c:	f7fb fd94 	bl	8000168 <__aeabi_dsub>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4630      	mov	r0, r6
 8004646:	4639      	mov	r1, r7
 8004648:	f7fc f9b8 	bl	80009bc <__aeabi_dcmplt>
 800464c:	2800      	cmp	r0, #0
 800464e:	f43f af1d 	beq.w	800448c <_dtoa_r+0x474>
 8004652:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004654:	1e7b      	subs	r3, r7, #1
 8004656:	9314      	str	r3, [sp, #80]	; 0x50
 8004658:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800465c:	2b30      	cmp	r3, #48	; 0x30
 800465e:	d0f8      	beq.n	8004652 <_dtoa_r+0x63a>
 8004660:	46c1      	mov	r9, r8
 8004662:	e03a      	b.n	80046da <_dtoa_r+0x6c2>
 8004664:	4ba2      	ldr	r3, [pc, #648]	; (80048f0 <_dtoa_r+0x8d8>)
 8004666:	f7fb ff37 	bl	80004d8 <__aeabi_dmul>
 800466a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800466e:	e7bc      	b.n	80045ea <_dtoa_r+0x5d2>
 8004670:	9f08      	ldr	r7, [sp, #32]
 8004672:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004676:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800467a:	f7fc f857 	bl	800072c <__aeabi_ddiv>
 800467e:	f7fc f9db 	bl	8000a38 <__aeabi_d2iz>
 8004682:	4604      	mov	r4, r0
 8004684:	f7fb febe 	bl	8000404 <__aeabi_i2d>
 8004688:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800468c:	f7fb ff24 	bl	80004d8 <__aeabi_dmul>
 8004690:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004694:	460b      	mov	r3, r1
 8004696:	4602      	mov	r2, r0
 8004698:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800469c:	f7fb fd64 	bl	8000168 <__aeabi_dsub>
 80046a0:	f807 6b01 	strb.w	r6, [r7], #1
 80046a4:	9e08      	ldr	r6, [sp, #32]
 80046a6:	9b02      	ldr	r3, [sp, #8]
 80046a8:	1bbe      	subs	r6, r7, r6
 80046aa:	42b3      	cmp	r3, r6
 80046ac:	d13a      	bne.n	8004724 <_dtoa_r+0x70c>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	f7fb fd5b 	bl	800016c <__adddf3>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80046be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80046c2:	f7fc f999 	bl	80009f8 <__aeabi_dcmpgt>
 80046c6:	bb58      	cbnz	r0, 8004720 <_dtoa_r+0x708>
 80046c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80046cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046d0:	f7fc f96a 	bl	80009a8 <__aeabi_dcmpeq>
 80046d4:	b108      	cbz	r0, 80046da <_dtoa_r+0x6c2>
 80046d6:	07e1      	lsls	r1, r4, #31
 80046d8:	d422      	bmi.n	8004720 <_dtoa_r+0x708>
 80046da:	4628      	mov	r0, r5
 80046dc:	4651      	mov	r1, sl
 80046de:	f000 faf1 	bl	8004cc4 <_Bfree>
 80046e2:	2300      	movs	r3, #0
 80046e4:	703b      	strb	r3, [r7, #0]
 80046e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80046e8:	f109 0001 	add.w	r0, r9, #1
 80046ec:	6018      	str	r0, [r3, #0]
 80046ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f43f acdf 	beq.w	80040b4 <_dtoa_r+0x9c>
 80046f6:	601f      	str	r7, [r3, #0]
 80046f8:	e4dc      	b.n	80040b4 <_dtoa_r+0x9c>
 80046fa:	4627      	mov	r7, r4
 80046fc:	463b      	mov	r3, r7
 80046fe:	461f      	mov	r7, r3
 8004700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004704:	2a39      	cmp	r2, #57	; 0x39
 8004706:	d107      	bne.n	8004718 <_dtoa_r+0x700>
 8004708:	9a08      	ldr	r2, [sp, #32]
 800470a:	429a      	cmp	r2, r3
 800470c:	d1f7      	bne.n	80046fe <_dtoa_r+0x6e6>
 800470e:	2230      	movs	r2, #48	; 0x30
 8004710:	9908      	ldr	r1, [sp, #32]
 8004712:	f108 0801 	add.w	r8, r8, #1
 8004716:	700a      	strb	r2, [r1, #0]
 8004718:	781a      	ldrb	r2, [r3, #0]
 800471a:	3201      	adds	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e79f      	b.n	8004660 <_dtoa_r+0x648>
 8004720:	46c8      	mov	r8, r9
 8004722:	e7eb      	b.n	80046fc <_dtoa_r+0x6e4>
 8004724:	2200      	movs	r2, #0
 8004726:	4b72      	ldr	r3, [pc, #456]	; (80048f0 <_dtoa_r+0x8d8>)
 8004728:	f7fb fed6 	bl	80004d8 <__aeabi_dmul>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004734:	2200      	movs	r2, #0
 8004736:	2300      	movs	r3, #0
 8004738:	f7fc f936 	bl	80009a8 <__aeabi_dcmpeq>
 800473c:	2800      	cmp	r0, #0
 800473e:	d098      	beq.n	8004672 <_dtoa_r+0x65a>
 8004740:	e7cb      	b.n	80046da <_dtoa_r+0x6c2>
 8004742:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004744:	2a00      	cmp	r2, #0
 8004746:	f000 80cd 	beq.w	80048e4 <_dtoa_r+0x8cc>
 800474a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800474c:	2a01      	cmp	r2, #1
 800474e:	f300 80af 	bgt.w	80048b0 <_dtoa_r+0x898>
 8004752:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004754:	2a00      	cmp	r2, #0
 8004756:	f000 80a7 	beq.w	80048a8 <_dtoa_r+0x890>
 800475a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800475e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004760:	9f06      	ldr	r7, [sp, #24]
 8004762:	9a06      	ldr	r2, [sp, #24]
 8004764:	2101      	movs	r1, #1
 8004766:	441a      	add	r2, r3
 8004768:	9206      	str	r2, [sp, #24]
 800476a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800476c:	4628      	mov	r0, r5
 800476e:	441a      	add	r2, r3
 8004770:	9209      	str	r2, [sp, #36]	; 0x24
 8004772:	f000 fb61 	bl	8004e38 <__i2b>
 8004776:	4606      	mov	r6, r0
 8004778:	2f00      	cmp	r7, #0
 800477a:	dd0c      	ble.n	8004796 <_dtoa_r+0x77e>
 800477c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	dd09      	ble.n	8004796 <_dtoa_r+0x77e>
 8004782:	42bb      	cmp	r3, r7
 8004784:	bfa8      	it	ge
 8004786:	463b      	movge	r3, r7
 8004788:	9a06      	ldr	r2, [sp, #24]
 800478a:	1aff      	subs	r7, r7, r3
 800478c:	1ad2      	subs	r2, r2, r3
 800478e:	9206      	str	r2, [sp, #24]
 8004790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	9309      	str	r3, [sp, #36]	; 0x24
 8004796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004798:	b1f3      	cbz	r3, 80047d8 <_dtoa_r+0x7c0>
 800479a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 80a9 	beq.w	80048f4 <_dtoa_r+0x8dc>
 80047a2:	2c00      	cmp	r4, #0
 80047a4:	dd10      	ble.n	80047c8 <_dtoa_r+0x7b0>
 80047a6:	4631      	mov	r1, r6
 80047a8:	4622      	mov	r2, r4
 80047aa:	4628      	mov	r0, r5
 80047ac:	f000 fbfe 	bl	8004fac <__pow5mult>
 80047b0:	4652      	mov	r2, sl
 80047b2:	4601      	mov	r1, r0
 80047b4:	4606      	mov	r6, r0
 80047b6:	4628      	mov	r0, r5
 80047b8:	f000 fb54 	bl	8004e64 <__multiply>
 80047bc:	4680      	mov	r8, r0
 80047be:	4651      	mov	r1, sl
 80047c0:	4628      	mov	r0, r5
 80047c2:	f000 fa7f 	bl	8004cc4 <_Bfree>
 80047c6:	46c2      	mov	sl, r8
 80047c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ca:	1b1a      	subs	r2, r3, r4
 80047cc:	d004      	beq.n	80047d8 <_dtoa_r+0x7c0>
 80047ce:	4651      	mov	r1, sl
 80047d0:	4628      	mov	r0, r5
 80047d2:	f000 fbeb 	bl	8004fac <__pow5mult>
 80047d6:	4682      	mov	sl, r0
 80047d8:	2101      	movs	r1, #1
 80047da:	4628      	mov	r0, r5
 80047dc:	f000 fb2c 	bl	8004e38 <__i2b>
 80047e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047e2:	4604      	mov	r4, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f340 8087 	ble.w	80048f8 <_dtoa_r+0x8e0>
 80047ea:	461a      	mov	r2, r3
 80047ec:	4601      	mov	r1, r0
 80047ee:	4628      	mov	r0, r5
 80047f0:	f000 fbdc 	bl	8004fac <__pow5mult>
 80047f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047f6:	4604      	mov	r4, r0
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	f340 8080 	ble.w	80048fe <_dtoa_r+0x8e6>
 80047fe:	f04f 0800 	mov.w	r8, #0
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004808:	6918      	ldr	r0, [r3, #16]
 800480a:	f000 fac7 	bl	8004d9c <__hi0bits>
 800480e:	f1c0 0020 	rsb	r0, r0, #32
 8004812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004814:	4418      	add	r0, r3
 8004816:	f010 001f 	ands.w	r0, r0, #31
 800481a:	f000 8092 	beq.w	8004942 <_dtoa_r+0x92a>
 800481e:	f1c0 0320 	rsb	r3, r0, #32
 8004822:	2b04      	cmp	r3, #4
 8004824:	f340 808a 	ble.w	800493c <_dtoa_r+0x924>
 8004828:	f1c0 001c 	rsb	r0, r0, #28
 800482c:	9b06      	ldr	r3, [sp, #24]
 800482e:	4407      	add	r7, r0
 8004830:	4403      	add	r3, r0
 8004832:	9306      	str	r3, [sp, #24]
 8004834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004836:	4403      	add	r3, r0
 8004838:	9309      	str	r3, [sp, #36]	; 0x24
 800483a:	9b06      	ldr	r3, [sp, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	dd05      	ble.n	800484c <_dtoa_r+0x834>
 8004840:	4651      	mov	r1, sl
 8004842:	461a      	mov	r2, r3
 8004844:	4628      	mov	r0, r5
 8004846:	f000 fc0b 	bl	8005060 <__lshift>
 800484a:	4682      	mov	sl, r0
 800484c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800484e:	2b00      	cmp	r3, #0
 8004850:	dd05      	ble.n	800485e <_dtoa_r+0x846>
 8004852:	4621      	mov	r1, r4
 8004854:	461a      	mov	r2, r3
 8004856:	4628      	mov	r0, r5
 8004858:	f000 fc02 	bl	8005060 <__lshift>
 800485c:	4604      	mov	r4, r0
 800485e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004860:	2b00      	cmp	r3, #0
 8004862:	d070      	beq.n	8004946 <_dtoa_r+0x92e>
 8004864:	4621      	mov	r1, r4
 8004866:	4650      	mov	r0, sl
 8004868:	f000 fc66 	bl	8005138 <__mcmp>
 800486c:	2800      	cmp	r0, #0
 800486e:	da6a      	bge.n	8004946 <_dtoa_r+0x92e>
 8004870:	2300      	movs	r3, #0
 8004872:	4651      	mov	r1, sl
 8004874:	220a      	movs	r2, #10
 8004876:	4628      	mov	r0, r5
 8004878:	f000 fa46 	bl	8004d08 <__multadd>
 800487c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800487e:	4682      	mov	sl, r0
 8004880:	f109 39ff 	add.w	r9, r9, #4294967295
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8193 	beq.w	8004bb0 <_dtoa_r+0xb98>
 800488a:	4631      	mov	r1, r6
 800488c:	2300      	movs	r3, #0
 800488e:	220a      	movs	r2, #10
 8004890:	4628      	mov	r0, r5
 8004892:	f000 fa39 	bl	8004d08 <__multadd>
 8004896:	f1bb 0f00 	cmp.w	fp, #0
 800489a:	4606      	mov	r6, r0
 800489c:	f300 8093 	bgt.w	80049c6 <_dtoa_r+0x9ae>
 80048a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	dc57      	bgt.n	8004956 <_dtoa_r+0x93e>
 80048a6:	e08e      	b.n	80049c6 <_dtoa_r+0x9ae>
 80048a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80048aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80048ae:	e756      	b.n	800475e <_dtoa_r+0x746>
 80048b0:	9b02      	ldr	r3, [sp, #8]
 80048b2:	1e5c      	subs	r4, r3, #1
 80048b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048b6:	42a3      	cmp	r3, r4
 80048b8:	bfb7      	itett	lt
 80048ba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80048bc:	1b1c      	subge	r4, r3, r4
 80048be:	1ae2      	sublt	r2, r4, r3
 80048c0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80048c2:	bfbe      	ittt	lt
 80048c4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80048c6:	189b      	addlt	r3, r3, r2
 80048c8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80048ca:	9b02      	ldr	r3, [sp, #8]
 80048cc:	bfb8      	it	lt
 80048ce:	2400      	movlt	r4, #0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bfbb      	ittet	lt
 80048d4:	9b06      	ldrlt	r3, [sp, #24]
 80048d6:	9a02      	ldrlt	r2, [sp, #8]
 80048d8:	9f06      	ldrge	r7, [sp, #24]
 80048da:	1a9f      	sublt	r7, r3, r2
 80048dc:	bfac      	ite	ge
 80048de:	9b02      	ldrge	r3, [sp, #8]
 80048e0:	2300      	movlt	r3, #0
 80048e2:	e73e      	b.n	8004762 <_dtoa_r+0x74a>
 80048e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80048e6:	9f06      	ldr	r7, [sp, #24]
 80048e8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80048ea:	e745      	b.n	8004778 <_dtoa_r+0x760>
 80048ec:	3fe00000 	.word	0x3fe00000
 80048f0:	40240000 	.word	0x40240000
 80048f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048f6:	e76a      	b.n	80047ce <_dtoa_r+0x7b6>
 80048f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	dc19      	bgt.n	8004932 <_dtoa_r+0x91a>
 80048fe:	9b04      	ldr	r3, [sp, #16]
 8004900:	b9bb      	cbnz	r3, 8004932 <_dtoa_r+0x91a>
 8004902:	9b05      	ldr	r3, [sp, #20]
 8004904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004908:	b99b      	cbnz	r3, 8004932 <_dtoa_r+0x91a>
 800490a:	9b05      	ldr	r3, [sp, #20]
 800490c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004910:	0d1b      	lsrs	r3, r3, #20
 8004912:	051b      	lsls	r3, r3, #20
 8004914:	b183      	cbz	r3, 8004938 <_dtoa_r+0x920>
 8004916:	f04f 0801 	mov.w	r8, #1
 800491a:	9b06      	ldr	r3, [sp, #24]
 800491c:	3301      	adds	r3, #1
 800491e:	9306      	str	r3, [sp, #24]
 8004920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004922:	3301      	adds	r3, #1
 8004924:	9309      	str	r3, [sp, #36]	; 0x24
 8004926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004928:	2b00      	cmp	r3, #0
 800492a:	f47f af6a 	bne.w	8004802 <_dtoa_r+0x7ea>
 800492e:	2001      	movs	r0, #1
 8004930:	e76f      	b.n	8004812 <_dtoa_r+0x7fa>
 8004932:	f04f 0800 	mov.w	r8, #0
 8004936:	e7f6      	b.n	8004926 <_dtoa_r+0x90e>
 8004938:	4698      	mov	r8, r3
 800493a:	e7f4      	b.n	8004926 <_dtoa_r+0x90e>
 800493c:	f43f af7d 	beq.w	800483a <_dtoa_r+0x822>
 8004940:	4618      	mov	r0, r3
 8004942:	301c      	adds	r0, #28
 8004944:	e772      	b.n	800482c <_dtoa_r+0x814>
 8004946:	9b02      	ldr	r3, [sp, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	dc36      	bgt.n	80049ba <_dtoa_r+0x9a2>
 800494c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800494e:	2b02      	cmp	r3, #2
 8004950:	dd33      	ble.n	80049ba <_dtoa_r+0x9a2>
 8004952:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004956:	f1bb 0f00 	cmp.w	fp, #0
 800495a:	d10d      	bne.n	8004978 <_dtoa_r+0x960>
 800495c:	4621      	mov	r1, r4
 800495e:	465b      	mov	r3, fp
 8004960:	2205      	movs	r2, #5
 8004962:	4628      	mov	r0, r5
 8004964:	f000 f9d0 	bl	8004d08 <__multadd>
 8004968:	4601      	mov	r1, r0
 800496a:	4604      	mov	r4, r0
 800496c:	4650      	mov	r0, sl
 800496e:	f000 fbe3 	bl	8005138 <__mcmp>
 8004972:	2800      	cmp	r0, #0
 8004974:	f73f adb6 	bgt.w	80044e4 <_dtoa_r+0x4cc>
 8004978:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800497a:	9f08      	ldr	r7, [sp, #32]
 800497c:	ea6f 0903 	mvn.w	r9, r3
 8004980:	f04f 0800 	mov.w	r8, #0
 8004984:	4621      	mov	r1, r4
 8004986:	4628      	mov	r0, r5
 8004988:	f000 f99c 	bl	8004cc4 <_Bfree>
 800498c:	2e00      	cmp	r6, #0
 800498e:	f43f aea4 	beq.w	80046da <_dtoa_r+0x6c2>
 8004992:	f1b8 0f00 	cmp.w	r8, #0
 8004996:	d005      	beq.n	80049a4 <_dtoa_r+0x98c>
 8004998:	45b0      	cmp	r8, r6
 800499a:	d003      	beq.n	80049a4 <_dtoa_r+0x98c>
 800499c:	4641      	mov	r1, r8
 800499e:	4628      	mov	r0, r5
 80049a0:	f000 f990 	bl	8004cc4 <_Bfree>
 80049a4:	4631      	mov	r1, r6
 80049a6:	4628      	mov	r0, r5
 80049a8:	f000 f98c 	bl	8004cc4 <_Bfree>
 80049ac:	e695      	b.n	80046da <_dtoa_r+0x6c2>
 80049ae:	2400      	movs	r4, #0
 80049b0:	4626      	mov	r6, r4
 80049b2:	e7e1      	b.n	8004978 <_dtoa_r+0x960>
 80049b4:	46c1      	mov	r9, r8
 80049b6:	4626      	mov	r6, r4
 80049b8:	e594      	b.n	80044e4 <_dtoa_r+0x4cc>
 80049ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049bc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80fc 	beq.w	8004bbe <_dtoa_r+0xba6>
 80049c6:	2f00      	cmp	r7, #0
 80049c8:	dd05      	ble.n	80049d6 <_dtoa_r+0x9be>
 80049ca:	4631      	mov	r1, r6
 80049cc:	463a      	mov	r2, r7
 80049ce:	4628      	mov	r0, r5
 80049d0:	f000 fb46 	bl	8005060 <__lshift>
 80049d4:	4606      	mov	r6, r0
 80049d6:	f1b8 0f00 	cmp.w	r8, #0
 80049da:	d05c      	beq.n	8004a96 <_dtoa_r+0xa7e>
 80049dc:	4628      	mov	r0, r5
 80049de:	6871      	ldr	r1, [r6, #4]
 80049e0:	f000 f930 	bl	8004c44 <_Balloc>
 80049e4:	4607      	mov	r7, r0
 80049e6:	b928      	cbnz	r0, 80049f4 <_dtoa_r+0x9dc>
 80049e8:	4602      	mov	r2, r0
 80049ea:	f240 21ea 	movw	r1, #746	; 0x2ea
 80049ee:	4b7e      	ldr	r3, [pc, #504]	; (8004be8 <_dtoa_r+0xbd0>)
 80049f0:	f7ff bb26 	b.w	8004040 <_dtoa_r+0x28>
 80049f4:	6932      	ldr	r2, [r6, #16]
 80049f6:	f106 010c 	add.w	r1, r6, #12
 80049fa:	3202      	adds	r2, #2
 80049fc:	0092      	lsls	r2, r2, #2
 80049fe:	300c      	adds	r0, #12
 8004a00:	f000 f912 	bl	8004c28 <memcpy>
 8004a04:	2201      	movs	r2, #1
 8004a06:	4639      	mov	r1, r7
 8004a08:	4628      	mov	r0, r5
 8004a0a:	f000 fb29 	bl	8005060 <__lshift>
 8004a0e:	46b0      	mov	r8, r6
 8004a10:	4606      	mov	r6, r0
 8004a12:	9b08      	ldr	r3, [sp, #32]
 8004a14:	3301      	adds	r3, #1
 8004a16:	9302      	str	r3, [sp, #8]
 8004a18:	9b08      	ldr	r3, [sp, #32]
 8004a1a:	445b      	add	r3, fp
 8004a1c:	930a      	str	r3, [sp, #40]	; 0x28
 8004a1e:	9b04      	ldr	r3, [sp, #16]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	9309      	str	r3, [sp, #36]	; 0x24
 8004a26:	9b02      	ldr	r3, [sp, #8]
 8004a28:	4621      	mov	r1, r4
 8004a2a:	4650      	mov	r0, sl
 8004a2c:	f103 3bff 	add.w	fp, r3, #4294967295
 8004a30:	f7ff fa64 	bl	8003efc <quorem>
 8004a34:	4603      	mov	r3, r0
 8004a36:	4641      	mov	r1, r8
 8004a38:	3330      	adds	r3, #48	; 0x30
 8004a3a:	9004      	str	r0, [sp, #16]
 8004a3c:	4650      	mov	r0, sl
 8004a3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a40:	f000 fb7a 	bl	8005138 <__mcmp>
 8004a44:	4632      	mov	r2, r6
 8004a46:	9006      	str	r0, [sp, #24]
 8004a48:	4621      	mov	r1, r4
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f000 fb90 	bl	8005170 <__mdiff>
 8004a50:	68c2      	ldr	r2, [r0, #12]
 8004a52:	4607      	mov	r7, r0
 8004a54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a56:	bb02      	cbnz	r2, 8004a9a <_dtoa_r+0xa82>
 8004a58:	4601      	mov	r1, r0
 8004a5a:	4650      	mov	r0, sl
 8004a5c:	f000 fb6c 	bl	8005138 <__mcmp>
 8004a60:	4602      	mov	r2, r0
 8004a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a64:	4639      	mov	r1, r7
 8004a66:	4628      	mov	r0, r5
 8004a68:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004a6c:	f000 f92a 	bl	8004cc4 <_Bfree>
 8004a70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a74:	9f02      	ldr	r7, [sp, #8]
 8004a76:	ea43 0102 	orr.w	r1, r3, r2
 8004a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a80:	d10d      	bne.n	8004a9e <_dtoa_r+0xa86>
 8004a82:	2b39      	cmp	r3, #57	; 0x39
 8004a84:	d027      	beq.n	8004ad6 <_dtoa_r+0xabe>
 8004a86:	9a06      	ldr	r2, [sp, #24]
 8004a88:	2a00      	cmp	r2, #0
 8004a8a:	dd01      	ble.n	8004a90 <_dtoa_r+0xa78>
 8004a8c:	9b04      	ldr	r3, [sp, #16]
 8004a8e:	3331      	adds	r3, #49	; 0x31
 8004a90:	f88b 3000 	strb.w	r3, [fp]
 8004a94:	e776      	b.n	8004984 <_dtoa_r+0x96c>
 8004a96:	4630      	mov	r0, r6
 8004a98:	e7b9      	b.n	8004a0e <_dtoa_r+0x9f6>
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	e7e2      	b.n	8004a64 <_dtoa_r+0xa4c>
 8004a9e:	9906      	ldr	r1, [sp, #24]
 8004aa0:	2900      	cmp	r1, #0
 8004aa2:	db04      	blt.n	8004aae <_dtoa_r+0xa96>
 8004aa4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004aa6:	4301      	orrs	r1, r0
 8004aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aaa:	4301      	orrs	r1, r0
 8004aac:	d120      	bne.n	8004af0 <_dtoa_r+0xad8>
 8004aae:	2a00      	cmp	r2, #0
 8004ab0:	ddee      	ble.n	8004a90 <_dtoa_r+0xa78>
 8004ab2:	4651      	mov	r1, sl
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	9302      	str	r3, [sp, #8]
 8004aba:	f000 fad1 	bl	8005060 <__lshift>
 8004abe:	4621      	mov	r1, r4
 8004ac0:	4682      	mov	sl, r0
 8004ac2:	f000 fb39 	bl	8005138 <__mcmp>
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	9b02      	ldr	r3, [sp, #8]
 8004aca:	dc02      	bgt.n	8004ad2 <_dtoa_r+0xaba>
 8004acc:	d1e0      	bne.n	8004a90 <_dtoa_r+0xa78>
 8004ace:	07da      	lsls	r2, r3, #31
 8004ad0:	d5de      	bpl.n	8004a90 <_dtoa_r+0xa78>
 8004ad2:	2b39      	cmp	r3, #57	; 0x39
 8004ad4:	d1da      	bne.n	8004a8c <_dtoa_r+0xa74>
 8004ad6:	2339      	movs	r3, #57	; 0x39
 8004ad8:	f88b 3000 	strb.w	r3, [fp]
 8004adc:	463b      	mov	r3, r7
 8004ade:	461f      	mov	r7, r3
 8004ae0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	2a39      	cmp	r2, #57	; 0x39
 8004ae8:	d050      	beq.n	8004b8c <_dtoa_r+0xb74>
 8004aea:	3201      	adds	r2, #1
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	e749      	b.n	8004984 <_dtoa_r+0x96c>
 8004af0:	2a00      	cmp	r2, #0
 8004af2:	dd03      	ble.n	8004afc <_dtoa_r+0xae4>
 8004af4:	2b39      	cmp	r3, #57	; 0x39
 8004af6:	d0ee      	beq.n	8004ad6 <_dtoa_r+0xabe>
 8004af8:	3301      	adds	r3, #1
 8004afa:	e7c9      	b.n	8004a90 <_dtoa_r+0xa78>
 8004afc:	9a02      	ldr	r2, [sp, #8]
 8004afe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004b00:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004b04:	428a      	cmp	r2, r1
 8004b06:	d02a      	beq.n	8004b5e <_dtoa_r+0xb46>
 8004b08:	4651      	mov	r1, sl
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	220a      	movs	r2, #10
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f000 f8fa 	bl	8004d08 <__multadd>
 8004b14:	45b0      	cmp	r8, r6
 8004b16:	4682      	mov	sl, r0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	f04f 020a 	mov.w	r2, #10
 8004b20:	4641      	mov	r1, r8
 8004b22:	4628      	mov	r0, r5
 8004b24:	d107      	bne.n	8004b36 <_dtoa_r+0xb1e>
 8004b26:	f000 f8ef 	bl	8004d08 <__multadd>
 8004b2a:	4680      	mov	r8, r0
 8004b2c:	4606      	mov	r6, r0
 8004b2e:	9b02      	ldr	r3, [sp, #8]
 8004b30:	3301      	adds	r3, #1
 8004b32:	9302      	str	r3, [sp, #8]
 8004b34:	e777      	b.n	8004a26 <_dtoa_r+0xa0e>
 8004b36:	f000 f8e7 	bl	8004d08 <__multadd>
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	4680      	mov	r8, r0
 8004b3e:	2300      	movs	r3, #0
 8004b40:	220a      	movs	r2, #10
 8004b42:	4628      	mov	r0, r5
 8004b44:	f000 f8e0 	bl	8004d08 <__multadd>
 8004b48:	4606      	mov	r6, r0
 8004b4a:	e7f0      	b.n	8004b2e <_dtoa_r+0xb16>
 8004b4c:	f1bb 0f00 	cmp.w	fp, #0
 8004b50:	bfcc      	ite	gt
 8004b52:	465f      	movgt	r7, fp
 8004b54:	2701      	movle	r7, #1
 8004b56:	f04f 0800 	mov.w	r8, #0
 8004b5a:	9a08      	ldr	r2, [sp, #32]
 8004b5c:	4417      	add	r7, r2
 8004b5e:	4651      	mov	r1, sl
 8004b60:	2201      	movs	r2, #1
 8004b62:	4628      	mov	r0, r5
 8004b64:	9302      	str	r3, [sp, #8]
 8004b66:	f000 fa7b 	bl	8005060 <__lshift>
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	4682      	mov	sl, r0
 8004b6e:	f000 fae3 	bl	8005138 <__mcmp>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	dcb2      	bgt.n	8004adc <_dtoa_r+0xac4>
 8004b76:	d102      	bne.n	8004b7e <_dtoa_r+0xb66>
 8004b78:	9b02      	ldr	r3, [sp, #8]
 8004b7a:	07db      	lsls	r3, r3, #31
 8004b7c:	d4ae      	bmi.n	8004adc <_dtoa_r+0xac4>
 8004b7e:	463b      	mov	r3, r7
 8004b80:	461f      	mov	r7, r3
 8004b82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b86:	2a30      	cmp	r2, #48	; 0x30
 8004b88:	d0fa      	beq.n	8004b80 <_dtoa_r+0xb68>
 8004b8a:	e6fb      	b.n	8004984 <_dtoa_r+0x96c>
 8004b8c:	9a08      	ldr	r2, [sp, #32]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d1a5      	bne.n	8004ade <_dtoa_r+0xac6>
 8004b92:	2331      	movs	r3, #49	; 0x31
 8004b94:	f109 0901 	add.w	r9, r9, #1
 8004b98:	7013      	strb	r3, [r2, #0]
 8004b9a:	e6f3      	b.n	8004984 <_dtoa_r+0x96c>
 8004b9c:	4b13      	ldr	r3, [pc, #76]	; (8004bec <_dtoa_r+0xbd4>)
 8004b9e:	f7ff baa7 	b.w	80040f0 <_dtoa_r+0xd8>
 8004ba2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f47f aa80 	bne.w	80040aa <_dtoa_r+0x92>
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <_dtoa_r+0xbd8>)
 8004bac:	f7ff baa0 	b.w	80040f0 <_dtoa_r+0xd8>
 8004bb0:	f1bb 0f00 	cmp.w	fp, #0
 8004bb4:	dc03      	bgt.n	8004bbe <_dtoa_r+0xba6>
 8004bb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	f73f aecc 	bgt.w	8004956 <_dtoa_r+0x93e>
 8004bbe:	9f08      	ldr	r7, [sp, #32]
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	4650      	mov	r0, sl
 8004bc4:	f7ff f99a 	bl	8003efc <quorem>
 8004bc8:	9a08      	ldr	r2, [sp, #32]
 8004bca:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004bce:	f807 3b01 	strb.w	r3, [r7], #1
 8004bd2:	1aba      	subs	r2, r7, r2
 8004bd4:	4593      	cmp	fp, r2
 8004bd6:	ddb9      	ble.n	8004b4c <_dtoa_r+0xb34>
 8004bd8:	4651      	mov	r1, sl
 8004bda:	2300      	movs	r3, #0
 8004bdc:	220a      	movs	r2, #10
 8004bde:	4628      	mov	r0, r5
 8004be0:	f000 f892 	bl	8004d08 <__multadd>
 8004be4:	4682      	mov	sl, r0
 8004be6:	e7eb      	b.n	8004bc0 <_dtoa_r+0xba8>
 8004be8:	080060e3 	.word	0x080060e3
 8004bec:	0800603c 	.word	0x0800603c
 8004bf0:	08006060 	.word	0x08006060

08004bf4 <_localeconv_r>:
 8004bf4:	4800      	ldr	r0, [pc, #0]	; (8004bf8 <_localeconv_r+0x4>)
 8004bf6:	4770      	bx	lr
 8004bf8:	20000160 	.word	0x20000160

08004bfc <malloc>:
 8004bfc:	4b02      	ldr	r3, [pc, #8]	; (8004c08 <malloc+0xc>)
 8004bfe:	4601      	mov	r1, r0
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	f000 bbfb 	b.w	80053fc <_malloc_r>
 8004c06:	bf00      	nop
 8004c08:	2000000c 	.word	0x2000000c

08004c0c <memchr>:
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	b510      	push	{r4, lr}
 8004c10:	b2c9      	uxtb	r1, r1
 8004c12:	4402      	add	r2, r0
 8004c14:	4293      	cmp	r3, r2
 8004c16:	4618      	mov	r0, r3
 8004c18:	d101      	bne.n	8004c1e <memchr+0x12>
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	e003      	b.n	8004c26 <memchr+0x1a>
 8004c1e:	7804      	ldrb	r4, [r0, #0]
 8004c20:	3301      	adds	r3, #1
 8004c22:	428c      	cmp	r4, r1
 8004c24:	d1f6      	bne.n	8004c14 <memchr+0x8>
 8004c26:	bd10      	pop	{r4, pc}

08004c28 <memcpy>:
 8004c28:	440a      	add	r2, r1
 8004c2a:	4291      	cmp	r1, r2
 8004c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c30:	d100      	bne.n	8004c34 <memcpy+0xc>
 8004c32:	4770      	bx	lr
 8004c34:	b510      	push	{r4, lr}
 8004c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c3a:	4291      	cmp	r1, r2
 8004c3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c40:	d1f9      	bne.n	8004c36 <memcpy+0xe>
 8004c42:	bd10      	pop	{r4, pc}

08004c44 <_Balloc>:
 8004c44:	b570      	push	{r4, r5, r6, lr}
 8004c46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004c48:	4604      	mov	r4, r0
 8004c4a:	460d      	mov	r5, r1
 8004c4c:	b976      	cbnz	r6, 8004c6c <_Balloc+0x28>
 8004c4e:	2010      	movs	r0, #16
 8004c50:	f7ff ffd4 	bl	8004bfc <malloc>
 8004c54:	4602      	mov	r2, r0
 8004c56:	6260      	str	r0, [r4, #36]	; 0x24
 8004c58:	b920      	cbnz	r0, 8004c64 <_Balloc+0x20>
 8004c5a:	2166      	movs	r1, #102	; 0x66
 8004c5c:	4b17      	ldr	r3, [pc, #92]	; (8004cbc <_Balloc+0x78>)
 8004c5e:	4818      	ldr	r0, [pc, #96]	; (8004cc0 <_Balloc+0x7c>)
 8004c60:	f000 fc36 	bl	80054d0 <__assert_func>
 8004c64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c68:	6006      	str	r6, [r0, #0]
 8004c6a:	60c6      	str	r6, [r0, #12]
 8004c6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004c6e:	68f3      	ldr	r3, [r6, #12]
 8004c70:	b183      	cbz	r3, 8004c94 <_Balloc+0x50>
 8004c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004c7a:	b9b8      	cbnz	r0, 8004cac <_Balloc+0x68>
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	fa01 f605 	lsl.w	r6, r1, r5
 8004c82:	1d72      	adds	r2, r6, #5
 8004c84:	4620      	mov	r0, r4
 8004c86:	0092      	lsls	r2, r2, #2
 8004c88:	f000 fb5e 	bl	8005348 <_calloc_r>
 8004c8c:	b160      	cbz	r0, 8004ca8 <_Balloc+0x64>
 8004c8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004c92:	e00e      	b.n	8004cb2 <_Balloc+0x6e>
 8004c94:	2221      	movs	r2, #33	; 0x21
 8004c96:	2104      	movs	r1, #4
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f000 fb55 	bl	8005348 <_calloc_r>
 8004c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ca0:	60f0      	str	r0, [r6, #12]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e4      	bne.n	8004c72 <_Balloc+0x2e>
 8004ca8:	2000      	movs	r0, #0
 8004caa:	bd70      	pop	{r4, r5, r6, pc}
 8004cac:	6802      	ldr	r2, [r0, #0]
 8004cae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004cb8:	e7f7      	b.n	8004caa <_Balloc+0x66>
 8004cba:	bf00      	nop
 8004cbc:	0800606d 	.word	0x0800606d
 8004cc0:	080060f4 	.word	0x080060f4

08004cc4 <_Bfree>:
 8004cc4:	b570      	push	{r4, r5, r6, lr}
 8004cc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004cc8:	4605      	mov	r5, r0
 8004cca:	460c      	mov	r4, r1
 8004ccc:	b976      	cbnz	r6, 8004cec <_Bfree+0x28>
 8004cce:	2010      	movs	r0, #16
 8004cd0:	f7ff ff94 	bl	8004bfc <malloc>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	6268      	str	r0, [r5, #36]	; 0x24
 8004cd8:	b920      	cbnz	r0, 8004ce4 <_Bfree+0x20>
 8004cda:	218a      	movs	r1, #138	; 0x8a
 8004cdc:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <_Bfree+0x3c>)
 8004cde:	4809      	ldr	r0, [pc, #36]	; (8004d04 <_Bfree+0x40>)
 8004ce0:	f000 fbf6 	bl	80054d0 <__assert_func>
 8004ce4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ce8:	6006      	str	r6, [r0, #0]
 8004cea:	60c6      	str	r6, [r0, #12]
 8004cec:	b13c      	cbz	r4, 8004cfe <_Bfree+0x3a>
 8004cee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cf0:	6862      	ldr	r2, [r4, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004cf8:	6021      	str	r1, [r4, #0]
 8004cfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}
 8004d00:	0800606d 	.word	0x0800606d
 8004d04:	080060f4 	.word	0x080060f4

08004d08 <__multadd>:
 8004d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d0c:	4698      	mov	r8, r3
 8004d0e:	460c      	mov	r4, r1
 8004d10:	2300      	movs	r3, #0
 8004d12:	690e      	ldr	r6, [r1, #16]
 8004d14:	4607      	mov	r7, r0
 8004d16:	f101 0014 	add.w	r0, r1, #20
 8004d1a:	6805      	ldr	r5, [r0, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	b2a9      	uxth	r1, r5
 8004d20:	fb02 8101 	mla	r1, r2, r1, r8
 8004d24:	0c2d      	lsrs	r5, r5, #16
 8004d26:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004d2a:	fb02 c505 	mla	r5, r2, r5, ip
 8004d2e:	b289      	uxth	r1, r1
 8004d30:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004d34:	429e      	cmp	r6, r3
 8004d36:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004d3a:	f840 1b04 	str.w	r1, [r0], #4
 8004d3e:	dcec      	bgt.n	8004d1a <__multadd+0x12>
 8004d40:	f1b8 0f00 	cmp.w	r8, #0
 8004d44:	d022      	beq.n	8004d8c <__multadd+0x84>
 8004d46:	68a3      	ldr	r3, [r4, #8]
 8004d48:	42b3      	cmp	r3, r6
 8004d4a:	dc19      	bgt.n	8004d80 <__multadd+0x78>
 8004d4c:	6861      	ldr	r1, [r4, #4]
 8004d4e:	4638      	mov	r0, r7
 8004d50:	3101      	adds	r1, #1
 8004d52:	f7ff ff77 	bl	8004c44 <_Balloc>
 8004d56:	4605      	mov	r5, r0
 8004d58:	b928      	cbnz	r0, 8004d66 <__multadd+0x5e>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	21b5      	movs	r1, #181	; 0xb5
 8004d5e:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <__multadd+0x8c>)
 8004d60:	480d      	ldr	r0, [pc, #52]	; (8004d98 <__multadd+0x90>)
 8004d62:	f000 fbb5 	bl	80054d0 <__assert_func>
 8004d66:	6922      	ldr	r2, [r4, #16]
 8004d68:	f104 010c 	add.w	r1, r4, #12
 8004d6c:	3202      	adds	r2, #2
 8004d6e:	0092      	lsls	r2, r2, #2
 8004d70:	300c      	adds	r0, #12
 8004d72:	f7ff ff59 	bl	8004c28 <memcpy>
 8004d76:	4621      	mov	r1, r4
 8004d78:	4638      	mov	r0, r7
 8004d7a:	f7ff ffa3 	bl	8004cc4 <_Bfree>
 8004d7e:	462c      	mov	r4, r5
 8004d80:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004d84:	3601      	adds	r6, #1
 8004d86:	f8c3 8014 	str.w	r8, [r3, #20]
 8004d8a:	6126      	str	r6, [r4, #16]
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d92:	bf00      	nop
 8004d94:	080060e3 	.word	0x080060e3
 8004d98:	080060f4 	.word	0x080060f4

08004d9c <__hi0bits>:
 8004d9c:	0c02      	lsrs	r2, r0, #16
 8004d9e:	0412      	lsls	r2, r2, #16
 8004da0:	4603      	mov	r3, r0
 8004da2:	b9ca      	cbnz	r2, 8004dd8 <__hi0bits+0x3c>
 8004da4:	0403      	lsls	r3, r0, #16
 8004da6:	2010      	movs	r0, #16
 8004da8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004dac:	bf04      	itt	eq
 8004dae:	021b      	lsleq	r3, r3, #8
 8004db0:	3008      	addeq	r0, #8
 8004db2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004db6:	bf04      	itt	eq
 8004db8:	011b      	lsleq	r3, r3, #4
 8004dba:	3004      	addeq	r0, #4
 8004dbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004dc0:	bf04      	itt	eq
 8004dc2:	009b      	lsleq	r3, r3, #2
 8004dc4:	3002      	addeq	r0, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	db05      	blt.n	8004dd6 <__hi0bits+0x3a>
 8004dca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004dce:	f100 0001 	add.w	r0, r0, #1
 8004dd2:	bf08      	it	eq
 8004dd4:	2020      	moveq	r0, #32
 8004dd6:	4770      	bx	lr
 8004dd8:	2000      	movs	r0, #0
 8004dda:	e7e5      	b.n	8004da8 <__hi0bits+0xc>

08004ddc <__lo0bits>:
 8004ddc:	6803      	ldr	r3, [r0, #0]
 8004dde:	4602      	mov	r2, r0
 8004de0:	f013 0007 	ands.w	r0, r3, #7
 8004de4:	d00b      	beq.n	8004dfe <__lo0bits+0x22>
 8004de6:	07d9      	lsls	r1, r3, #31
 8004de8:	d422      	bmi.n	8004e30 <__lo0bits+0x54>
 8004dea:	0798      	lsls	r0, r3, #30
 8004dec:	bf49      	itett	mi
 8004dee:	085b      	lsrmi	r3, r3, #1
 8004df0:	089b      	lsrpl	r3, r3, #2
 8004df2:	2001      	movmi	r0, #1
 8004df4:	6013      	strmi	r3, [r2, #0]
 8004df6:	bf5c      	itt	pl
 8004df8:	2002      	movpl	r0, #2
 8004dfa:	6013      	strpl	r3, [r2, #0]
 8004dfc:	4770      	bx	lr
 8004dfe:	b299      	uxth	r1, r3
 8004e00:	b909      	cbnz	r1, 8004e06 <__lo0bits+0x2a>
 8004e02:	2010      	movs	r0, #16
 8004e04:	0c1b      	lsrs	r3, r3, #16
 8004e06:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004e0a:	bf04      	itt	eq
 8004e0c:	0a1b      	lsreq	r3, r3, #8
 8004e0e:	3008      	addeq	r0, #8
 8004e10:	0719      	lsls	r1, r3, #28
 8004e12:	bf04      	itt	eq
 8004e14:	091b      	lsreq	r3, r3, #4
 8004e16:	3004      	addeq	r0, #4
 8004e18:	0799      	lsls	r1, r3, #30
 8004e1a:	bf04      	itt	eq
 8004e1c:	089b      	lsreq	r3, r3, #2
 8004e1e:	3002      	addeq	r0, #2
 8004e20:	07d9      	lsls	r1, r3, #31
 8004e22:	d403      	bmi.n	8004e2c <__lo0bits+0x50>
 8004e24:	085b      	lsrs	r3, r3, #1
 8004e26:	f100 0001 	add.w	r0, r0, #1
 8004e2a:	d003      	beq.n	8004e34 <__lo0bits+0x58>
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	4770      	bx	lr
 8004e30:	2000      	movs	r0, #0
 8004e32:	4770      	bx	lr
 8004e34:	2020      	movs	r0, #32
 8004e36:	4770      	bx	lr

08004e38 <__i2b>:
 8004e38:	b510      	push	{r4, lr}
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	f7ff ff01 	bl	8004c44 <_Balloc>
 8004e42:	4602      	mov	r2, r0
 8004e44:	b928      	cbnz	r0, 8004e52 <__i2b+0x1a>
 8004e46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004e4a:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <__i2b+0x24>)
 8004e4c:	4804      	ldr	r0, [pc, #16]	; (8004e60 <__i2b+0x28>)
 8004e4e:	f000 fb3f 	bl	80054d0 <__assert_func>
 8004e52:	2301      	movs	r3, #1
 8004e54:	6144      	str	r4, [r0, #20]
 8004e56:	6103      	str	r3, [r0, #16]
 8004e58:	bd10      	pop	{r4, pc}
 8004e5a:	bf00      	nop
 8004e5c:	080060e3 	.word	0x080060e3
 8004e60:	080060f4 	.word	0x080060f4

08004e64 <__multiply>:
 8004e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e68:	4614      	mov	r4, r2
 8004e6a:	690a      	ldr	r2, [r1, #16]
 8004e6c:	6923      	ldr	r3, [r4, #16]
 8004e6e:	460d      	mov	r5, r1
 8004e70:	429a      	cmp	r2, r3
 8004e72:	bfbe      	ittt	lt
 8004e74:	460b      	movlt	r3, r1
 8004e76:	4625      	movlt	r5, r4
 8004e78:	461c      	movlt	r4, r3
 8004e7a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004e7e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004e82:	68ab      	ldr	r3, [r5, #8]
 8004e84:	6869      	ldr	r1, [r5, #4]
 8004e86:	eb0a 0709 	add.w	r7, sl, r9
 8004e8a:	42bb      	cmp	r3, r7
 8004e8c:	b085      	sub	sp, #20
 8004e8e:	bfb8      	it	lt
 8004e90:	3101      	addlt	r1, #1
 8004e92:	f7ff fed7 	bl	8004c44 <_Balloc>
 8004e96:	b930      	cbnz	r0, 8004ea6 <__multiply+0x42>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	f240 115d 	movw	r1, #349	; 0x15d
 8004e9e:	4b41      	ldr	r3, [pc, #260]	; (8004fa4 <__multiply+0x140>)
 8004ea0:	4841      	ldr	r0, [pc, #260]	; (8004fa8 <__multiply+0x144>)
 8004ea2:	f000 fb15 	bl	80054d0 <__assert_func>
 8004ea6:	f100 0614 	add.w	r6, r0, #20
 8004eaa:	4633      	mov	r3, r6
 8004eac:	2200      	movs	r2, #0
 8004eae:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004eb2:	4543      	cmp	r3, r8
 8004eb4:	d31e      	bcc.n	8004ef4 <__multiply+0x90>
 8004eb6:	f105 0c14 	add.w	ip, r5, #20
 8004eba:	f104 0314 	add.w	r3, r4, #20
 8004ebe:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004ec2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004ec6:	9202      	str	r2, [sp, #8]
 8004ec8:	ebac 0205 	sub.w	r2, ip, r5
 8004ecc:	3a15      	subs	r2, #21
 8004ece:	f022 0203 	bic.w	r2, r2, #3
 8004ed2:	3204      	adds	r2, #4
 8004ed4:	f105 0115 	add.w	r1, r5, #21
 8004ed8:	458c      	cmp	ip, r1
 8004eda:	bf38      	it	cc
 8004edc:	2204      	movcc	r2, #4
 8004ede:	9201      	str	r2, [sp, #4]
 8004ee0:	9a02      	ldr	r2, [sp, #8]
 8004ee2:	9303      	str	r3, [sp, #12]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d808      	bhi.n	8004efa <__multiply+0x96>
 8004ee8:	2f00      	cmp	r7, #0
 8004eea:	dc55      	bgt.n	8004f98 <__multiply+0x134>
 8004eec:	6107      	str	r7, [r0, #16]
 8004eee:	b005      	add	sp, #20
 8004ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef4:	f843 2b04 	str.w	r2, [r3], #4
 8004ef8:	e7db      	b.n	8004eb2 <__multiply+0x4e>
 8004efa:	f8b3 a000 	ldrh.w	sl, [r3]
 8004efe:	f1ba 0f00 	cmp.w	sl, #0
 8004f02:	d020      	beq.n	8004f46 <__multiply+0xe2>
 8004f04:	46b1      	mov	r9, r6
 8004f06:	2200      	movs	r2, #0
 8004f08:	f105 0e14 	add.w	lr, r5, #20
 8004f0c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004f10:	f8d9 b000 	ldr.w	fp, [r9]
 8004f14:	b2a1      	uxth	r1, r4
 8004f16:	fa1f fb8b 	uxth.w	fp, fp
 8004f1a:	fb0a b101 	mla	r1, sl, r1, fp
 8004f1e:	4411      	add	r1, r2
 8004f20:	f8d9 2000 	ldr.w	r2, [r9]
 8004f24:	0c24      	lsrs	r4, r4, #16
 8004f26:	0c12      	lsrs	r2, r2, #16
 8004f28:	fb0a 2404 	mla	r4, sl, r4, r2
 8004f2c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004f30:	b289      	uxth	r1, r1
 8004f32:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004f36:	45f4      	cmp	ip, lr
 8004f38:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004f3c:	f849 1b04 	str.w	r1, [r9], #4
 8004f40:	d8e4      	bhi.n	8004f0c <__multiply+0xa8>
 8004f42:	9901      	ldr	r1, [sp, #4]
 8004f44:	5072      	str	r2, [r6, r1]
 8004f46:	9a03      	ldr	r2, [sp, #12]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004f4e:	f1b9 0f00 	cmp.w	r9, #0
 8004f52:	d01f      	beq.n	8004f94 <__multiply+0x130>
 8004f54:	46b6      	mov	lr, r6
 8004f56:	f04f 0a00 	mov.w	sl, #0
 8004f5a:	6834      	ldr	r4, [r6, #0]
 8004f5c:	f105 0114 	add.w	r1, r5, #20
 8004f60:	880a      	ldrh	r2, [r1, #0]
 8004f62:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004f66:	b2a4      	uxth	r4, r4
 8004f68:	fb09 b202 	mla	r2, r9, r2, fp
 8004f6c:	4492      	add	sl, r2
 8004f6e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004f72:	f84e 4b04 	str.w	r4, [lr], #4
 8004f76:	f851 4b04 	ldr.w	r4, [r1], #4
 8004f7a:	f8be 2000 	ldrh.w	r2, [lr]
 8004f7e:	0c24      	lsrs	r4, r4, #16
 8004f80:	fb09 2404 	mla	r4, r9, r4, r2
 8004f84:	458c      	cmp	ip, r1
 8004f86:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004f8a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004f8e:	d8e7      	bhi.n	8004f60 <__multiply+0xfc>
 8004f90:	9a01      	ldr	r2, [sp, #4]
 8004f92:	50b4      	str	r4, [r6, r2]
 8004f94:	3604      	adds	r6, #4
 8004f96:	e7a3      	b.n	8004ee0 <__multiply+0x7c>
 8004f98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1a5      	bne.n	8004eec <__multiply+0x88>
 8004fa0:	3f01      	subs	r7, #1
 8004fa2:	e7a1      	b.n	8004ee8 <__multiply+0x84>
 8004fa4:	080060e3 	.word	0x080060e3
 8004fa8:	080060f4 	.word	0x080060f4

08004fac <__pow5mult>:
 8004fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb0:	4615      	mov	r5, r2
 8004fb2:	f012 0203 	ands.w	r2, r2, #3
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	460f      	mov	r7, r1
 8004fba:	d007      	beq.n	8004fcc <__pow5mult+0x20>
 8004fbc:	4c25      	ldr	r4, [pc, #148]	; (8005054 <__pow5mult+0xa8>)
 8004fbe:	3a01      	subs	r2, #1
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004fc6:	f7ff fe9f 	bl	8004d08 <__multadd>
 8004fca:	4607      	mov	r7, r0
 8004fcc:	10ad      	asrs	r5, r5, #2
 8004fce:	d03d      	beq.n	800504c <__pow5mult+0xa0>
 8004fd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004fd2:	b97c      	cbnz	r4, 8004ff4 <__pow5mult+0x48>
 8004fd4:	2010      	movs	r0, #16
 8004fd6:	f7ff fe11 	bl	8004bfc <malloc>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	6270      	str	r0, [r6, #36]	; 0x24
 8004fde:	b928      	cbnz	r0, 8004fec <__pow5mult+0x40>
 8004fe0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004fe4:	4b1c      	ldr	r3, [pc, #112]	; (8005058 <__pow5mult+0xac>)
 8004fe6:	481d      	ldr	r0, [pc, #116]	; (800505c <__pow5mult+0xb0>)
 8004fe8:	f000 fa72 	bl	80054d0 <__assert_func>
 8004fec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ff0:	6004      	str	r4, [r0, #0]
 8004ff2:	60c4      	str	r4, [r0, #12]
 8004ff4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004ff8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ffc:	b94c      	cbnz	r4, 8005012 <__pow5mult+0x66>
 8004ffe:	f240 2171 	movw	r1, #625	; 0x271
 8005002:	4630      	mov	r0, r6
 8005004:	f7ff ff18 	bl	8004e38 <__i2b>
 8005008:	2300      	movs	r3, #0
 800500a:	4604      	mov	r4, r0
 800500c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005010:	6003      	str	r3, [r0, #0]
 8005012:	f04f 0900 	mov.w	r9, #0
 8005016:	07eb      	lsls	r3, r5, #31
 8005018:	d50a      	bpl.n	8005030 <__pow5mult+0x84>
 800501a:	4639      	mov	r1, r7
 800501c:	4622      	mov	r2, r4
 800501e:	4630      	mov	r0, r6
 8005020:	f7ff ff20 	bl	8004e64 <__multiply>
 8005024:	4680      	mov	r8, r0
 8005026:	4639      	mov	r1, r7
 8005028:	4630      	mov	r0, r6
 800502a:	f7ff fe4b 	bl	8004cc4 <_Bfree>
 800502e:	4647      	mov	r7, r8
 8005030:	106d      	asrs	r5, r5, #1
 8005032:	d00b      	beq.n	800504c <__pow5mult+0xa0>
 8005034:	6820      	ldr	r0, [r4, #0]
 8005036:	b938      	cbnz	r0, 8005048 <__pow5mult+0x9c>
 8005038:	4622      	mov	r2, r4
 800503a:	4621      	mov	r1, r4
 800503c:	4630      	mov	r0, r6
 800503e:	f7ff ff11 	bl	8004e64 <__multiply>
 8005042:	6020      	str	r0, [r4, #0]
 8005044:	f8c0 9000 	str.w	r9, [r0]
 8005048:	4604      	mov	r4, r0
 800504a:	e7e4      	b.n	8005016 <__pow5mult+0x6a>
 800504c:	4638      	mov	r0, r7
 800504e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005052:	bf00      	nop
 8005054:	08006248 	.word	0x08006248
 8005058:	0800606d 	.word	0x0800606d
 800505c:	080060f4 	.word	0x080060f4

08005060 <__lshift>:
 8005060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005064:	460c      	mov	r4, r1
 8005066:	4607      	mov	r7, r0
 8005068:	4691      	mov	r9, r2
 800506a:	6923      	ldr	r3, [r4, #16]
 800506c:	6849      	ldr	r1, [r1, #4]
 800506e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005072:	68a3      	ldr	r3, [r4, #8]
 8005074:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005078:	f108 0601 	add.w	r6, r8, #1
 800507c:	42b3      	cmp	r3, r6
 800507e:	db0b      	blt.n	8005098 <__lshift+0x38>
 8005080:	4638      	mov	r0, r7
 8005082:	f7ff fddf 	bl	8004c44 <_Balloc>
 8005086:	4605      	mov	r5, r0
 8005088:	b948      	cbnz	r0, 800509e <__lshift+0x3e>
 800508a:	4602      	mov	r2, r0
 800508c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005090:	4b27      	ldr	r3, [pc, #156]	; (8005130 <__lshift+0xd0>)
 8005092:	4828      	ldr	r0, [pc, #160]	; (8005134 <__lshift+0xd4>)
 8005094:	f000 fa1c 	bl	80054d0 <__assert_func>
 8005098:	3101      	adds	r1, #1
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	e7ee      	b.n	800507c <__lshift+0x1c>
 800509e:	2300      	movs	r3, #0
 80050a0:	f100 0114 	add.w	r1, r0, #20
 80050a4:	f100 0210 	add.w	r2, r0, #16
 80050a8:	4618      	mov	r0, r3
 80050aa:	4553      	cmp	r3, sl
 80050ac:	db33      	blt.n	8005116 <__lshift+0xb6>
 80050ae:	6920      	ldr	r0, [r4, #16]
 80050b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80050b4:	f104 0314 	add.w	r3, r4, #20
 80050b8:	f019 091f 	ands.w	r9, r9, #31
 80050bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80050c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80050c4:	d02b      	beq.n	800511e <__lshift+0xbe>
 80050c6:	468a      	mov	sl, r1
 80050c8:	2200      	movs	r2, #0
 80050ca:	f1c9 0e20 	rsb	lr, r9, #32
 80050ce:	6818      	ldr	r0, [r3, #0]
 80050d0:	fa00 f009 	lsl.w	r0, r0, r9
 80050d4:	4302      	orrs	r2, r0
 80050d6:	f84a 2b04 	str.w	r2, [sl], #4
 80050da:	f853 2b04 	ldr.w	r2, [r3], #4
 80050de:	459c      	cmp	ip, r3
 80050e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80050e4:	d8f3      	bhi.n	80050ce <__lshift+0x6e>
 80050e6:	ebac 0304 	sub.w	r3, ip, r4
 80050ea:	3b15      	subs	r3, #21
 80050ec:	f023 0303 	bic.w	r3, r3, #3
 80050f0:	3304      	adds	r3, #4
 80050f2:	f104 0015 	add.w	r0, r4, #21
 80050f6:	4584      	cmp	ip, r0
 80050f8:	bf38      	it	cc
 80050fa:	2304      	movcc	r3, #4
 80050fc:	50ca      	str	r2, [r1, r3]
 80050fe:	b10a      	cbz	r2, 8005104 <__lshift+0xa4>
 8005100:	f108 0602 	add.w	r6, r8, #2
 8005104:	3e01      	subs	r6, #1
 8005106:	4638      	mov	r0, r7
 8005108:	4621      	mov	r1, r4
 800510a:	612e      	str	r6, [r5, #16]
 800510c:	f7ff fdda 	bl	8004cc4 <_Bfree>
 8005110:	4628      	mov	r0, r5
 8005112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005116:	f842 0f04 	str.w	r0, [r2, #4]!
 800511a:	3301      	adds	r3, #1
 800511c:	e7c5      	b.n	80050aa <__lshift+0x4a>
 800511e:	3904      	subs	r1, #4
 8005120:	f853 2b04 	ldr.w	r2, [r3], #4
 8005124:	459c      	cmp	ip, r3
 8005126:	f841 2f04 	str.w	r2, [r1, #4]!
 800512a:	d8f9      	bhi.n	8005120 <__lshift+0xc0>
 800512c:	e7ea      	b.n	8005104 <__lshift+0xa4>
 800512e:	bf00      	nop
 8005130:	080060e3 	.word	0x080060e3
 8005134:	080060f4 	.word	0x080060f4

08005138 <__mcmp>:
 8005138:	4603      	mov	r3, r0
 800513a:	690a      	ldr	r2, [r1, #16]
 800513c:	6900      	ldr	r0, [r0, #16]
 800513e:	b530      	push	{r4, r5, lr}
 8005140:	1a80      	subs	r0, r0, r2
 8005142:	d10d      	bne.n	8005160 <__mcmp+0x28>
 8005144:	3314      	adds	r3, #20
 8005146:	3114      	adds	r1, #20
 8005148:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800514c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005150:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005154:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005158:	4295      	cmp	r5, r2
 800515a:	d002      	beq.n	8005162 <__mcmp+0x2a>
 800515c:	d304      	bcc.n	8005168 <__mcmp+0x30>
 800515e:	2001      	movs	r0, #1
 8005160:	bd30      	pop	{r4, r5, pc}
 8005162:	42a3      	cmp	r3, r4
 8005164:	d3f4      	bcc.n	8005150 <__mcmp+0x18>
 8005166:	e7fb      	b.n	8005160 <__mcmp+0x28>
 8005168:	f04f 30ff 	mov.w	r0, #4294967295
 800516c:	e7f8      	b.n	8005160 <__mcmp+0x28>
	...

08005170 <__mdiff>:
 8005170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	460c      	mov	r4, r1
 8005176:	4606      	mov	r6, r0
 8005178:	4611      	mov	r1, r2
 800517a:	4620      	mov	r0, r4
 800517c:	4692      	mov	sl, r2
 800517e:	f7ff ffdb 	bl	8005138 <__mcmp>
 8005182:	1e05      	subs	r5, r0, #0
 8005184:	d111      	bne.n	80051aa <__mdiff+0x3a>
 8005186:	4629      	mov	r1, r5
 8005188:	4630      	mov	r0, r6
 800518a:	f7ff fd5b 	bl	8004c44 <_Balloc>
 800518e:	4602      	mov	r2, r0
 8005190:	b928      	cbnz	r0, 800519e <__mdiff+0x2e>
 8005192:	f240 2132 	movw	r1, #562	; 0x232
 8005196:	4b3c      	ldr	r3, [pc, #240]	; (8005288 <__mdiff+0x118>)
 8005198:	483c      	ldr	r0, [pc, #240]	; (800528c <__mdiff+0x11c>)
 800519a:	f000 f999 	bl	80054d0 <__assert_func>
 800519e:	2301      	movs	r3, #1
 80051a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80051a4:	4610      	mov	r0, r2
 80051a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051aa:	bfa4      	itt	ge
 80051ac:	4653      	movge	r3, sl
 80051ae:	46a2      	movge	sl, r4
 80051b0:	4630      	mov	r0, r6
 80051b2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80051b6:	bfa6      	itte	ge
 80051b8:	461c      	movge	r4, r3
 80051ba:	2500      	movge	r5, #0
 80051bc:	2501      	movlt	r5, #1
 80051be:	f7ff fd41 	bl	8004c44 <_Balloc>
 80051c2:	4602      	mov	r2, r0
 80051c4:	b918      	cbnz	r0, 80051ce <__mdiff+0x5e>
 80051c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80051ca:	4b2f      	ldr	r3, [pc, #188]	; (8005288 <__mdiff+0x118>)
 80051cc:	e7e4      	b.n	8005198 <__mdiff+0x28>
 80051ce:	f100 0814 	add.w	r8, r0, #20
 80051d2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80051d6:	60c5      	str	r5, [r0, #12]
 80051d8:	f04f 0c00 	mov.w	ip, #0
 80051dc:	f10a 0514 	add.w	r5, sl, #20
 80051e0:	f10a 0010 	add.w	r0, sl, #16
 80051e4:	46c2      	mov	sl, r8
 80051e6:	6926      	ldr	r6, [r4, #16]
 80051e8:	f104 0914 	add.w	r9, r4, #20
 80051ec:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80051f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80051f4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80051f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80051fc:	fa1f f18b 	uxth.w	r1, fp
 8005200:	4461      	add	r1, ip
 8005202:	fa1f fc83 	uxth.w	ip, r3
 8005206:	0c1b      	lsrs	r3, r3, #16
 8005208:	eba1 010c 	sub.w	r1, r1, ip
 800520c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005210:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005214:	b289      	uxth	r1, r1
 8005216:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800521a:	454e      	cmp	r6, r9
 800521c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005220:	f84a 3b04 	str.w	r3, [sl], #4
 8005224:	d8e6      	bhi.n	80051f4 <__mdiff+0x84>
 8005226:	1b33      	subs	r3, r6, r4
 8005228:	3b15      	subs	r3, #21
 800522a:	f023 0303 	bic.w	r3, r3, #3
 800522e:	3415      	adds	r4, #21
 8005230:	3304      	adds	r3, #4
 8005232:	42a6      	cmp	r6, r4
 8005234:	bf38      	it	cc
 8005236:	2304      	movcc	r3, #4
 8005238:	441d      	add	r5, r3
 800523a:	4443      	add	r3, r8
 800523c:	461e      	mov	r6, r3
 800523e:	462c      	mov	r4, r5
 8005240:	4574      	cmp	r4, lr
 8005242:	d30e      	bcc.n	8005262 <__mdiff+0xf2>
 8005244:	f10e 0103 	add.w	r1, lr, #3
 8005248:	1b49      	subs	r1, r1, r5
 800524a:	f021 0103 	bic.w	r1, r1, #3
 800524e:	3d03      	subs	r5, #3
 8005250:	45ae      	cmp	lr, r5
 8005252:	bf38      	it	cc
 8005254:	2100      	movcc	r1, #0
 8005256:	4419      	add	r1, r3
 8005258:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800525c:	b18b      	cbz	r3, 8005282 <__mdiff+0x112>
 800525e:	6117      	str	r7, [r2, #16]
 8005260:	e7a0      	b.n	80051a4 <__mdiff+0x34>
 8005262:	f854 8b04 	ldr.w	r8, [r4], #4
 8005266:	fa1f f188 	uxth.w	r1, r8
 800526a:	4461      	add	r1, ip
 800526c:	1408      	asrs	r0, r1, #16
 800526e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005272:	b289      	uxth	r1, r1
 8005274:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005278:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800527c:	f846 1b04 	str.w	r1, [r6], #4
 8005280:	e7de      	b.n	8005240 <__mdiff+0xd0>
 8005282:	3f01      	subs	r7, #1
 8005284:	e7e8      	b.n	8005258 <__mdiff+0xe8>
 8005286:	bf00      	nop
 8005288:	080060e3 	.word	0x080060e3
 800528c:	080060f4 	.word	0x080060f4

08005290 <__d2b>:
 8005290:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005294:	2101      	movs	r1, #1
 8005296:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800529a:	4690      	mov	r8, r2
 800529c:	461d      	mov	r5, r3
 800529e:	f7ff fcd1 	bl	8004c44 <_Balloc>
 80052a2:	4604      	mov	r4, r0
 80052a4:	b930      	cbnz	r0, 80052b4 <__d2b+0x24>
 80052a6:	4602      	mov	r2, r0
 80052a8:	f240 310a 	movw	r1, #778	; 0x30a
 80052ac:	4b24      	ldr	r3, [pc, #144]	; (8005340 <__d2b+0xb0>)
 80052ae:	4825      	ldr	r0, [pc, #148]	; (8005344 <__d2b+0xb4>)
 80052b0:	f000 f90e 	bl	80054d0 <__assert_func>
 80052b4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80052b8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80052bc:	bb2d      	cbnz	r5, 800530a <__d2b+0x7a>
 80052be:	9301      	str	r3, [sp, #4]
 80052c0:	f1b8 0300 	subs.w	r3, r8, #0
 80052c4:	d026      	beq.n	8005314 <__d2b+0x84>
 80052c6:	4668      	mov	r0, sp
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	f7ff fd87 	bl	8004ddc <__lo0bits>
 80052ce:	9900      	ldr	r1, [sp, #0]
 80052d0:	b1f0      	cbz	r0, 8005310 <__d2b+0x80>
 80052d2:	9a01      	ldr	r2, [sp, #4]
 80052d4:	f1c0 0320 	rsb	r3, r0, #32
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	430b      	orrs	r3, r1
 80052de:	40c2      	lsrs	r2, r0
 80052e0:	6163      	str	r3, [r4, #20]
 80052e2:	9201      	str	r2, [sp, #4]
 80052e4:	9b01      	ldr	r3, [sp, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bf14      	ite	ne
 80052ea:	2102      	movne	r1, #2
 80052ec:	2101      	moveq	r1, #1
 80052ee:	61a3      	str	r3, [r4, #24]
 80052f0:	6121      	str	r1, [r4, #16]
 80052f2:	b1c5      	cbz	r5, 8005326 <__d2b+0x96>
 80052f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80052f8:	4405      	add	r5, r0
 80052fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80052fe:	603d      	str	r5, [r7, #0]
 8005300:	6030      	str	r0, [r6, #0]
 8005302:	4620      	mov	r0, r4
 8005304:	b002      	add	sp, #8
 8005306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800530a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800530e:	e7d6      	b.n	80052be <__d2b+0x2e>
 8005310:	6161      	str	r1, [r4, #20]
 8005312:	e7e7      	b.n	80052e4 <__d2b+0x54>
 8005314:	a801      	add	r0, sp, #4
 8005316:	f7ff fd61 	bl	8004ddc <__lo0bits>
 800531a:	2101      	movs	r1, #1
 800531c:	9b01      	ldr	r3, [sp, #4]
 800531e:	6121      	str	r1, [r4, #16]
 8005320:	6163      	str	r3, [r4, #20]
 8005322:	3020      	adds	r0, #32
 8005324:	e7e5      	b.n	80052f2 <__d2b+0x62>
 8005326:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800532a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800532e:	6038      	str	r0, [r7, #0]
 8005330:	6918      	ldr	r0, [r3, #16]
 8005332:	f7ff fd33 	bl	8004d9c <__hi0bits>
 8005336:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800533a:	6031      	str	r1, [r6, #0]
 800533c:	e7e1      	b.n	8005302 <__d2b+0x72>
 800533e:	bf00      	nop
 8005340:	080060e3 	.word	0x080060e3
 8005344:	080060f4 	.word	0x080060f4

08005348 <_calloc_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	fb02 f501 	mul.w	r5, r2, r1
 800534e:	4629      	mov	r1, r5
 8005350:	f000 f854 	bl	80053fc <_malloc_r>
 8005354:	4604      	mov	r4, r0
 8005356:	b118      	cbz	r0, 8005360 <_calloc_r+0x18>
 8005358:	462a      	mov	r2, r5
 800535a:	2100      	movs	r1, #0
 800535c:	f7fe f966 	bl	800362c <memset>
 8005360:	4620      	mov	r0, r4
 8005362:	bd38      	pop	{r3, r4, r5, pc}

08005364 <_free_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	4605      	mov	r5, r0
 8005368:	2900      	cmp	r1, #0
 800536a:	d043      	beq.n	80053f4 <_free_r+0x90>
 800536c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005370:	1f0c      	subs	r4, r1, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	bfb8      	it	lt
 8005376:	18e4      	addlt	r4, r4, r3
 8005378:	f000 f8ec 	bl	8005554 <__malloc_lock>
 800537c:	4a1e      	ldr	r2, [pc, #120]	; (80053f8 <_free_r+0x94>)
 800537e:	6813      	ldr	r3, [r2, #0]
 8005380:	4610      	mov	r0, r2
 8005382:	b933      	cbnz	r3, 8005392 <_free_r+0x2e>
 8005384:	6063      	str	r3, [r4, #4]
 8005386:	6014      	str	r4, [r2, #0]
 8005388:	4628      	mov	r0, r5
 800538a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800538e:	f000 b8e7 	b.w	8005560 <__malloc_unlock>
 8005392:	42a3      	cmp	r3, r4
 8005394:	d90a      	bls.n	80053ac <_free_r+0x48>
 8005396:	6821      	ldr	r1, [r4, #0]
 8005398:	1862      	adds	r2, r4, r1
 800539a:	4293      	cmp	r3, r2
 800539c:	bf01      	itttt	eq
 800539e:	681a      	ldreq	r2, [r3, #0]
 80053a0:	685b      	ldreq	r3, [r3, #4]
 80053a2:	1852      	addeq	r2, r2, r1
 80053a4:	6022      	streq	r2, [r4, #0]
 80053a6:	6063      	str	r3, [r4, #4]
 80053a8:	6004      	str	r4, [r0, #0]
 80053aa:	e7ed      	b.n	8005388 <_free_r+0x24>
 80053ac:	461a      	mov	r2, r3
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	b10b      	cbz	r3, 80053b6 <_free_r+0x52>
 80053b2:	42a3      	cmp	r3, r4
 80053b4:	d9fa      	bls.n	80053ac <_free_r+0x48>
 80053b6:	6811      	ldr	r1, [r2, #0]
 80053b8:	1850      	adds	r0, r2, r1
 80053ba:	42a0      	cmp	r0, r4
 80053bc:	d10b      	bne.n	80053d6 <_free_r+0x72>
 80053be:	6820      	ldr	r0, [r4, #0]
 80053c0:	4401      	add	r1, r0
 80053c2:	1850      	adds	r0, r2, r1
 80053c4:	4283      	cmp	r3, r0
 80053c6:	6011      	str	r1, [r2, #0]
 80053c8:	d1de      	bne.n	8005388 <_free_r+0x24>
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	4401      	add	r1, r0
 80053d0:	6011      	str	r1, [r2, #0]
 80053d2:	6053      	str	r3, [r2, #4]
 80053d4:	e7d8      	b.n	8005388 <_free_r+0x24>
 80053d6:	d902      	bls.n	80053de <_free_r+0x7a>
 80053d8:	230c      	movs	r3, #12
 80053da:	602b      	str	r3, [r5, #0]
 80053dc:	e7d4      	b.n	8005388 <_free_r+0x24>
 80053de:	6820      	ldr	r0, [r4, #0]
 80053e0:	1821      	adds	r1, r4, r0
 80053e2:	428b      	cmp	r3, r1
 80053e4:	bf01      	itttt	eq
 80053e6:	6819      	ldreq	r1, [r3, #0]
 80053e8:	685b      	ldreq	r3, [r3, #4]
 80053ea:	1809      	addeq	r1, r1, r0
 80053ec:	6021      	streq	r1, [r4, #0]
 80053ee:	6063      	str	r3, [r4, #4]
 80053f0:	6054      	str	r4, [r2, #4]
 80053f2:	e7c9      	b.n	8005388 <_free_r+0x24>
 80053f4:	bd38      	pop	{r3, r4, r5, pc}
 80053f6:	bf00      	nop
 80053f8:	200001fc 	.word	0x200001fc

080053fc <_malloc_r>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	1ccd      	adds	r5, r1, #3
 8005400:	f025 0503 	bic.w	r5, r5, #3
 8005404:	3508      	adds	r5, #8
 8005406:	2d0c      	cmp	r5, #12
 8005408:	bf38      	it	cc
 800540a:	250c      	movcc	r5, #12
 800540c:	2d00      	cmp	r5, #0
 800540e:	4606      	mov	r6, r0
 8005410:	db01      	blt.n	8005416 <_malloc_r+0x1a>
 8005412:	42a9      	cmp	r1, r5
 8005414:	d903      	bls.n	800541e <_malloc_r+0x22>
 8005416:	230c      	movs	r3, #12
 8005418:	6033      	str	r3, [r6, #0]
 800541a:	2000      	movs	r0, #0
 800541c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800541e:	f000 f899 	bl	8005554 <__malloc_lock>
 8005422:	4921      	ldr	r1, [pc, #132]	; (80054a8 <_malloc_r+0xac>)
 8005424:	680a      	ldr	r2, [r1, #0]
 8005426:	4614      	mov	r4, r2
 8005428:	b99c      	cbnz	r4, 8005452 <_malloc_r+0x56>
 800542a:	4f20      	ldr	r7, [pc, #128]	; (80054ac <_malloc_r+0xb0>)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	b923      	cbnz	r3, 800543a <_malloc_r+0x3e>
 8005430:	4621      	mov	r1, r4
 8005432:	4630      	mov	r0, r6
 8005434:	f000 f83c 	bl	80054b0 <_sbrk_r>
 8005438:	6038      	str	r0, [r7, #0]
 800543a:	4629      	mov	r1, r5
 800543c:	4630      	mov	r0, r6
 800543e:	f000 f837 	bl	80054b0 <_sbrk_r>
 8005442:	1c43      	adds	r3, r0, #1
 8005444:	d123      	bne.n	800548e <_malloc_r+0x92>
 8005446:	230c      	movs	r3, #12
 8005448:	4630      	mov	r0, r6
 800544a:	6033      	str	r3, [r6, #0]
 800544c:	f000 f888 	bl	8005560 <__malloc_unlock>
 8005450:	e7e3      	b.n	800541a <_malloc_r+0x1e>
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	1b5b      	subs	r3, r3, r5
 8005456:	d417      	bmi.n	8005488 <_malloc_r+0x8c>
 8005458:	2b0b      	cmp	r3, #11
 800545a:	d903      	bls.n	8005464 <_malloc_r+0x68>
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	441c      	add	r4, r3
 8005460:	6025      	str	r5, [r4, #0]
 8005462:	e004      	b.n	800546e <_malloc_r+0x72>
 8005464:	6863      	ldr	r3, [r4, #4]
 8005466:	42a2      	cmp	r2, r4
 8005468:	bf0c      	ite	eq
 800546a:	600b      	streq	r3, [r1, #0]
 800546c:	6053      	strne	r3, [r2, #4]
 800546e:	4630      	mov	r0, r6
 8005470:	f000 f876 	bl	8005560 <__malloc_unlock>
 8005474:	f104 000b 	add.w	r0, r4, #11
 8005478:	1d23      	adds	r3, r4, #4
 800547a:	f020 0007 	bic.w	r0, r0, #7
 800547e:	1ac2      	subs	r2, r0, r3
 8005480:	d0cc      	beq.n	800541c <_malloc_r+0x20>
 8005482:	1a1b      	subs	r3, r3, r0
 8005484:	50a3      	str	r3, [r4, r2]
 8005486:	e7c9      	b.n	800541c <_malloc_r+0x20>
 8005488:	4622      	mov	r2, r4
 800548a:	6864      	ldr	r4, [r4, #4]
 800548c:	e7cc      	b.n	8005428 <_malloc_r+0x2c>
 800548e:	1cc4      	adds	r4, r0, #3
 8005490:	f024 0403 	bic.w	r4, r4, #3
 8005494:	42a0      	cmp	r0, r4
 8005496:	d0e3      	beq.n	8005460 <_malloc_r+0x64>
 8005498:	1a21      	subs	r1, r4, r0
 800549a:	4630      	mov	r0, r6
 800549c:	f000 f808 	bl	80054b0 <_sbrk_r>
 80054a0:	3001      	adds	r0, #1
 80054a2:	d1dd      	bne.n	8005460 <_malloc_r+0x64>
 80054a4:	e7cf      	b.n	8005446 <_malloc_r+0x4a>
 80054a6:	bf00      	nop
 80054a8:	200001fc 	.word	0x200001fc
 80054ac:	20000200 	.word	0x20000200

080054b0 <_sbrk_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	2300      	movs	r3, #0
 80054b4:	4d05      	ldr	r5, [pc, #20]	; (80054cc <_sbrk_r+0x1c>)
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	602b      	str	r3, [r5, #0]
 80054bc:	f7fb ffa8 	bl	8001410 <_sbrk>
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d102      	bne.n	80054ca <_sbrk_r+0x1a>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	b103      	cbz	r3, 80054ca <_sbrk_r+0x1a>
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
 80054cc:	200002c8 	.word	0x200002c8

080054d0 <__assert_func>:
 80054d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054d2:	4614      	mov	r4, r2
 80054d4:	461a      	mov	r2, r3
 80054d6:	4b09      	ldr	r3, [pc, #36]	; (80054fc <__assert_func+0x2c>)
 80054d8:	4605      	mov	r5, r0
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68d8      	ldr	r0, [r3, #12]
 80054de:	b14c      	cbz	r4, 80054f4 <__assert_func+0x24>
 80054e0:	4b07      	ldr	r3, [pc, #28]	; (8005500 <__assert_func+0x30>)
 80054e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054e6:	9100      	str	r1, [sp, #0]
 80054e8:	462b      	mov	r3, r5
 80054ea:	4906      	ldr	r1, [pc, #24]	; (8005504 <__assert_func+0x34>)
 80054ec:	f000 f80e 	bl	800550c <fiprintf>
 80054f0:	f000 fa62 	bl	80059b8 <abort>
 80054f4:	4b04      	ldr	r3, [pc, #16]	; (8005508 <__assert_func+0x38>)
 80054f6:	461c      	mov	r4, r3
 80054f8:	e7f3      	b.n	80054e2 <__assert_func+0x12>
 80054fa:	bf00      	nop
 80054fc:	2000000c 	.word	0x2000000c
 8005500:	08006254 	.word	0x08006254
 8005504:	08006261 	.word	0x08006261
 8005508:	0800628f 	.word	0x0800628f

0800550c <fiprintf>:
 800550c:	b40e      	push	{r1, r2, r3}
 800550e:	b503      	push	{r0, r1, lr}
 8005510:	4601      	mov	r1, r0
 8005512:	ab03      	add	r3, sp, #12
 8005514:	4805      	ldr	r0, [pc, #20]	; (800552c <fiprintf+0x20>)
 8005516:	f853 2b04 	ldr.w	r2, [r3], #4
 800551a:	6800      	ldr	r0, [r0, #0]
 800551c:	9301      	str	r3, [sp, #4]
 800551e:	f000 f84d 	bl	80055bc <_vfiprintf_r>
 8005522:	b002      	add	sp, #8
 8005524:	f85d eb04 	ldr.w	lr, [sp], #4
 8005528:	b003      	add	sp, #12
 800552a:	4770      	bx	lr
 800552c:	2000000c 	.word	0x2000000c

08005530 <__ascii_mbtowc>:
 8005530:	b082      	sub	sp, #8
 8005532:	b901      	cbnz	r1, 8005536 <__ascii_mbtowc+0x6>
 8005534:	a901      	add	r1, sp, #4
 8005536:	b142      	cbz	r2, 800554a <__ascii_mbtowc+0x1a>
 8005538:	b14b      	cbz	r3, 800554e <__ascii_mbtowc+0x1e>
 800553a:	7813      	ldrb	r3, [r2, #0]
 800553c:	600b      	str	r3, [r1, #0]
 800553e:	7812      	ldrb	r2, [r2, #0]
 8005540:	1e10      	subs	r0, r2, #0
 8005542:	bf18      	it	ne
 8005544:	2001      	movne	r0, #1
 8005546:	b002      	add	sp, #8
 8005548:	4770      	bx	lr
 800554a:	4610      	mov	r0, r2
 800554c:	e7fb      	b.n	8005546 <__ascii_mbtowc+0x16>
 800554e:	f06f 0001 	mvn.w	r0, #1
 8005552:	e7f8      	b.n	8005546 <__ascii_mbtowc+0x16>

08005554 <__malloc_lock>:
 8005554:	4801      	ldr	r0, [pc, #4]	; (800555c <__malloc_lock+0x8>)
 8005556:	f000 bbef 	b.w	8005d38 <__retarget_lock_acquire_recursive>
 800555a:	bf00      	nop
 800555c:	200002d0 	.word	0x200002d0

08005560 <__malloc_unlock>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__malloc_unlock+0x8>)
 8005562:	f000 bbea 	b.w	8005d3a <__retarget_lock_release_recursive>
 8005566:	bf00      	nop
 8005568:	200002d0 	.word	0x200002d0

0800556c <__sfputc_r>:
 800556c:	6893      	ldr	r3, [r2, #8]
 800556e:	b410      	push	{r4}
 8005570:	3b01      	subs	r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	6093      	str	r3, [r2, #8]
 8005576:	da07      	bge.n	8005588 <__sfputc_r+0x1c>
 8005578:	6994      	ldr	r4, [r2, #24]
 800557a:	42a3      	cmp	r3, r4
 800557c:	db01      	blt.n	8005582 <__sfputc_r+0x16>
 800557e:	290a      	cmp	r1, #10
 8005580:	d102      	bne.n	8005588 <__sfputc_r+0x1c>
 8005582:	bc10      	pop	{r4}
 8005584:	f000 b94a 	b.w	800581c <__swbuf_r>
 8005588:	6813      	ldr	r3, [r2, #0]
 800558a:	1c58      	adds	r0, r3, #1
 800558c:	6010      	str	r0, [r2, #0]
 800558e:	7019      	strb	r1, [r3, #0]
 8005590:	4608      	mov	r0, r1
 8005592:	bc10      	pop	{r4}
 8005594:	4770      	bx	lr

08005596 <__sfputs_r>:
 8005596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005598:	4606      	mov	r6, r0
 800559a:	460f      	mov	r7, r1
 800559c:	4614      	mov	r4, r2
 800559e:	18d5      	adds	r5, r2, r3
 80055a0:	42ac      	cmp	r4, r5
 80055a2:	d101      	bne.n	80055a8 <__sfputs_r+0x12>
 80055a4:	2000      	movs	r0, #0
 80055a6:	e007      	b.n	80055b8 <__sfputs_r+0x22>
 80055a8:	463a      	mov	r2, r7
 80055aa:	4630      	mov	r0, r6
 80055ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055b0:	f7ff ffdc 	bl	800556c <__sfputc_r>
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	d1f3      	bne.n	80055a0 <__sfputs_r+0xa>
 80055b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055bc <_vfiprintf_r>:
 80055bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c0:	460d      	mov	r5, r1
 80055c2:	4614      	mov	r4, r2
 80055c4:	4698      	mov	r8, r3
 80055c6:	4606      	mov	r6, r0
 80055c8:	b09d      	sub	sp, #116	; 0x74
 80055ca:	b118      	cbz	r0, 80055d4 <_vfiprintf_r+0x18>
 80055cc:	6983      	ldr	r3, [r0, #24]
 80055ce:	b90b      	cbnz	r3, 80055d4 <_vfiprintf_r+0x18>
 80055d0:	f000 fb14 	bl	8005bfc <__sinit>
 80055d4:	4b89      	ldr	r3, [pc, #548]	; (80057fc <_vfiprintf_r+0x240>)
 80055d6:	429d      	cmp	r5, r3
 80055d8:	d11b      	bne.n	8005612 <_vfiprintf_r+0x56>
 80055da:	6875      	ldr	r5, [r6, #4]
 80055dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055de:	07d9      	lsls	r1, r3, #31
 80055e0:	d405      	bmi.n	80055ee <_vfiprintf_r+0x32>
 80055e2:	89ab      	ldrh	r3, [r5, #12]
 80055e4:	059a      	lsls	r2, r3, #22
 80055e6:	d402      	bmi.n	80055ee <_vfiprintf_r+0x32>
 80055e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ea:	f000 fba5 	bl	8005d38 <__retarget_lock_acquire_recursive>
 80055ee:	89ab      	ldrh	r3, [r5, #12]
 80055f0:	071b      	lsls	r3, r3, #28
 80055f2:	d501      	bpl.n	80055f8 <_vfiprintf_r+0x3c>
 80055f4:	692b      	ldr	r3, [r5, #16]
 80055f6:	b9eb      	cbnz	r3, 8005634 <_vfiprintf_r+0x78>
 80055f8:	4629      	mov	r1, r5
 80055fa:	4630      	mov	r0, r6
 80055fc:	f000 f96e 	bl	80058dc <__swsetup_r>
 8005600:	b1c0      	cbz	r0, 8005634 <_vfiprintf_r+0x78>
 8005602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005604:	07dc      	lsls	r4, r3, #31
 8005606:	d50e      	bpl.n	8005626 <_vfiprintf_r+0x6a>
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	b01d      	add	sp, #116	; 0x74
 800560e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005612:	4b7b      	ldr	r3, [pc, #492]	; (8005800 <_vfiprintf_r+0x244>)
 8005614:	429d      	cmp	r5, r3
 8005616:	d101      	bne.n	800561c <_vfiprintf_r+0x60>
 8005618:	68b5      	ldr	r5, [r6, #8]
 800561a:	e7df      	b.n	80055dc <_vfiprintf_r+0x20>
 800561c:	4b79      	ldr	r3, [pc, #484]	; (8005804 <_vfiprintf_r+0x248>)
 800561e:	429d      	cmp	r5, r3
 8005620:	bf08      	it	eq
 8005622:	68f5      	ldreq	r5, [r6, #12]
 8005624:	e7da      	b.n	80055dc <_vfiprintf_r+0x20>
 8005626:	89ab      	ldrh	r3, [r5, #12]
 8005628:	0598      	lsls	r0, r3, #22
 800562a:	d4ed      	bmi.n	8005608 <_vfiprintf_r+0x4c>
 800562c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800562e:	f000 fb84 	bl	8005d3a <__retarget_lock_release_recursive>
 8005632:	e7e9      	b.n	8005608 <_vfiprintf_r+0x4c>
 8005634:	2300      	movs	r3, #0
 8005636:	9309      	str	r3, [sp, #36]	; 0x24
 8005638:	2320      	movs	r3, #32
 800563a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800563e:	2330      	movs	r3, #48	; 0x30
 8005640:	f04f 0901 	mov.w	r9, #1
 8005644:	f8cd 800c 	str.w	r8, [sp, #12]
 8005648:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005808 <_vfiprintf_r+0x24c>
 800564c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005650:	4623      	mov	r3, r4
 8005652:	469a      	mov	sl, r3
 8005654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005658:	b10a      	cbz	r2, 800565e <_vfiprintf_r+0xa2>
 800565a:	2a25      	cmp	r2, #37	; 0x25
 800565c:	d1f9      	bne.n	8005652 <_vfiprintf_r+0x96>
 800565e:	ebba 0b04 	subs.w	fp, sl, r4
 8005662:	d00b      	beq.n	800567c <_vfiprintf_r+0xc0>
 8005664:	465b      	mov	r3, fp
 8005666:	4622      	mov	r2, r4
 8005668:	4629      	mov	r1, r5
 800566a:	4630      	mov	r0, r6
 800566c:	f7ff ff93 	bl	8005596 <__sfputs_r>
 8005670:	3001      	adds	r0, #1
 8005672:	f000 80aa 	beq.w	80057ca <_vfiprintf_r+0x20e>
 8005676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005678:	445a      	add	r2, fp
 800567a:	9209      	str	r2, [sp, #36]	; 0x24
 800567c:	f89a 3000 	ldrb.w	r3, [sl]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 80a2 	beq.w	80057ca <_vfiprintf_r+0x20e>
 8005686:	2300      	movs	r3, #0
 8005688:	f04f 32ff 	mov.w	r2, #4294967295
 800568c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005690:	f10a 0a01 	add.w	sl, sl, #1
 8005694:	9304      	str	r3, [sp, #16]
 8005696:	9307      	str	r3, [sp, #28]
 8005698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800569c:	931a      	str	r3, [sp, #104]	; 0x68
 800569e:	4654      	mov	r4, sl
 80056a0:	2205      	movs	r2, #5
 80056a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a6:	4858      	ldr	r0, [pc, #352]	; (8005808 <_vfiprintf_r+0x24c>)
 80056a8:	f7ff fab0 	bl	8004c0c <memchr>
 80056ac:	9a04      	ldr	r2, [sp, #16]
 80056ae:	b9d8      	cbnz	r0, 80056e8 <_vfiprintf_r+0x12c>
 80056b0:	06d1      	lsls	r1, r2, #27
 80056b2:	bf44      	itt	mi
 80056b4:	2320      	movmi	r3, #32
 80056b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056ba:	0713      	lsls	r3, r2, #28
 80056bc:	bf44      	itt	mi
 80056be:	232b      	movmi	r3, #43	; 0x2b
 80056c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056c4:	f89a 3000 	ldrb.w	r3, [sl]
 80056c8:	2b2a      	cmp	r3, #42	; 0x2a
 80056ca:	d015      	beq.n	80056f8 <_vfiprintf_r+0x13c>
 80056cc:	4654      	mov	r4, sl
 80056ce:	2000      	movs	r0, #0
 80056d0:	f04f 0c0a 	mov.w	ip, #10
 80056d4:	9a07      	ldr	r2, [sp, #28]
 80056d6:	4621      	mov	r1, r4
 80056d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056dc:	3b30      	subs	r3, #48	; 0x30
 80056de:	2b09      	cmp	r3, #9
 80056e0:	d94e      	bls.n	8005780 <_vfiprintf_r+0x1c4>
 80056e2:	b1b0      	cbz	r0, 8005712 <_vfiprintf_r+0x156>
 80056e4:	9207      	str	r2, [sp, #28]
 80056e6:	e014      	b.n	8005712 <_vfiprintf_r+0x156>
 80056e8:	eba0 0308 	sub.w	r3, r0, r8
 80056ec:	fa09 f303 	lsl.w	r3, r9, r3
 80056f0:	4313      	orrs	r3, r2
 80056f2:	46a2      	mov	sl, r4
 80056f4:	9304      	str	r3, [sp, #16]
 80056f6:	e7d2      	b.n	800569e <_vfiprintf_r+0xe2>
 80056f8:	9b03      	ldr	r3, [sp, #12]
 80056fa:	1d19      	adds	r1, r3, #4
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	9103      	str	r1, [sp, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	bfbb      	ittet	lt
 8005704:	425b      	neglt	r3, r3
 8005706:	f042 0202 	orrlt.w	r2, r2, #2
 800570a:	9307      	strge	r3, [sp, #28]
 800570c:	9307      	strlt	r3, [sp, #28]
 800570e:	bfb8      	it	lt
 8005710:	9204      	strlt	r2, [sp, #16]
 8005712:	7823      	ldrb	r3, [r4, #0]
 8005714:	2b2e      	cmp	r3, #46	; 0x2e
 8005716:	d10c      	bne.n	8005732 <_vfiprintf_r+0x176>
 8005718:	7863      	ldrb	r3, [r4, #1]
 800571a:	2b2a      	cmp	r3, #42	; 0x2a
 800571c:	d135      	bne.n	800578a <_vfiprintf_r+0x1ce>
 800571e:	9b03      	ldr	r3, [sp, #12]
 8005720:	3402      	adds	r4, #2
 8005722:	1d1a      	adds	r2, r3, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	9203      	str	r2, [sp, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	bfb8      	it	lt
 800572c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005730:	9305      	str	r3, [sp, #20]
 8005732:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005818 <_vfiprintf_r+0x25c>
 8005736:	2203      	movs	r2, #3
 8005738:	4650      	mov	r0, sl
 800573a:	7821      	ldrb	r1, [r4, #0]
 800573c:	f7ff fa66 	bl	8004c0c <memchr>
 8005740:	b140      	cbz	r0, 8005754 <_vfiprintf_r+0x198>
 8005742:	2340      	movs	r3, #64	; 0x40
 8005744:	eba0 000a 	sub.w	r0, r0, sl
 8005748:	fa03 f000 	lsl.w	r0, r3, r0
 800574c:	9b04      	ldr	r3, [sp, #16]
 800574e:	3401      	adds	r4, #1
 8005750:	4303      	orrs	r3, r0
 8005752:	9304      	str	r3, [sp, #16]
 8005754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005758:	2206      	movs	r2, #6
 800575a:	482c      	ldr	r0, [pc, #176]	; (800580c <_vfiprintf_r+0x250>)
 800575c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005760:	f7ff fa54 	bl	8004c0c <memchr>
 8005764:	2800      	cmp	r0, #0
 8005766:	d03f      	beq.n	80057e8 <_vfiprintf_r+0x22c>
 8005768:	4b29      	ldr	r3, [pc, #164]	; (8005810 <_vfiprintf_r+0x254>)
 800576a:	bb1b      	cbnz	r3, 80057b4 <_vfiprintf_r+0x1f8>
 800576c:	9b03      	ldr	r3, [sp, #12]
 800576e:	3307      	adds	r3, #7
 8005770:	f023 0307 	bic.w	r3, r3, #7
 8005774:	3308      	adds	r3, #8
 8005776:	9303      	str	r3, [sp, #12]
 8005778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800577a:	443b      	add	r3, r7
 800577c:	9309      	str	r3, [sp, #36]	; 0x24
 800577e:	e767      	b.n	8005650 <_vfiprintf_r+0x94>
 8005780:	460c      	mov	r4, r1
 8005782:	2001      	movs	r0, #1
 8005784:	fb0c 3202 	mla	r2, ip, r2, r3
 8005788:	e7a5      	b.n	80056d6 <_vfiprintf_r+0x11a>
 800578a:	2300      	movs	r3, #0
 800578c:	f04f 0c0a 	mov.w	ip, #10
 8005790:	4619      	mov	r1, r3
 8005792:	3401      	adds	r4, #1
 8005794:	9305      	str	r3, [sp, #20]
 8005796:	4620      	mov	r0, r4
 8005798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800579c:	3a30      	subs	r2, #48	; 0x30
 800579e:	2a09      	cmp	r2, #9
 80057a0:	d903      	bls.n	80057aa <_vfiprintf_r+0x1ee>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0c5      	beq.n	8005732 <_vfiprintf_r+0x176>
 80057a6:	9105      	str	r1, [sp, #20]
 80057a8:	e7c3      	b.n	8005732 <_vfiprintf_r+0x176>
 80057aa:	4604      	mov	r4, r0
 80057ac:	2301      	movs	r3, #1
 80057ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80057b2:	e7f0      	b.n	8005796 <_vfiprintf_r+0x1da>
 80057b4:	ab03      	add	r3, sp, #12
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	462a      	mov	r2, r5
 80057ba:	4630      	mov	r0, r6
 80057bc:	4b15      	ldr	r3, [pc, #84]	; (8005814 <_vfiprintf_r+0x258>)
 80057be:	a904      	add	r1, sp, #16
 80057c0:	f7fd ffda 	bl	8003778 <_printf_float>
 80057c4:	4607      	mov	r7, r0
 80057c6:	1c78      	adds	r0, r7, #1
 80057c8:	d1d6      	bne.n	8005778 <_vfiprintf_r+0x1bc>
 80057ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057cc:	07d9      	lsls	r1, r3, #31
 80057ce:	d405      	bmi.n	80057dc <_vfiprintf_r+0x220>
 80057d0:	89ab      	ldrh	r3, [r5, #12]
 80057d2:	059a      	lsls	r2, r3, #22
 80057d4:	d402      	bmi.n	80057dc <_vfiprintf_r+0x220>
 80057d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057d8:	f000 faaf 	bl	8005d3a <__retarget_lock_release_recursive>
 80057dc:	89ab      	ldrh	r3, [r5, #12]
 80057de:	065b      	lsls	r3, r3, #25
 80057e0:	f53f af12 	bmi.w	8005608 <_vfiprintf_r+0x4c>
 80057e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057e6:	e711      	b.n	800560c <_vfiprintf_r+0x50>
 80057e8:	ab03      	add	r3, sp, #12
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	462a      	mov	r2, r5
 80057ee:	4630      	mov	r0, r6
 80057f0:	4b08      	ldr	r3, [pc, #32]	; (8005814 <_vfiprintf_r+0x258>)
 80057f2:	a904      	add	r1, sp, #16
 80057f4:	f7fe fa5c 	bl	8003cb0 <_printf_i>
 80057f8:	e7e4      	b.n	80057c4 <_vfiprintf_r+0x208>
 80057fa:	bf00      	nop
 80057fc:	080063cc 	.word	0x080063cc
 8005800:	080063ec 	.word	0x080063ec
 8005804:	080063ac 	.word	0x080063ac
 8005808:	0800629a 	.word	0x0800629a
 800580c:	080062a4 	.word	0x080062a4
 8005810:	08003779 	.word	0x08003779
 8005814:	08005597 	.word	0x08005597
 8005818:	080062a0 	.word	0x080062a0

0800581c <__swbuf_r>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	460e      	mov	r6, r1
 8005820:	4614      	mov	r4, r2
 8005822:	4605      	mov	r5, r0
 8005824:	b118      	cbz	r0, 800582e <__swbuf_r+0x12>
 8005826:	6983      	ldr	r3, [r0, #24]
 8005828:	b90b      	cbnz	r3, 800582e <__swbuf_r+0x12>
 800582a:	f000 f9e7 	bl	8005bfc <__sinit>
 800582e:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <__swbuf_r+0x98>)
 8005830:	429c      	cmp	r4, r3
 8005832:	d12b      	bne.n	800588c <__swbuf_r+0x70>
 8005834:	686c      	ldr	r4, [r5, #4]
 8005836:	69a3      	ldr	r3, [r4, #24]
 8005838:	60a3      	str	r3, [r4, #8]
 800583a:	89a3      	ldrh	r3, [r4, #12]
 800583c:	071a      	lsls	r2, r3, #28
 800583e:	d52f      	bpl.n	80058a0 <__swbuf_r+0x84>
 8005840:	6923      	ldr	r3, [r4, #16]
 8005842:	b36b      	cbz	r3, 80058a0 <__swbuf_r+0x84>
 8005844:	6923      	ldr	r3, [r4, #16]
 8005846:	6820      	ldr	r0, [r4, #0]
 8005848:	b2f6      	uxtb	r6, r6
 800584a:	1ac0      	subs	r0, r0, r3
 800584c:	6963      	ldr	r3, [r4, #20]
 800584e:	4637      	mov	r7, r6
 8005850:	4283      	cmp	r3, r0
 8005852:	dc04      	bgt.n	800585e <__swbuf_r+0x42>
 8005854:	4621      	mov	r1, r4
 8005856:	4628      	mov	r0, r5
 8005858:	f000 f93c 	bl	8005ad4 <_fflush_r>
 800585c:	bb30      	cbnz	r0, 80058ac <__swbuf_r+0x90>
 800585e:	68a3      	ldr	r3, [r4, #8]
 8005860:	3001      	adds	r0, #1
 8005862:	3b01      	subs	r3, #1
 8005864:	60a3      	str	r3, [r4, #8]
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	6022      	str	r2, [r4, #0]
 800586c:	701e      	strb	r6, [r3, #0]
 800586e:	6963      	ldr	r3, [r4, #20]
 8005870:	4283      	cmp	r3, r0
 8005872:	d004      	beq.n	800587e <__swbuf_r+0x62>
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	07db      	lsls	r3, r3, #31
 8005878:	d506      	bpl.n	8005888 <__swbuf_r+0x6c>
 800587a:	2e0a      	cmp	r6, #10
 800587c:	d104      	bne.n	8005888 <__swbuf_r+0x6c>
 800587e:	4621      	mov	r1, r4
 8005880:	4628      	mov	r0, r5
 8005882:	f000 f927 	bl	8005ad4 <_fflush_r>
 8005886:	b988      	cbnz	r0, 80058ac <__swbuf_r+0x90>
 8005888:	4638      	mov	r0, r7
 800588a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800588c:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <__swbuf_r+0x9c>)
 800588e:	429c      	cmp	r4, r3
 8005890:	d101      	bne.n	8005896 <__swbuf_r+0x7a>
 8005892:	68ac      	ldr	r4, [r5, #8]
 8005894:	e7cf      	b.n	8005836 <__swbuf_r+0x1a>
 8005896:	4b09      	ldr	r3, [pc, #36]	; (80058bc <__swbuf_r+0xa0>)
 8005898:	429c      	cmp	r4, r3
 800589a:	bf08      	it	eq
 800589c:	68ec      	ldreq	r4, [r5, #12]
 800589e:	e7ca      	b.n	8005836 <__swbuf_r+0x1a>
 80058a0:	4621      	mov	r1, r4
 80058a2:	4628      	mov	r0, r5
 80058a4:	f000 f81a 	bl	80058dc <__swsetup_r>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d0cb      	beq.n	8005844 <__swbuf_r+0x28>
 80058ac:	f04f 37ff 	mov.w	r7, #4294967295
 80058b0:	e7ea      	b.n	8005888 <__swbuf_r+0x6c>
 80058b2:	bf00      	nop
 80058b4:	080063cc 	.word	0x080063cc
 80058b8:	080063ec 	.word	0x080063ec
 80058bc:	080063ac 	.word	0x080063ac

080058c0 <__ascii_wctomb>:
 80058c0:	4603      	mov	r3, r0
 80058c2:	4608      	mov	r0, r1
 80058c4:	b141      	cbz	r1, 80058d8 <__ascii_wctomb+0x18>
 80058c6:	2aff      	cmp	r2, #255	; 0xff
 80058c8:	d904      	bls.n	80058d4 <__ascii_wctomb+0x14>
 80058ca:	228a      	movs	r2, #138	; 0x8a
 80058cc:	f04f 30ff 	mov.w	r0, #4294967295
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	4770      	bx	lr
 80058d4:	2001      	movs	r0, #1
 80058d6:	700a      	strb	r2, [r1, #0]
 80058d8:	4770      	bx	lr
	...

080058dc <__swsetup_r>:
 80058dc:	4b32      	ldr	r3, [pc, #200]	; (80059a8 <__swsetup_r+0xcc>)
 80058de:	b570      	push	{r4, r5, r6, lr}
 80058e0:	681d      	ldr	r5, [r3, #0]
 80058e2:	4606      	mov	r6, r0
 80058e4:	460c      	mov	r4, r1
 80058e6:	b125      	cbz	r5, 80058f2 <__swsetup_r+0x16>
 80058e8:	69ab      	ldr	r3, [r5, #24]
 80058ea:	b913      	cbnz	r3, 80058f2 <__swsetup_r+0x16>
 80058ec:	4628      	mov	r0, r5
 80058ee:	f000 f985 	bl	8005bfc <__sinit>
 80058f2:	4b2e      	ldr	r3, [pc, #184]	; (80059ac <__swsetup_r+0xd0>)
 80058f4:	429c      	cmp	r4, r3
 80058f6:	d10f      	bne.n	8005918 <__swsetup_r+0x3c>
 80058f8:	686c      	ldr	r4, [r5, #4]
 80058fa:	89a3      	ldrh	r3, [r4, #12]
 80058fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005900:	0719      	lsls	r1, r3, #28
 8005902:	d42c      	bmi.n	800595e <__swsetup_r+0x82>
 8005904:	06dd      	lsls	r5, r3, #27
 8005906:	d411      	bmi.n	800592c <__swsetup_r+0x50>
 8005908:	2309      	movs	r3, #9
 800590a:	6033      	str	r3, [r6, #0]
 800590c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005910:	f04f 30ff 	mov.w	r0, #4294967295
 8005914:	81a3      	strh	r3, [r4, #12]
 8005916:	e03e      	b.n	8005996 <__swsetup_r+0xba>
 8005918:	4b25      	ldr	r3, [pc, #148]	; (80059b0 <__swsetup_r+0xd4>)
 800591a:	429c      	cmp	r4, r3
 800591c:	d101      	bne.n	8005922 <__swsetup_r+0x46>
 800591e:	68ac      	ldr	r4, [r5, #8]
 8005920:	e7eb      	b.n	80058fa <__swsetup_r+0x1e>
 8005922:	4b24      	ldr	r3, [pc, #144]	; (80059b4 <__swsetup_r+0xd8>)
 8005924:	429c      	cmp	r4, r3
 8005926:	bf08      	it	eq
 8005928:	68ec      	ldreq	r4, [r5, #12]
 800592a:	e7e6      	b.n	80058fa <__swsetup_r+0x1e>
 800592c:	0758      	lsls	r0, r3, #29
 800592e:	d512      	bpl.n	8005956 <__swsetup_r+0x7a>
 8005930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005932:	b141      	cbz	r1, 8005946 <__swsetup_r+0x6a>
 8005934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005938:	4299      	cmp	r1, r3
 800593a:	d002      	beq.n	8005942 <__swsetup_r+0x66>
 800593c:	4630      	mov	r0, r6
 800593e:	f7ff fd11 	bl	8005364 <_free_r>
 8005942:	2300      	movs	r3, #0
 8005944:	6363      	str	r3, [r4, #52]	; 0x34
 8005946:	89a3      	ldrh	r3, [r4, #12]
 8005948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800594c:	81a3      	strh	r3, [r4, #12]
 800594e:	2300      	movs	r3, #0
 8005950:	6063      	str	r3, [r4, #4]
 8005952:	6923      	ldr	r3, [r4, #16]
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	f043 0308 	orr.w	r3, r3, #8
 800595c:	81a3      	strh	r3, [r4, #12]
 800595e:	6923      	ldr	r3, [r4, #16]
 8005960:	b94b      	cbnz	r3, 8005976 <__swsetup_r+0x9a>
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800596c:	d003      	beq.n	8005976 <__swsetup_r+0x9a>
 800596e:	4621      	mov	r1, r4
 8005970:	4630      	mov	r0, r6
 8005972:	f000 fa07 	bl	8005d84 <__smakebuf_r>
 8005976:	89a0      	ldrh	r0, [r4, #12]
 8005978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800597c:	f010 0301 	ands.w	r3, r0, #1
 8005980:	d00a      	beq.n	8005998 <__swsetup_r+0xbc>
 8005982:	2300      	movs	r3, #0
 8005984:	60a3      	str	r3, [r4, #8]
 8005986:	6963      	ldr	r3, [r4, #20]
 8005988:	425b      	negs	r3, r3
 800598a:	61a3      	str	r3, [r4, #24]
 800598c:	6923      	ldr	r3, [r4, #16]
 800598e:	b943      	cbnz	r3, 80059a2 <__swsetup_r+0xc6>
 8005990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005994:	d1ba      	bne.n	800590c <__swsetup_r+0x30>
 8005996:	bd70      	pop	{r4, r5, r6, pc}
 8005998:	0781      	lsls	r1, r0, #30
 800599a:	bf58      	it	pl
 800599c:	6963      	ldrpl	r3, [r4, #20]
 800599e:	60a3      	str	r3, [r4, #8]
 80059a0:	e7f4      	b.n	800598c <__swsetup_r+0xb0>
 80059a2:	2000      	movs	r0, #0
 80059a4:	e7f7      	b.n	8005996 <__swsetup_r+0xba>
 80059a6:	bf00      	nop
 80059a8:	2000000c 	.word	0x2000000c
 80059ac:	080063cc 	.word	0x080063cc
 80059b0:	080063ec 	.word	0x080063ec
 80059b4:	080063ac 	.word	0x080063ac

080059b8 <abort>:
 80059b8:	2006      	movs	r0, #6
 80059ba:	b508      	push	{r3, lr}
 80059bc:	f000 fa4a 	bl	8005e54 <raise>
 80059c0:	2001      	movs	r0, #1
 80059c2:	f7fb fcb1 	bl	8001328 <_exit>
	...

080059c8 <__sflush_r>:
 80059c8:	898a      	ldrh	r2, [r1, #12]
 80059ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ce:	4605      	mov	r5, r0
 80059d0:	0710      	lsls	r0, r2, #28
 80059d2:	460c      	mov	r4, r1
 80059d4:	d458      	bmi.n	8005a88 <__sflush_r+0xc0>
 80059d6:	684b      	ldr	r3, [r1, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	dc05      	bgt.n	80059e8 <__sflush_r+0x20>
 80059dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	dc02      	bgt.n	80059e8 <__sflush_r+0x20>
 80059e2:	2000      	movs	r0, #0
 80059e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059ea:	2e00      	cmp	r6, #0
 80059ec:	d0f9      	beq.n	80059e2 <__sflush_r+0x1a>
 80059ee:	2300      	movs	r3, #0
 80059f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059f4:	682f      	ldr	r7, [r5, #0]
 80059f6:	602b      	str	r3, [r5, #0]
 80059f8:	d032      	beq.n	8005a60 <__sflush_r+0x98>
 80059fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	075a      	lsls	r2, r3, #29
 8005a00:	d505      	bpl.n	8005a0e <__sflush_r+0x46>
 8005a02:	6863      	ldr	r3, [r4, #4]
 8005a04:	1ac0      	subs	r0, r0, r3
 8005a06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a08:	b10b      	cbz	r3, 8005a0e <__sflush_r+0x46>
 8005a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a0c:	1ac0      	subs	r0, r0, r3
 8005a0e:	2300      	movs	r3, #0
 8005a10:	4602      	mov	r2, r0
 8005a12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a14:	4628      	mov	r0, r5
 8005a16:	6a21      	ldr	r1, [r4, #32]
 8005a18:	47b0      	blx	r6
 8005a1a:	1c43      	adds	r3, r0, #1
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	d106      	bne.n	8005a2e <__sflush_r+0x66>
 8005a20:	6829      	ldr	r1, [r5, #0]
 8005a22:	291d      	cmp	r1, #29
 8005a24:	d82c      	bhi.n	8005a80 <__sflush_r+0xb8>
 8005a26:	4a2a      	ldr	r2, [pc, #168]	; (8005ad0 <__sflush_r+0x108>)
 8005a28:	40ca      	lsrs	r2, r1
 8005a2a:	07d6      	lsls	r6, r2, #31
 8005a2c:	d528      	bpl.n	8005a80 <__sflush_r+0xb8>
 8005a2e:	2200      	movs	r2, #0
 8005a30:	6062      	str	r2, [r4, #4]
 8005a32:	6922      	ldr	r2, [r4, #16]
 8005a34:	04d9      	lsls	r1, r3, #19
 8005a36:	6022      	str	r2, [r4, #0]
 8005a38:	d504      	bpl.n	8005a44 <__sflush_r+0x7c>
 8005a3a:	1c42      	adds	r2, r0, #1
 8005a3c:	d101      	bne.n	8005a42 <__sflush_r+0x7a>
 8005a3e:	682b      	ldr	r3, [r5, #0]
 8005a40:	b903      	cbnz	r3, 8005a44 <__sflush_r+0x7c>
 8005a42:	6560      	str	r0, [r4, #84]	; 0x54
 8005a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a46:	602f      	str	r7, [r5, #0]
 8005a48:	2900      	cmp	r1, #0
 8005a4a:	d0ca      	beq.n	80059e2 <__sflush_r+0x1a>
 8005a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a50:	4299      	cmp	r1, r3
 8005a52:	d002      	beq.n	8005a5a <__sflush_r+0x92>
 8005a54:	4628      	mov	r0, r5
 8005a56:	f7ff fc85 	bl	8005364 <_free_r>
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	6360      	str	r0, [r4, #52]	; 0x34
 8005a5e:	e7c1      	b.n	80059e4 <__sflush_r+0x1c>
 8005a60:	6a21      	ldr	r1, [r4, #32]
 8005a62:	2301      	movs	r3, #1
 8005a64:	4628      	mov	r0, r5
 8005a66:	47b0      	blx	r6
 8005a68:	1c41      	adds	r1, r0, #1
 8005a6a:	d1c7      	bne.n	80059fc <__sflush_r+0x34>
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0c4      	beq.n	80059fc <__sflush_r+0x34>
 8005a72:	2b1d      	cmp	r3, #29
 8005a74:	d001      	beq.n	8005a7a <__sflush_r+0xb2>
 8005a76:	2b16      	cmp	r3, #22
 8005a78:	d101      	bne.n	8005a7e <__sflush_r+0xb6>
 8005a7a:	602f      	str	r7, [r5, #0]
 8005a7c:	e7b1      	b.n	80059e2 <__sflush_r+0x1a>
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a84:	81a3      	strh	r3, [r4, #12]
 8005a86:	e7ad      	b.n	80059e4 <__sflush_r+0x1c>
 8005a88:	690f      	ldr	r7, [r1, #16]
 8005a8a:	2f00      	cmp	r7, #0
 8005a8c:	d0a9      	beq.n	80059e2 <__sflush_r+0x1a>
 8005a8e:	0793      	lsls	r3, r2, #30
 8005a90:	bf18      	it	ne
 8005a92:	2300      	movne	r3, #0
 8005a94:	680e      	ldr	r6, [r1, #0]
 8005a96:	bf08      	it	eq
 8005a98:	694b      	ldreq	r3, [r1, #20]
 8005a9a:	eba6 0807 	sub.w	r8, r6, r7
 8005a9e:	600f      	str	r7, [r1, #0]
 8005aa0:	608b      	str	r3, [r1, #8]
 8005aa2:	f1b8 0f00 	cmp.w	r8, #0
 8005aa6:	dd9c      	ble.n	80059e2 <__sflush_r+0x1a>
 8005aa8:	4643      	mov	r3, r8
 8005aaa:	463a      	mov	r2, r7
 8005aac:	4628      	mov	r0, r5
 8005aae:	6a21      	ldr	r1, [r4, #32]
 8005ab0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ab2:	47b0      	blx	r6
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	dc06      	bgt.n	8005ac6 <__sflush_r+0xfe>
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	f04f 30ff 	mov.w	r0, #4294967295
 8005abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ac2:	81a3      	strh	r3, [r4, #12]
 8005ac4:	e78e      	b.n	80059e4 <__sflush_r+0x1c>
 8005ac6:	4407      	add	r7, r0
 8005ac8:	eba8 0800 	sub.w	r8, r8, r0
 8005acc:	e7e9      	b.n	8005aa2 <__sflush_r+0xda>
 8005ace:	bf00      	nop
 8005ad0:	20400001 	.word	0x20400001

08005ad4 <_fflush_r>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	690b      	ldr	r3, [r1, #16]
 8005ad8:	4605      	mov	r5, r0
 8005ada:	460c      	mov	r4, r1
 8005adc:	b913      	cbnz	r3, 8005ae4 <_fflush_r+0x10>
 8005ade:	2500      	movs	r5, #0
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	b118      	cbz	r0, 8005aee <_fflush_r+0x1a>
 8005ae6:	6983      	ldr	r3, [r0, #24]
 8005ae8:	b90b      	cbnz	r3, 8005aee <_fflush_r+0x1a>
 8005aea:	f000 f887 	bl	8005bfc <__sinit>
 8005aee:	4b14      	ldr	r3, [pc, #80]	; (8005b40 <_fflush_r+0x6c>)
 8005af0:	429c      	cmp	r4, r3
 8005af2:	d11b      	bne.n	8005b2c <_fflush_r+0x58>
 8005af4:	686c      	ldr	r4, [r5, #4]
 8005af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0ef      	beq.n	8005ade <_fflush_r+0xa>
 8005afe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b00:	07d0      	lsls	r0, r2, #31
 8005b02:	d404      	bmi.n	8005b0e <_fflush_r+0x3a>
 8005b04:	0599      	lsls	r1, r3, #22
 8005b06:	d402      	bmi.n	8005b0e <_fflush_r+0x3a>
 8005b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b0a:	f000 f915 	bl	8005d38 <__retarget_lock_acquire_recursive>
 8005b0e:	4628      	mov	r0, r5
 8005b10:	4621      	mov	r1, r4
 8005b12:	f7ff ff59 	bl	80059c8 <__sflush_r>
 8005b16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b18:	4605      	mov	r5, r0
 8005b1a:	07da      	lsls	r2, r3, #31
 8005b1c:	d4e0      	bmi.n	8005ae0 <_fflush_r+0xc>
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	059b      	lsls	r3, r3, #22
 8005b22:	d4dd      	bmi.n	8005ae0 <_fflush_r+0xc>
 8005b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b26:	f000 f908 	bl	8005d3a <__retarget_lock_release_recursive>
 8005b2a:	e7d9      	b.n	8005ae0 <_fflush_r+0xc>
 8005b2c:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <_fflush_r+0x70>)
 8005b2e:	429c      	cmp	r4, r3
 8005b30:	d101      	bne.n	8005b36 <_fflush_r+0x62>
 8005b32:	68ac      	ldr	r4, [r5, #8]
 8005b34:	e7df      	b.n	8005af6 <_fflush_r+0x22>
 8005b36:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <_fflush_r+0x74>)
 8005b38:	429c      	cmp	r4, r3
 8005b3a:	bf08      	it	eq
 8005b3c:	68ec      	ldreq	r4, [r5, #12]
 8005b3e:	e7da      	b.n	8005af6 <_fflush_r+0x22>
 8005b40:	080063cc 	.word	0x080063cc
 8005b44:	080063ec 	.word	0x080063ec
 8005b48:	080063ac 	.word	0x080063ac

08005b4c <std>:
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	b510      	push	{r4, lr}
 8005b50:	4604      	mov	r4, r0
 8005b52:	e9c0 3300 	strd	r3, r3, [r0]
 8005b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b5a:	6083      	str	r3, [r0, #8]
 8005b5c:	8181      	strh	r1, [r0, #12]
 8005b5e:	6643      	str	r3, [r0, #100]	; 0x64
 8005b60:	81c2      	strh	r2, [r0, #14]
 8005b62:	6183      	str	r3, [r0, #24]
 8005b64:	4619      	mov	r1, r3
 8005b66:	2208      	movs	r2, #8
 8005b68:	305c      	adds	r0, #92	; 0x5c
 8005b6a:	f7fd fd5f 	bl	800362c <memset>
 8005b6e:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <std+0x38>)
 8005b70:	6224      	str	r4, [r4, #32]
 8005b72:	6263      	str	r3, [r4, #36]	; 0x24
 8005b74:	4b04      	ldr	r3, [pc, #16]	; (8005b88 <std+0x3c>)
 8005b76:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b78:	4b04      	ldr	r3, [pc, #16]	; (8005b8c <std+0x40>)
 8005b7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b7c:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <std+0x44>)
 8005b7e:	6323      	str	r3, [r4, #48]	; 0x30
 8005b80:	bd10      	pop	{r4, pc}
 8005b82:	bf00      	nop
 8005b84:	08005e8d 	.word	0x08005e8d
 8005b88:	08005eaf 	.word	0x08005eaf
 8005b8c:	08005ee7 	.word	0x08005ee7
 8005b90:	08005f0b 	.word	0x08005f0b

08005b94 <_cleanup_r>:
 8005b94:	4901      	ldr	r1, [pc, #4]	; (8005b9c <_cleanup_r+0x8>)
 8005b96:	f000 b8af 	b.w	8005cf8 <_fwalk_reent>
 8005b9a:	bf00      	nop
 8005b9c:	08005ad5 	.word	0x08005ad5

08005ba0 <__sfmoreglue>:
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	2568      	movs	r5, #104	; 0x68
 8005ba4:	1e4a      	subs	r2, r1, #1
 8005ba6:	4355      	muls	r5, r2
 8005ba8:	460e      	mov	r6, r1
 8005baa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bae:	f7ff fc25 	bl	80053fc <_malloc_r>
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	b140      	cbz	r0, 8005bc8 <__sfmoreglue+0x28>
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	e9c0 1600 	strd	r1, r6, [r0]
 8005bbc:	300c      	adds	r0, #12
 8005bbe:	60a0      	str	r0, [r4, #8]
 8005bc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bc4:	f7fd fd32 	bl	800362c <memset>
 8005bc8:	4620      	mov	r0, r4
 8005bca:	bd70      	pop	{r4, r5, r6, pc}

08005bcc <__sfp_lock_acquire>:
 8005bcc:	4801      	ldr	r0, [pc, #4]	; (8005bd4 <__sfp_lock_acquire+0x8>)
 8005bce:	f000 b8b3 	b.w	8005d38 <__retarget_lock_acquire_recursive>
 8005bd2:	bf00      	nop
 8005bd4:	200002d4 	.word	0x200002d4

08005bd8 <__sfp_lock_release>:
 8005bd8:	4801      	ldr	r0, [pc, #4]	; (8005be0 <__sfp_lock_release+0x8>)
 8005bda:	f000 b8ae 	b.w	8005d3a <__retarget_lock_release_recursive>
 8005bde:	bf00      	nop
 8005be0:	200002d4 	.word	0x200002d4

08005be4 <__sinit_lock_acquire>:
 8005be4:	4801      	ldr	r0, [pc, #4]	; (8005bec <__sinit_lock_acquire+0x8>)
 8005be6:	f000 b8a7 	b.w	8005d38 <__retarget_lock_acquire_recursive>
 8005bea:	bf00      	nop
 8005bec:	200002cf 	.word	0x200002cf

08005bf0 <__sinit_lock_release>:
 8005bf0:	4801      	ldr	r0, [pc, #4]	; (8005bf8 <__sinit_lock_release+0x8>)
 8005bf2:	f000 b8a2 	b.w	8005d3a <__retarget_lock_release_recursive>
 8005bf6:	bf00      	nop
 8005bf8:	200002cf 	.word	0x200002cf

08005bfc <__sinit>:
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	4604      	mov	r4, r0
 8005c00:	f7ff fff0 	bl	8005be4 <__sinit_lock_acquire>
 8005c04:	69a3      	ldr	r3, [r4, #24]
 8005c06:	b11b      	cbz	r3, 8005c10 <__sinit+0x14>
 8005c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c0c:	f7ff bff0 	b.w	8005bf0 <__sinit_lock_release>
 8005c10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c14:	6523      	str	r3, [r4, #80]	; 0x50
 8005c16:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <__sinit+0x68>)
 8005c18:	4a13      	ldr	r2, [pc, #76]	; (8005c68 <__sinit+0x6c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c1e:	42a3      	cmp	r3, r4
 8005c20:	bf08      	it	eq
 8005c22:	2301      	moveq	r3, #1
 8005c24:	4620      	mov	r0, r4
 8005c26:	bf08      	it	eq
 8005c28:	61a3      	streq	r3, [r4, #24]
 8005c2a:	f000 f81f 	bl	8005c6c <__sfp>
 8005c2e:	6060      	str	r0, [r4, #4]
 8005c30:	4620      	mov	r0, r4
 8005c32:	f000 f81b 	bl	8005c6c <__sfp>
 8005c36:	60a0      	str	r0, [r4, #8]
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f000 f817 	bl	8005c6c <__sfp>
 8005c3e:	2200      	movs	r2, #0
 8005c40:	2104      	movs	r1, #4
 8005c42:	60e0      	str	r0, [r4, #12]
 8005c44:	6860      	ldr	r0, [r4, #4]
 8005c46:	f7ff ff81 	bl	8005b4c <std>
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	2109      	movs	r1, #9
 8005c4e:	68a0      	ldr	r0, [r4, #8]
 8005c50:	f7ff ff7c 	bl	8005b4c <std>
 8005c54:	2202      	movs	r2, #2
 8005c56:	2112      	movs	r1, #18
 8005c58:	68e0      	ldr	r0, [r4, #12]
 8005c5a:	f7ff ff77 	bl	8005b4c <std>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	61a3      	str	r3, [r4, #24]
 8005c62:	e7d1      	b.n	8005c08 <__sinit+0xc>
 8005c64:	08006028 	.word	0x08006028
 8005c68:	08005b95 	.word	0x08005b95

08005c6c <__sfp>:
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6e:	4607      	mov	r7, r0
 8005c70:	f7ff ffac 	bl	8005bcc <__sfp_lock_acquire>
 8005c74:	4b1e      	ldr	r3, [pc, #120]	; (8005cf0 <__sfp+0x84>)
 8005c76:	681e      	ldr	r6, [r3, #0]
 8005c78:	69b3      	ldr	r3, [r6, #24]
 8005c7a:	b913      	cbnz	r3, 8005c82 <__sfp+0x16>
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f7ff ffbd 	bl	8005bfc <__sinit>
 8005c82:	3648      	adds	r6, #72	; 0x48
 8005c84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	d503      	bpl.n	8005c94 <__sfp+0x28>
 8005c8c:	6833      	ldr	r3, [r6, #0]
 8005c8e:	b30b      	cbz	r3, 8005cd4 <__sfp+0x68>
 8005c90:	6836      	ldr	r6, [r6, #0]
 8005c92:	e7f7      	b.n	8005c84 <__sfp+0x18>
 8005c94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c98:	b9d5      	cbnz	r5, 8005cd0 <__sfp+0x64>
 8005c9a:	4b16      	ldr	r3, [pc, #88]	; (8005cf4 <__sfp+0x88>)
 8005c9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ca0:	60e3      	str	r3, [r4, #12]
 8005ca2:	6665      	str	r5, [r4, #100]	; 0x64
 8005ca4:	f000 f847 	bl	8005d36 <__retarget_lock_init_recursive>
 8005ca8:	f7ff ff96 	bl	8005bd8 <__sfp_lock_release>
 8005cac:	2208      	movs	r2, #8
 8005cae:	4629      	mov	r1, r5
 8005cb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cb8:	6025      	str	r5, [r4, #0]
 8005cba:	61a5      	str	r5, [r4, #24]
 8005cbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cc0:	f7fd fcb4 	bl	800362c <memset>
 8005cc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ccc:	4620      	mov	r0, r4
 8005cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cd0:	3468      	adds	r4, #104	; 0x68
 8005cd2:	e7d9      	b.n	8005c88 <__sfp+0x1c>
 8005cd4:	2104      	movs	r1, #4
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	f7ff ff62 	bl	8005ba0 <__sfmoreglue>
 8005cdc:	4604      	mov	r4, r0
 8005cde:	6030      	str	r0, [r6, #0]
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d1d5      	bne.n	8005c90 <__sfp+0x24>
 8005ce4:	f7ff ff78 	bl	8005bd8 <__sfp_lock_release>
 8005ce8:	230c      	movs	r3, #12
 8005cea:	603b      	str	r3, [r7, #0]
 8005cec:	e7ee      	b.n	8005ccc <__sfp+0x60>
 8005cee:	bf00      	nop
 8005cf0:	08006028 	.word	0x08006028
 8005cf4:	ffff0001 	.word	0xffff0001

08005cf8 <_fwalk_reent>:
 8005cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	4688      	mov	r8, r1
 8005d00:	2700      	movs	r7, #0
 8005d02:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d0a:	f1b9 0901 	subs.w	r9, r9, #1
 8005d0e:	d505      	bpl.n	8005d1c <_fwalk_reent+0x24>
 8005d10:	6824      	ldr	r4, [r4, #0]
 8005d12:	2c00      	cmp	r4, #0
 8005d14:	d1f7      	bne.n	8005d06 <_fwalk_reent+0xe>
 8005d16:	4638      	mov	r0, r7
 8005d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d1c:	89ab      	ldrh	r3, [r5, #12]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d907      	bls.n	8005d32 <_fwalk_reent+0x3a>
 8005d22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d26:	3301      	adds	r3, #1
 8005d28:	d003      	beq.n	8005d32 <_fwalk_reent+0x3a>
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	47c0      	blx	r8
 8005d30:	4307      	orrs	r7, r0
 8005d32:	3568      	adds	r5, #104	; 0x68
 8005d34:	e7e9      	b.n	8005d0a <_fwalk_reent+0x12>

08005d36 <__retarget_lock_init_recursive>:
 8005d36:	4770      	bx	lr

08005d38 <__retarget_lock_acquire_recursive>:
 8005d38:	4770      	bx	lr

08005d3a <__retarget_lock_release_recursive>:
 8005d3a:	4770      	bx	lr

08005d3c <__swhatbuf_r>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	460e      	mov	r6, r1
 8005d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d44:	4614      	mov	r4, r2
 8005d46:	2900      	cmp	r1, #0
 8005d48:	461d      	mov	r5, r3
 8005d4a:	b096      	sub	sp, #88	; 0x58
 8005d4c:	da07      	bge.n	8005d5e <__swhatbuf_r+0x22>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	602b      	str	r3, [r5, #0]
 8005d52:	89b3      	ldrh	r3, [r6, #12]
 8005d54:	061a      	lsls	r2, r3, #24
 8005d56:	d410      	bmi.n	8005d7a <__swhatbuf_r+0x3e>
 8005d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d5c:	e00e      	b.n	8005d7c <__swhatbuf_r+0x40>
 8005d5e:	466a      	mov	r2, sp
 8005d60:	f000 f8fa 	bl	8005f58 <_fstat_r>
 8005d64:	2800      	cmp	r0, #0
 8005d66:	dbf2      	blt.n	8005d4e <__swhatbuf_r+0x12>
 8005d68:	9a01      	ldr	r2, [sp, #4]
 8005d6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d72:	425a      	negs	r2, r3
 8005d74:	415a      	adcs	r2, r3
 8005d76:	602a      	str	r2, [r5, #0]
 8005d78:	e7ee      	b.n	8005d58 <__swhatbuf_r+0x1c>
 8005d7a:	2340      	movs	r3, #64	; 0x40
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	6023      	str	r3, [r4, #0]
 8005d80:	b016      	add	sp, #88	; 0x58
 8005d82:	bd70      	pop	{r4, r5, r6, pc}

08005d84 <__smakebuf_r>:
 8005d84:	898b      	ldrh	r3, [r1, #12]
 8005d86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d88:	079d      	lsls	r5, r3, #30
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	d507      	bpl.n	8005da0 <__smakebuf_r+0x1c>
 8005d90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d94:	6023      	str	r3, [r4, #0]
 8005d96:	6123      	str	r3, [r4, #16]
 8005d98:	2301      	movs	r3, #1
 8005d9a:	6163      	str	r3, [r4, #20]
 8005d9c:	b002      	add	sp, #8
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}
 8005da0:	466a      	mov	r2, sp
 8005da2:	ab01      	add	r3, sp, #4
 8005da4:	f7ff ffca 	bl	8005d3c <__swhatbuf_r>
 8005da8:	9900      	ldr	r1, [sp, #0]
 8005daa:	4605      	mov	r5, r0
 8005dac:	4630      	mov	r0, r6
 8005dae:	f7ff fb25 	bl	80053fc <_malloc_r>
 8005db2:	b948      	cbnz	r0, 8005dc8 <__smakebuf_r+0x44>
 8005db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005db8:	059a      	lsls	r2, r3, #22
 8005dba:	d4ef      	bmi.n	8005d9c <__smakebuf_r+0x18>
 8005dbc:	f023 0303 	bic.w	r3, r3, #3
 8005dc0:	f043 0302 	orr.w	r3, r3, #2
 8005dc4:	81a3      	strh	r3, [r4, #12]
 8005dc6:	e7e3      	b.n	8005d90 <__smakebuf_r+0xc>
 8005dc8:	4b0d      	ldr	r3, [pc, #52]	; (8005e00 <__smakebuf_r+0x7c>)
 8005dca:	62b3      	str	r3, [r6, #40]	; 0x28
 8005dcc:	89a3      	ldrh	r3, [r4, #12]
 8005dce:	6020      	str	r0, [r4, #0]
 8005dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd4:	81a3      	strh	r3, [r4, #12]
 8005dd6:	9b00      	ldr	r3, [sp, #0]
 8005dd8:	6120      	str	r0, [r4, #16]
 8005dda:	6163      	str	r3, [r4, #20]
 8005ddc:	9b01      	ldr	r3, [sp, #4]
 8005dde:	b15b      	cbz	r3, 8005df8 <__smakebuf_r+0x74>
 8005de0:	4630      	mov	r0, r6
 8005de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005de6:	f000 f8c9 	bl	8005f7c <_isatty_r>
 8005dea:	b128      	cbz	r0, 8005df8 <__smakebuf_r+0x74>
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	f023 0303 	bic.w	r3, r3, #3
 8005df2:	f043 0301 	orr.w	r3, r3, #1
 8005df6:	81a3      	strh	r3, [r4, #12]
 8005df8:	89a0      	ldrh	r0, [r4, #12]
 8005dfa:	4305      	orrs	r5, r0
 8005dfc:	81a5      	strh	r5, [r4, #12]
 8005dfe:	e7cd      	b.n	8005d9c <__smakebuf_r+0x18>
 8005e00:	08005b95 	.word	0x08005b95

08005e04 <_raise_r>:
 8005e04:	291f      	cmp	r1, #31
 8005e06:	b538      	push	{r3, r4, r5, lr}
 8005e08:	4604      	mov	r4, r0
 8005e0a:	460d      	mov	r5, r1
 8005e0c:	d904      	bls.n	8005e18 <_raise_r+0x14>
 8005e0e:	2316      	movs	r3, #22
 8005e10:	6003      	str	r3, [r0, #0]
 8005e12:	f04f 30ff 	mov.w	r0, #4294967295
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e1a:	b112      	cbz	r2, 8005e22 <_raise_r+0x1e>
 8005e1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e20:	b94b      	cbnz	r3, 8005e36 <_raise_r+0x32>
 8005e22:	4620      	mov	r0, r4
 8005e24:	f000 f830 	bl	8005e88 <_getpid_r>
 8005e28:	462a      	mov	r2, r5
 8005e2a:	4601      	mov	r1, r0
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e32:	f000 b817 	b.w	8005e64 <_kill_r>
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d00a      	beq.n	8005e50 <_raise_r+0x4c>
 8005e3a:	1c59      	adds	r1, r3, #1
 8005e3c:	d103      	bne.n	8005e46 <_raise_r+0x42>
 8005e3e:	2316      	movs	r3, #22
 8005e40:	6003      	str	r3, [r0, #0]
 8005e42:	2001      	movs	r0, #1
 8005e44:	e7e7      	b.n	8005e16 <_raise_r+0x12>
 8005e46:	2400      	movs	r4, #0
 8005e48:	4628      	mov	r0, r5
 8005e4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e4e:	4798      	blx	r3
 8005e50:	2000      	movs	r0, #0
 8005e52:	e7e0      	b.n	8005e16 <_raise_r+0x12>

08005e54 <raise>:
 8005e54:	4b02      	ldr	r3, [pc, #8]	; (8005e60 <raise+0xc>)
 8005e56:	4601      	mov	r1, r0
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	f7ff bfd3 	b.w	8005e04 <_raise_r>
 8005e5e:	bf00      	nop
 8005e60:	2000000c 	.word	0x2000000c

08005e64 <_kill_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	2300      	movs	r3, #0
 8005e68:	4d06      	ldr	r5, [pc, #24]	; (8005e84 <_kill_r+0x20>)
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	4608      	mov	r0, r1
 8005e6e:	4611      	mov	r1, r2
 8005e70:	602b      	str	r3, [r5, #0]
 8005e72:	f7fb fa49 	bl	8001308 <_kill>
 8005e76:	1c43      	adds	r3, r0, #1
 8005e78:	d102      	bne.n	8005e80 <_kill_r+0x1c>
 8005e7a:	682b      	ldr	r3, [r5, #0]
 8005e7c:	b103      	cbz	r3, 8005e80 <_kill_r+0x1c>
 8005e7e:	6023      	str	r3, [r4, #0]
 8005e80:	bd38      	pop	{r3, r4, r5, pc}
 8005e82:	bf00      	nop
 8005e84:	200002c8 	.word	0x200002c8

08005e88 <_getpid_r>:
 8005e88:	f7fb ba37 	b.w	80012fa <_getpid>

08005e8c <__sread>:
 8005e8c:	b510      	push	{r4, lr}
 8005e8e:	460c      	mov	r4, r1
 8005e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e94:	f000 f894 	bl	8005fc0 <_read_r>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	bfab      	itete	ge
 8005e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8005ea0:	181b      	addge	r3, r3, r0
 8005ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ea6:	bfac      	ite	ge
 8005ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005eaa:	81a3      	strhlt	r3, [r4, #12]
 8005eac:	bd10      	pop	{r4, pc}

08005eae <__swrite>:
 8005eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb2:	461f      	mov	r7, r3
 8005eb4:	898b      	ldrh	r3, [r1, #12]
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	05db      	lsls	r3, r3, #23
 8005eba:	460c      	mov	r4, r1
 8005ebc:	4616      	mov	r6, r2
 8005ebe:	d505      	bpl.n	8005ecc <__swrite+0x1e>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec8:	f000 f868 	bl	8005f9c <_lseek_r>
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	4632      	mov	r2, r6
 8005ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ed4:	81a3      	strh	r3, [r4, #12]
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	463b      	mov	r3, r7
 8005eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee2:	f000 b817 	b.w	8005f14 <_write_r>

08005ee6 <__sseek>:
 8005ee6:	b510      	push	{r4, lr}
 8005ee8:	460c      	mov	r4, r1
 8005eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eee:	f000 f855 	bl	8005f9c <_lseek_r>
 8005ef2:	1c43      	adds	r3, r0, #1
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	bf15      	itete	ne
 8005ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f02:	81a3      	strheq	r3, [r4, #12]
 8005f04:	bf18      	it	ne
 8005f06:	81a3      	strhne	r3, [r4, #12]
 8005f08:	bd10      	pop	{r4, pc}

08005f0a <__sclose>:
 8005f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f0e:	f000 b813 	b.w	8005f38 <_close_r>
	...

08005f14 <_write_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4604      	mov	r4, r0
 8005f18:	4608      	mov	r0, r1
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	4d05      	ldr	r5, [pc, #20]	; (8005f34 <_write_r+0x20>)
 8005f20:	602a      	str	r2, [r5, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	f7fb fa27 	bl	8001376 <_write>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	d102      	bne.n	8005f32 <_write_r+0x1e>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	b103      	cbz	r3, 8005f32 <_write_r+0x1e>
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	bd38      	pop	{r3, r4, r5, pc}
 8005f34:	200002c8 	.word	0x200002c8

08005f38 <_close_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	4d05      	ldr	r5, [pc, #20]	; (8005f54 <_close_r+0x1c>)
 8005f3e:	4604      	mov	r4, r0
 8005f40:	4608      	mov	r0, r1
 8005f42:	602b      	str	r3, [r5, #0]
 8005f44:	f7fb fa33 	bl	80013ae <_close>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	d102      	bne.n	8005f52 <_close_r+0x1a>
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	b103      	cbz	r3, 8005f52 <_close_r+0x1a>
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	bd38      	pop	{r3, r4, r5, pc}
 8005f54:	200002c8 	.word	0x200002c8

08005f58 <_fstat_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	4d06      	ldr	r5, [pc, #24]	; (8005f78 <_fstat_r+0x20>)
 8005f5e:	4604      	mov	r4, r0
 8005f60:	4608      	mov	r0, r1
 8005f62:	4611      	mov	r1, r2
 8005f64:	602b      	str	r3, [r5, #0]
 8005f66:	f7fb fa2d 	bl	80013c4 <_fstat>
 8005f6a:	1c43      	adds	r3, r0, #1
 8005f6c:	d102      	bne.n	8005f74 <_fstat_r+0x1c>
 8005f6e:	682b      	ldr	r3, [r5, #0]
 8005f70:	b103      	cbz	r3, 8005f74 <_fstat_r+0x1c>
 8005f72:	6023      	str	r3, [r4, #0]
 8005f74:	bd38      	pop	{r3, r4, r5, pc}
 8005f76:	bf00      	nop
 8005f78:	200002c8 	.word	0x200002c8

08005f7c <_isatty_r>:
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	2300      	movs	r3, #0
 8005f80:	4d05      	ldr	r5, [pc, #20]	; (8005f98 <_isatty_r+0x1c>)
 8005f82:	4604      	mov	r4, r0
 8005f84:	4608      	mov	r0, r1
 8005f86:	602b      	str	r3, [r5, #0]
 8005f88:	f7fb fa2b 	bl	80013e2 <_isatty>
 8005f8c:	1c43      	adds	r3, r0, #1
 8005f8e:	d102      	bne.n	8005f96 <_isatty_r+0x1a>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	b103      	cbz	r3, 8005f96 <_isatty_r+0x1a>
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	bd38      	pop	{r3, r4, r5, pc}
 8005f98:	200002c8 	.word	0x200002c8

08005f9c <_lseek_r>:
 8005f9c:	b538      	push	{r3, r4, r5, lr}
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	4608      	mov	r0, r1
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	4d05      	ldr	r5, [pc, #20]	; (8005fbc <_lseek_r+0x20>)
 8005fa8:	602a      	str	r2, [r5, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	f7fb fa23 	bl	80013f6 <_lseek>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d102      	bne.n	8005fba <_lseek_r+0x1e>
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	b103      	cbz	r3, 8005fba <_lseek_r+0x1e>
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	200002c8 	.word	0x200002c8

08005fc0 <_read_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	4608      	mov	r0, r1
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	2200      	movs	r2, #0
 8005fca:	4d05      	ldr	r5, [pc, #20]	; (8005fe0 <_read_r+0x20>)
 8005fcc:	602a      	str	r2, [r5, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f7fb f9b4 	bl	800133c <_read>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d102      	bne.n	8005fde <_read_r+0x1e>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	b103      	cbz	r3, 8005fde <_read_r+0x1e>
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	200002c8 	.word	0x200002c8

08005fe4 <_init>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	bf00      	nop
 8005fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fea:	bc08      	pop	{r3}
 8005fec:	469e      	mov	lr, r3
 8005fee:	4770      	bx	lr

08005ff0 <_fini>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	bf00      	nop
 8005ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff6:	bc08      	pop	{r3}
 8005ff8:	469e      	mov	lr, r3
 8005ffa:	4770      	bx	lr
