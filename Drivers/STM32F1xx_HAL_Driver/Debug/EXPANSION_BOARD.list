
EXPANSION_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000842c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08008540  08008540  00018540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800898c  0800898c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800898c  0800898c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800898c  0800898c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800898c  0800898c  0001898c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008990  08008990  00018990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  200001dc  08008b70  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08008b70  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102ad  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea6  00000000  00000000  000304b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00033358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00034140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019428  00000000  00000000  00034df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001198a  00000000  00000000  0004e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089172  00000000  00000000  0005fbaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8d1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004838  00000000  00000000  000e8d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008524 	.word	0x08008524

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08008524 	.word	0x08008524

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <read8>:

#include "HTS221.h"


static uint8_t read8(hts221_t* sensor, uint8_t Mem_reg)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af04      	add	r7, sp, #16
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	HAL_I2C_Mem_Read(sensor->i2c_handler, sensor->address, Mem_reg, 1, &value, 1, I2C_HTS_TIMEOUT);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	791b      	ldrb	r3, [r3, #4]
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	9302      	str	r3, [sp, #8]
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	9301      	str	r3, [sp, #4]
 8000aac:	f107 030f 	add.w	r3, r7, #15
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	f001 ffd2 	bl	8002a5c <HAL_I2C_Mem_Read>

	return value;
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <read16>:

static uint16_t read16(hts221_t* sensor, uint8_t Mem_reg)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b088      	sub	sp, #32
 8000ac6:	af04      	add	r7, sp, #16
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	460b      	mov	r3, r1
 8000acc:	70fb      	strb	r3, [r7, #3]
	uint8_t value[2];
	// |n order to read 16 bits register we need to set 1 in MSB in subaddress that we want to read
	HAL_I2C_Mem_Read(sensor->i2c_handler, sensor->address, (Mem_reg | 0x80), I2C_MEMADD_SIZE_8BIT, value, 2, I2C_HTS_TIMEOUT);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6818      	ldr	r0, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	791b      	ldrb	r3, [r3, #4]
 8000ad6:	b299      	uxth	r1, r3
 8000ad8:	78fb      	ldrb	r3, [r7, #3]
 8000ada:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae6:	9302      	str	r3, [sp, #8]
 8000ae8:	2302      	movs	r3, #2
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2301      	movs	r3, #1
 8000af4:	f001 ffb2 	bl	8002a5c <HAL_I2C_Mem_Read>

	return (((uint16_t)(value[1])) << 8) | (uint16_t)value[0];
 8000af8:	7b7b      	ldrb	r3, [r7, #13]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	b21a      	sxth	r2, r3
 8000afe:	7b3b      	ldrb	r3, [r7, #12]
 8000b00:	b21b      	sxth	r3, r3
 8000b02:	4313      	orrs	r3, r2
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	b29b      	uxth	r3, r3
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <write8>:

static void write8(hts221_t* sensor, uint8_t Mem_reg, uint8_t* data)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af04      	add	r7, sp, #16
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensor->i2c_handler, sensor->address, Mem_reg, 1, data, 1, I2C_HTS_TIMEOUT);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	791b      	ldrb	r3, [r3, #4]
 8000b26:	b299      	uxth	r1, r3
 8000b28:	7afb      	ldrb	r3, [r7, #11]
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b30:	9302      	str	r3, [sp, #8]
 8000b32:	2301      	movs	r3, #1
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	f001 fe94 	bl	8002868 <HAL_I2C_Mem_Write>
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <HTS221_set_power_mode>:

/////////////////////////////////////////////


void HTS221_set_power_mode(hts221_t* sensor, bool mode)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	70fb      	strb	r3, [r7, #3]
	// mode 1 - Active,  0 - Power down
	uint8_t tmp;
	tmp = read8(sensor, CTRL_REG1);
 8000b54:	2120      	movs	r1, #32
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ff96 	bl	8000a88 <read8>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	73fb      	strb	r3, [r7, #15]

	if(mode == 0) tmp &= 0x7F; // 0xxx xxxx
 8000b60:	78fb      	ldrb	r3, [r7, #3]
 8000b62:	f083 0301 	eor.w	r3, r3, #1
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d005      	beq.n	8000b78 <HTS221_set_power_mode+0x30>
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	73fb      	strb	r3, [r7, #15]
 8000b76:	e004      	b.n	8000b82 <HTS221_set_power_mode+0x3a>
	else
	{
		tmp |= 0x80;
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	73fb      	strb	r3, [r7, #15]
	}

	write8(sensor, CTRL_REG1, &tmp);
 8000b82:	f107 030f 	add.w	r3, r7, #15
 8000b86:	461a      	mov	r2, r3
 8000b88:	2120      	movs	r1, #32
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffc0 	bl	8000b10 <write8>
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <HTS221_set_output_data_rate>:



void HTS221_set_output_data_rate(hts221_t* sensor, uint8_t data_rate)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]
	if(data_rate > 3) data_rate = 3;
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d901      	bls.n	8000bae <HTS221_set_output_data_rate+0x16>
 8000baa:	2303      	movs	r3, #3
 8000bac:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, CTRL_REG1);
 8000bae:	2120      	movs	r1, #32
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff69 	bl	8000a88 <read8>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xFC; // XXXX XX00
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	f023 0303 	bic.w	r3, r3, #3
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	73fb      	strb	r3, [r7, #15]
	tmp |= data_rate & 0x03; // double protection for writing wrong number
 8000bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	b25a      	sxtb	r2, r3
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	73fb      	strb	r3, [r7, #15]

	write8(sensor, CTRL_REG1, &tmp);
 8000bda:	f107 030f 	add.w	r3, r7, #15
 8000bde:	461a      	mov	r2, r3
 8000be0:	2120      	movs	r1, #32
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ff94 	bl	8000b10 <write8>
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HTS221_set_temp_sample>:



void HTS221_set_temp_sample(hts221_t* sensor, uint8_t sample_mode)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	70fb      	strb	r3, [r7, #3]
	if(sample_mode > 7) sample_mode = 7;
 8000bfc:	78fb      	ldrb	r3, [r7, #3]
 8000bfe:	2b07      	cmp	r3, #7
 8000c00:	d901      	bls.n	8000c06 <HTS221_set_temp_sample+0x16>
 8000c02:	2307      	movs	r3, #7
 8000c04:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, AV_CONF);
 8000c06:	2110      	movs	r1, #16
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff3d 	bl	8000a88 <read8>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	73fb      	strb	r3, [r7, #15]

	tmp &= 0xC7; // 0bXX00 0xxx
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	73fb      	strb	r3, [r7, #15]
	tmp |= (sample_mode) << 3;
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	b25a      	sxtb	r2, r3
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	73fb      	strb	r3, [r7, #15]

	write8(sensor, AV_CONF, &tmp);
 8000c2e:	f107 030f 	add.w	r3, r7, #15
 8000c32:	461a      	mov	r2, r3
 8000c34:	2110      	movs	r1, #16
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ff6a 	bl	8000b10 <write8>
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HTS221_set_humidity_sample>:

void HTS221_set_humidity_sample(hts221_t* sensor, uint8_t sample_mode)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
	if(sample_mode > 7) sample_mode = 7;
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2b07      	cmp	r3, #7
 8000c54:	d901      	bls.n	8000c5a <HTS221_set_humidity_sample+0x16>
 8000c56:	2307      	movs	r3, #7
 8000c58:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, AV_CONF);
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff13 	bl	8000a88 <read8>
 8000c62:	4603      	mov	r3, r0
 8000c64:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xF8; // 0bXXXXX000
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	f023 0307 	bic.w	r3, r3, #7
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	73fb      	strb	r3, [r7, #15]

	tmp |= (sample_mode) & 0x07; // protection for writing number bigger than 7
 8000c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c74:	f003 0307 	and.w	r3, r3, #7
 8000c78:	b25a      	sxtb	r2, r3
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	b25b      	sxtb	r3, r3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	73fb      	strb	r3, [r7, #15]

	write8(sensor, AV_CONF, &tmp);
 8000c86:	f107 030f 	add.w	r3, r7, #15
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ff3e 	bl	8000b10 <write8>

}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HTS221_Init>:
	write8(sensor, CTRL_REG2, &tmp);
}


uint8_t HTS221_Init(hts221_t* sensor, I2C_HandleTypeDef* hi2c,  uint8_t Address)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	71fb      	strb	r3, [r7, #7]
	sensor->i2c_handler = hi2c;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	601a      	str	r2, [r3, #0]
	sensor->address = (Address << 1);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	711a      	strb	r2, [r3, #4]

	// check sensor ID
	uint8_t sensor_id;
	sensor_id = read8(sensor, WHO_AM_I);
 8000cba:	210f      	movs	r1, #15
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f7ff fee3 	bl	8000a88 <read8>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	75fb      	strb	r3, [r7, #23]
	if(sensor_id != 0xBC)
 8000cc6:	7dfb      	ldrb	r3, [r7, #23]
 8000cc8:	2bbc      	cmp	r3, #188	; 0xbc
 8000cca:	d001      	beq.n	8000cd0 <HTS221_Init+0x34>
	{
		return 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e08a      	b.n	8000de6 <HTS221_Init+0x14a>
	}

	// read calibration coefficients
	// 1. Temperature
	sensor->T0_degc_x8 = read8(sensor, T0_degC_x8);
 8000cd0:	2132      	movs	r1, #50	; 0x32
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f7ff fed8 	bl	8000a88 <read8>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	715a      	strb	r2, [r3, #5]
	sensor->T1_degc_x8 = read8(sensor, T1_degC_x8);
 8000ce0:	2133      	movs	r1, #51	; 0x33
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff fed0 	bl	8000a88 <read8>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	719a      	strb	r2, [r3, #6]
	sensor->T0_out = (int16_t)read16(sensor, T0_OUT);
 8000cf0:	213c      	movs	r1, #60	; 0x3c
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f7ff fee5 	bl	8000ac2 <read16>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	811a      	strh	r2, [r3, #8]
	sensor->T1_out = (int16_t)read16(sensor, T1_OUT);
 8000d00:	213e      	movs	r1, #62	; 0x3e
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f7ff fedd 	bl	8000ac2 <read16>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	815a      	strh	r2, [r3, #10]

	sensor->T0_MSB = (read8(sensor, T0_T1_MSB) & 0x3) << 8;
 8000d10:	2135      	movs	r1, #53	; 0x35
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f7ff feb8 	bl	8000a88 <read8>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	021b      	lsls	r3, r3, #8
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	819a      	strh	r2, [r3, #12]
	sensor->T1_MSB = (read8(sensor, T0_T1_MSB) & 0x0C) << 6;
 8000d28:	2135      	movs	r1, #53	; 0x35
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f7ff feac 	bl	8000a88 <read8>
 8000d30:	4603      	mov	r3, r0
 8000d32:	019b      	lsls	r3, r3, #6
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	81da      	strh	r2, [r3, #14]

	sensor->T1_degc = ((sensor->T1_MSB) | (uint16_t)(sensor->T1_degc_x8)) >> 3;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	89db      	ldrh	r3, [r3, #14]
 8000d44:	461a      	mov	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	799b      	ldrb	r3, [r3, #6]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	10db      	asrs	r3, r3, #3
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	839a      	strh	r2, [r3, #28]
	sensor->T0_degc = ((sensor->T0_MSB) | (uint16_t)(sensor->T0_degc_x8)) >> 3;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	899b      	ldrh	r3, [r3, #12]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	795b      	ldrb	r3, [r3, #5]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	10db      	asrs	r3, r3, #3
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	835a      	strh	r2, [r3, #26]

	// 2. Humidity
	sensor->H0_rh_x2 = read8(sensor, H0_rH_x2);
 8000d68:	2130      	movs	r1, #48	; 0x30
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f7ff fe8c 	bl	8000a88 <read8>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	741a      	strb	r2, [r3, #16]
	sensor->H1_rh_x2 = read8(sensor, H1_rH_x2);
 8000d78:	2131      	movs	r1, #49	; 0x31
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f7ff fe84 	bl	8000a88 <read8>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	745a      	strb	r2, [r3, #17]
	sensor->H0_T0_out = (int16_t)read16(sensor, H0_T0_OUT);
 8000d88:	2136      	movs	r1, #54	; 0x36
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f7ff fe99 	bl	8000ac2 <read16>
 8000d90:	4603      	mov	r3, r0
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	825a      	strh	r2, [r3, #18]
	sensor->H1_T0_out = (int16_t)read16(sensor, H1_T0_OUT);
 8000d98:	213a      	movs	r1, #58	; 0x3a
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f7ff fe91 	bl	8000ac2 <read16>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	829a      	strh	r2, [r3, #20]
	sensor->H0_rh = (sensor->H0_rh_x2) >> 1;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	7c1b      	ldrb	r3, [r3, #16]
 8000dac:	085b      	lsrs	r3, r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	82da      	strh	r2, [r3, #22]
	sensor->H1_rh = (sensor->H1_rh_x2) >> 1;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	7c5b      	ldrb	r3, [r3, #17]
 8000dba:	085b      	lsrs	r3, r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	831a      	strh	r2, [r3, #24]


	// set sample mode
	HTS221_set_temp_sample(sensor, TEMP_256);
 8000dc4:	2107      	movs	r1, #7
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f7ff ff12 	bl	8000bf0 <HTS221_set_temp_sample>
	HTS221_set_humidity_sample(sensor, HUM_512);
 8000dcc:	2107      	movs	r1, #7
 8000dce:	68f8      	ldr	r0, [r7, #12]
 8000dd0:	f7ff ff38 	bl	8000c44 <HTS221_set_humidity_sample>
	// set output data rate
	HTS221_set_output_data_rate(sensor, ONESHOT);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f7ff fede 	bl	8000b98 <HTS221_set_output_data_rate>
	// Turn on the device
 	HTS221_set_power_mode(sensor, 1);
 8000ddc:	2101      	movs	r1, #1
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f7ff feb2 	bl	8000b48 <HTS221_set_power_mode>
	return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HTS221_get_data>:


void HTS221_get_data(hts221_t* sensor, int16_t* temperature_value, uint16_t* humidity_val)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b088      	sub	sp, #32
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
	int32_t tmp_t, tmp_h;
	int16_t h_out, t_out;

	// wait for end of conversion

	t_out = read16(sensor, T_OUT);
 8000dfa:	212a      	movs	r1, #42	; 0x2a
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f7ff fe60 	bl	8000ac2 <read16>
 8000e02:	4603      	mov	r3, r0
 8000e04:	83fb      	strh	r3, [r7, #30]
	h_out = read16(sensor, H_OUT);
 8000e06:	2128      	movs	r1, #40	; 0x28
 8000e08:	68f8      	ldr	r0, [r7, #12]
 8000e0a:	f7ff fe5a 	bl	8000ac2 <read16>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	83bb      	strh	r3, [r7, #28]

	// humidity calculations
	tmp_h = ((int32_t)(h_out - sensor->H0_T0_out)) * ((int32_t)(sensor->H1_rh - sensor->H0_rh));
 8000e12:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8000e1c:	1a9b      	subs	r3, r3, r2
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8000e24:	4611      	mov	r1, r2
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8000e2c:	1a8a      	subs	r2, r1, r2
 8000e2e:	fb02 f303 	mul.w	r3, r2, r3
 8000e32:	61bb      	str	r3, [r7, #24]
	*humidity_val =  (uint16_t)(tmp_h/(sensor->H1_T0_out - sensor->H0_T0_out) + sensor->H0_rh);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	801a      	strh	r2, [r3, #0]

	// temperature calculations
	tmp_t = ((int32_t)(t_out - sensor->T0_out)) * ((int32_t)(sensor->T1_degc - sensor->T0_degc));
 8000e5c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8000e66:	1a9b      	subs	r3, r3, r2
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	8b92      	ldrh	r2, [r2, #28]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	8b52      	ldrh	r2, [r2, #26]
 8000e72:	1a8a      	subs	r2, r1, r2
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	617b      	str	r3, [r7, #20]
	*temperature_value = tmp_t /(sensor->T1_out - sensor->T0_out) + sensor->T0_degc;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e80:	461a      	mov	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	8b5b      	ldrh	r3, [r3, #26]
 8000e96:	4413      	add	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	b21a      	sxth	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	801a      	strh	r2, [r3, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HTS221_DRDY_Enable>:
	HTS221_get_data(sensor, temperature_value, humidity_val);
}


void HTS221_DRDY_Enable(hts221_t* sensor, uint8_t PP_OD, uint8_t DRDY_H_L)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70fb      	strb	r3, [r7, #3]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = read8(sensor, CTRL_REG3);
 8000eb8:	2122      	movs	r1, #34	; 0x22
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fde4 	bl	8000a88 <read8>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	73fb      	strb	r3, [r7, #15]

	// clear byte
	tmp &= 0x3B;  // 0b00XXX0XX
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	f003 033b 	and.w	r3, r3, #59	; 0x3b
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	73fb      	strb	r3, [r7, #15]

	// Enable DRDY pin
	tmp |= 0x04;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	73fb      	strb	r3, [r7, #15]

	// Set output type 0 - push pull, 1 - open drain
	if(PP_OD == OPEN_DRAIN)
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d104      	bne.n	8000ee8 <HTS221_DRDY_Enable+0x40>
	{
		tmp |= 0x40;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	73fb      	strb	r3, [r7, #15]
	}

	if(DRDY_H_L == ACTIVE_LOW)
 8000ee8:	78bb      	ldrb	r3, [r7, #2]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d104      	bne.n	8000ef8 <HTS221_DRDY_Enable+0x50>
	{
		tmp |= 0x80;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	73fb      	strb	r3, [r7, #15]
	}

	write8(sensor, CTRL_REG3, &tmp);
 8000ef8:	f107 030f 	add.w	r3, r7, #15
 8000efc:	461a      	mov	r2, r3
 8000efe:	2122      	movs	r1, #34	; 0x22
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fe05 	bl	8000b10 <write8>

}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <read8>:


#include "LPS22HB.h"

static uint8_t read8(LPS22HB_t* sensor, uint8_t reg_addr)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b088      	sub	sp, #32
 8000f12:	af04      	add	r7, sp, #16
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	460b      	mov	r3, r1
 8000f18:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	HAL_I2C_Mem_Read(sensor->i2c_handler, sensor->DEVICE_ADDR, reg_addr, 1, &tmp, 1, 1000);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	791b      	ldrb	r3, [r3, #4]
 8000f22:	b299      	uxth	r1, r3
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	f107 030f 	add.w	r3, r7, #15
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	f001 fd8f 	bl	8002a5c <HAL_I2C_Mem_Read>
	return tmp;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <write8>:

static void write8(LPS22HB_t* sensor, uint8_t reg_addr, uint8_t* data)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	460b      	mov	r3, r1
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensor->i2c_handler, sensor->DEVICE_ADDR, reg_addr, 1, data, 1, 1000);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	b299      	uxth	r1, r3
 8000f60:	7afb      	ldrb	r3, [r7, #11]
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2301      	movs	r3, #1
 8000f74:	f001 fc78 	bl	8002868 <HAL_I2C_Mem_Write>
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <read24>:


static int32_t read24(LPS22HB_t* sensor, uint8_t reg_addr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af04      	add	r7, sp, #16
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[3];
	HAL_I2C_Mem_Read(sensor->i2c_handler, sensor->DEVICE_ADDR, reg_addr, 1, buff, 3, 1000);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	b299      	uxth	r1, r3
 8000f96:	78fb      	ldrb	r3, [r7, #3]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	f001 fd56 	bl	8002a5c <HAL_I2C_Mem_Read>
	return (int32_t)(buff[2] << 16) | (buff[1] << 8) | buff[0];
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	041a      	lsls	r2, r3, #16
 8000fb4:	7b7b      	ldrb	r3, [r7, #13]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	7b3a      	ldrb	r2, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <read16>:

static int16_t read16(LPS22HB_t* sensor, uint8_t reg_addr)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b088      	sub	sp, #32
 8000fca:	af04      	add	r7, sp, #16
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[2];
	HAL_I2C_Mem_Read(sensor->i2c_handler, sensor->DEVICE_ADDR, reg_addr, 1, buff, 2, 1000);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	791b      	ldrb	r3, [r3, #4]
 8000fda:	b299      	uxth	r1, r3
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	f001 fd33 	bl	8002a5c <HAL_I2C_Mem_Read>
	return (int16_t)(buff[1] << 8) | (buff[0]);
 8000ff6:	7b7b      	ldrb	r3, [r7, #13]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b21b      	sxth	r3, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <LPS22HB_Init>:




uint8_t LPS22HB_Init(LPS22HB_t* sensor, uint8_t device_address, I2C_HandleTypeDef* i2c_handler)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	460b      	mov	r3, r1
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	72fb      	strb	r3, [r7, #11]
	sensor->i2c_handler = i2c_handler;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	601a      	str	r2, [r3, #0]
	sensor->DEVICE_ADDR = device_address << 1;
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	b2da      	uxtb	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	711a      	strb	r2, [r3, #4]

	// check sensor ID
	uint8_t sensor_id;
	sensor_id = read8(sensor, LPS_WHO_AM_I);
 800102a:	210f      	movs	r1, #15
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f7ff ff6e 	bl	8000f0e <read8>
 8001032:	4603      	mov	r3, r0
 8001034:	75fb      	strb	r3, [r7, #23]
	if(sensor_id != LPS_ID)
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	2bb1      	cmp	r3, #177	; 0xb1
 800103a:	d001      	beq.n	8001040 <LPS22HB_Init+0x34>
	{
		return 1; // error
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <LPS22HB_Init+0x36>
	}


	return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <LPS22HB_GetData>:
	*pressure_data = press_raw / PRESSURE_ACCURACY;
	*temperature_data = temp_raw / TEMPERATURE_ACCURACY;
}

void LPS22HB_GetData(LPS22HB_t* sensor, int16_t* pressure_data, int16_t* temperature_data)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
	// pull data from registers
	int32_t press_raw = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
	int16_t temp_raw = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	827b      	strh	r3, [r7, #18]

	press_raw = read24(sensor, PRESS_OUT_XL);
 8001060:	2128      	movs	r1, #40	; 0x28
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f7ff ff8c 	bl	8000f80 <read24>
 8001068:	6178      	str	r0, [r7, #20]
	temp_raw = read16(sensor, TEMP_OUT_L);
 800106a:	212b      	movs	r1, #43	; 0x2b
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff ffaa 	bl	8000fc6 <read16>
 8001072:	4603      	mov	r3, r0
 8001074:	827b      	strh	r3, [r7, #18]

	// calculations
	*pressure_data = press_raw / PRESSURE_ACCURACY;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b00      	cmp	r3, #0
 800107a:	da01      	bge.n	8001080 <LPS22HB_GetData+0x34>
 800107c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001080:	131b      	asrs	r3, r3, #12
 8001082:	b21a      	sxth	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	801a      	strh	r2, [r3, #0]
	*temperature_data = temp_raw / TEMPERATURE_ACCURACY;
 8001088:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <LPS22HB_GetData+0x5c>)
 800108e:	fb82 1203 	smull	r1, r2, r2, r3
 8001092:	1152      	asrs	r2, r2, #5
 8001094:	17db      	asrs	r3, r3, #31
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	b21a      	sxth	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	801a      	strh	r2, [r3, #0]
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	51eb851f 	.word	0x51eb851f

080010ac <LPS22HB_Set_ODR>:




void LPS22HB_Set_ODR(LPS22HB_t* sensor, uint8_t ODR)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70fb      	strb	r3, [r7, #3]
	if(ODR > 5) ODR = 5;
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	2b05      	cmp	r3, #5
 80010bc:	d901      	bls.n	80010c2 <LPS22HB_Set_ODR+0x16>
 80010be:	2305      	movs	r3, #5
 80010c0:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, LPS_CTRL_REG1);
 80010c2:	2110      	movs	r1, #16
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff22 	bl	8000f0e <read8>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
	tmp &= 0x8F; // mask ODR bits
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	73fb      	strb	r3, [r7, #15]

	tmp |= (ODR << 4);
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	b25a      	sxtb	r2, r3
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	73fb      	strb	r3, [r7, #15]
	write8(sensor, LPS_CTRL_REG1, &tmp);
 80010ea:	f107 030f 	add.w	r3, r7, #15
 80010ee:	461a      	mov	r2, r3
 80010f0:	2110      	movs	r1, #16
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff28 	bl	8000f48 <write8>
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <LPS22HB_Set_DRDY_Signal>:

void LPS22HB_Set_DRDY_Signal(LPS22HB_t* sensor, uint8_t active_level, uint8_t output_type, uint8_t enable)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	4608      	mov	r0, r1
 800110a:	4611      	mov	r1, r2
 800110c:	461a      	mov	r2, r3
 800110e:	4603      	mov	r3, r0
 8001110:	70fb      	strb	r3, [r7, #3]
 8001112:	460b      	mov	r3, r1
 8001114:	70bb      	strb	r3, [r7, #2]
 8001116:	4613      	mov	r3, r2
 8001118:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	tmp = read8(sensor, LPS_CTRL_REG3);
 800111a:	2112      	movs	r1, #18
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fef6 	bl	8000f0e <read8>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]

	tmp &= 0x38; // xx111xxx clear register
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800112c:	b2db      	uxtb	r3, r3
 800112e:	73fb      	strb	r3, [r7, #15]

	if(enable != 0)
 8001130:	787b      	ldrb	r3, [r7, #1]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d004      	beq.n	8001140 <LPS22HB_Set_DRDY_Signal+0x40>
	{
		tmp |= 0x04; // set 1 on DRDY bit
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	b2db      	uxtb	r3, r3
 800113e:	73fb      	strb	r3, [r7, #15]
	}

	if(output_type == DRDY_OpenDrain)
 8001140:	78bb      	ldrb	r3, [r7, #2]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d104      	bne.n	8001150 <LPS22HB_Set_DRDY_Signal+0x50>
	{
		tmp |= (1 << 6); // set 1 on PP_OD bit
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800114c:	b2db      	uxtb	r3, r3
 800114e:	73fb      	strb	r3, [r7, #15]
	}

	if(active_level == DRDY_ActiveLow)
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d104      	bne.n	8001160 <LPS22HB_Set_DRDY_Signal+0x60>
	{
		tmp |= (1 << 7); // set 1 on INT_H_L bit
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800115c:	b2db      	uxtb	r3, r3
 800115e:	73fb      	strb	r3, [r7, #15]
	}

	write8(sensor, LPS_CTRL_REG3, &tmp);
 8001160:	f107 030f 	add.w	r3, r7, #15
 8001164:	461a      	mov	r2, r3
 8001166:	2112      	movs	r1, #18
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff feed 	bl	8000f48 <write8>
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_DMA_Init+0x38>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <MX_DMA_Init+0x38>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_DMA_Init+0x38>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	2011      	movs	r0, #17
 800119c:	f000 fe0d 	bl	8001dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80011a0:	2011      	movs	r0, #17
 80011a2:	f000 fe26 	bl	8001df2 <HAL_NVIC_EnableIRQ>

}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000

080011b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c8:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <MX_GPIO_Init+0x100>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a39      	ldr	r2, [pc, #228]	; (80012b4 <MX_GPIO_Init+0x100>)
 80011ce:	f043 0310 	orr.w	r3, r3, #16
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <MX_GPIO_Init+0x100>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <MX_GPIO_Init+0x100>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a33      	ldr	r2, [pc, #204]	; (80012b4 <MX_GPIO_Init+0x100>)
 80011e6:	f043 0320 	orr.w	r3, r3, #32
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <MX_GPIO_Init+0x100>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f003 0320 	and.w	r3, r3, #32
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <MX_GPIO_Init+0x100>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a2d      	ldr	r2, [pc, #180]	; (80012b4 <MX_GPIO_Init+0x100>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <MX_GPIO_Init+0x100>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001210:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <MX_GPIO_Init+0x100>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a27      	ldr	r2, [pc, #156]	; (80012b4 <MX_GPIO_Init+0x100>)
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <MX_GPIO_Init+0x100>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	2120      	movs	r1, #32
 800122c:	4822      	ldr	r0, [pc, #136]	; (80012b8 <MX_GPIO_Init+0x104>)
 800122e:	f001 f9a6 	bl	800257e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001232:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <MX_GPIO_Init+0x108>)
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4619      	mov	r1, r3
 8001246:	481e      	ldr	r0, [pc, #120]	; (80012c0 <MX_GPIO_Init+0x10c>)
 8001248:	f000 fffe 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800124c:	2320      	movs	r3, #32
 800124e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2302      	movs	r3, #2
 800125a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	4619      	mov	r1, r3
 8001262:	4815      	ldr	r0, [pc, #84]	; (80012b8 <MX_GPIO_Init+0x104>)
 8001264:	f000 fff0 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LPS22HB_DRDY_Pin;
 8001268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LPS22HB_DRDY_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	4619      	mov	r1, r3
 800127c:	4811      	ldr	r0, [pc, #68]	; (80012c4 <MX_GPIO_Init+0x110>)
 800127e:	f000 ffe3 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HTS221_DRDY_Pin;
 8001282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_GPIO_Init+0x114>)
 800128a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HTS221_DRDY_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	4619      	mov	r1, r3
 8001296:	4808      	ldr	r0, [pc, #32]	; (80012b8 <MX_GPIO_Init+0x104>)
 8001298:	f000 ffd6 	bl	8002248 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2028      	movs	r0, #40	; 0x28
 80012a2:	f000 fd8a 	bl	8001dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012a6:	2028      	movs	r0, #40	; 0x28
 80012a8:	f000 fda3 	bl	8001df2 <HAL_NVIC_EnableIRQ>

}
 80012ac:	bf00      	nop
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010800 	.word	0x40010800
 80012bc:	10110000 	.word	0x10110000
 80012c0:	40011000 	.word	0x40011000
 80012c4:	40010c00 	.word	0x40010c00
 80012c8:	10210000 	.word	0x10210000

080012cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_I2C1_Init+0x50>)
 80012d2:	4a13      	ldr	r2, [pc, #76]	; (8001320 <MX_I2C1_Init+0x54>)
 80012d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_I2C1_Init+0x50>)
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <MX_I2C1_Init+0x58>)
 80012da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_I2C1_Init+0x50>)
 80012ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <MX_I2C1_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_I2C1_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <MX_I2C1_Init+0x50>)
 800130a:	f001 f969 	bl	80025e0 <HAL_I2C_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001314:	f000 f992 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000204 	.word	0x20000204
 8001320:	40005400 	.word	0x40005400
 8001324:	000186a0 	.word	0x000186a0

08001328 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <HAL_I2C_MspInit+0x90>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d132      	bne.n	80013ae <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <HAL_I2C_MspInit+0x94>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a1b      	ldr	r2, [pc, #108]	; (80013bc <HAL_I2C_MspInit+0x94>)
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_I2C_MspInit+0x94>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001360:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001366:	2312      	movs	r3, #18
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	4812      	ldr	r0, [pc, #72]	; (80013c0 <HAL_I2C_MspInit+0x98>)
 8001376:	f000 ff67 	bl	8002248 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_I2C_MspInit+0x9c>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	f043 0302 	orr.w	r3, r3, #2
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <HAL_I2C_MspInit+0x9c>)
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_I2C_MspInit+0x94>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a08      	ldr	r2, [pc, #32]	; (80013bc <HAL_I2C_MspInit+0x94>)
 800139c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a0:	61d3      	str	r3, [r2, #28]
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_I2C_MspInit+0x94>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	; 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40005400 	.word	0x40005400
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010c00 	.word	0x40010c00
 80013c4:	40010000 	.word	0x40010000

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ce:	f000 fbbb 	bl	8001b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d2:	f000 f89f 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d6:	f7ff feed 	bl	80011b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80013da:	f7ff fecd 	bl	8001178 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013de:	f000 faf3 	bl	80019c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013e2:	f7ff ff73 	bl	80012cc <MX_I2C1_Init>
  MX_RTC_Init();
 80013e6:	f000 f92f 	bl	8001648 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HTS221_Init(&HTS221, &hi2c1, DEV_ADDR);
 80013ea:	225f      	movs	r2, #95	; 0x5f
 80013ec:	4939      	ldr	r1, [pc, #228]	; (80014d4 <main+0x10c>)
 80013ee:	483a      	ldr	r0, [pc, #232]	; (80014d8 <main+0x110>)
 80013f0:	f7ff fc54 	bl	8000c9c <HTS221_Init>
  LPS22HB_Init(&LPS22HB, LPS_DEV_ADDR, &hi2c1);
 80013f4:	4a37      	ldr	r2, [pc, #220]	; (80014d4 <main+0x10c>)
 80013f6:	215d      	movs	r1, #93	; 0x5d
 80013f8:	4838      	ldr	r0, [pc, #224]	; (80014dc <main+0x114>)
 80013fa:	f7ff fe07 	bl	800100c <LPS22HB_Init>

  HTS221_DRDY_Enable(&HTS221, OPEN_DRAIN, ACTIVE_LOW);
 80013fe:	2201      	movs	r2, #1
 8001400:	2101      	movs	r1, #1
 8001402:	4835      	ldr	r0, [pc, #212]	; (80014d8 <main+0x110>)
 8001404:	f7ff fd50 	bl	8000ea8 <HTS221_DRDY_Enable>
  HTS221_set_output_data_rate(&HTS221, Hz_1);
 8001408:	2101      	movs	r1, #1
 800140a:	4833      	ldr	r0, [pc, #204]	; (80014d8 <main+0x110>)
 800140c:	f7ff fbc4 	bl	8000b98 <HTS221_set_output_data_rate>
  HTS221_get_data(&HTS221, &temp, &humidity);
 8001410:	4a33      	ldr	r2, [pc, #204]	; (80014e0 <main+0x118>)
 8001412:	4934      	ldr	r1, [pc, #208]	; (80014e4 <main+0x11c>)
 8001414:	4830      	ldr	r0, [pc, #192]	; (80014d8 <main+0x110>)
 8001416:	f7ff fcea 	bl	8000dee <HTS221_get_data>

  LPS22HB_Set_ODR(&LPS22HB, rate_1Hz);
 800141a:	2101      	movs	r1, #1
 800141c:	482f      	ldr	r0, [pc, #188]	; (80014dc <main+0x114>)
 800141e:	f7ff fe45 	bl	80010ac <LPS22HB_Set_ODR>
  LPS22HB_Set_DRDY_Signal(&LPS22HB, DRDY_ActiveLow, DRDY_OpenDrain, 1);
 8001422:	2301      	movs	r3, #1
 8001424:	2201      	movs	r2, #1
 8001426:	2101      	movs	r1, #1
 8001428:	482c      	ldr	r0, [pc, #176]	; (80014dc <main+0x114>)
 800142a:	f7ff fe69 	bl	8001100 <LPS22HB_Set_DRDY_Signal>
  LPS22HB_GetData(&LPS22HB, &pressure, &tempa);
 800142e:	4a2e      	ldr	r2, [pc, #184]	; (80014e8 <main+0x120>)
 8001430:	492e      	ldr	r1, [pc, #184]	; (80014ec <main+0x124>)
 8001432:	482a      	ldr	r0, [pc, #168]	; (80014dc <main+0x114>)
 8001434:	f7ff fe0a 	bl	800104c <LPS22HB_GetData>
  HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001438:	2200      	movs	r2, #0
 800143a:	492d      	ldr	r1, [pc, #180]	; (80014f0 <main+0x128>)
 800143c:	482d      	ldr	r0, [pc, #180]	; (80014f4 <main+0x12c>)
 800143e:	f002 ff9d 	bl	800437c <HAL_RTC_GetTime>
  RTC_set_alarm(&rtc_time, 1);
 8001442:	2101      	movs	r1, #1
 8001444:	482a      	ldr	r0, [pc, #168]	; (80014f0 <main+0x128>)
 8001446:	f000 f8d3 	bl	80015f0 <RTC_set_alarm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800144a:	2200      	movs	r2, #0
 800144c:	4928      	ldr	r1, [pc, #160]	; (80014f0 <main+0x128>)
 800144e:	4829      	ldr	r0, [pc, #164]	; (80014f4 <main+0x12c>)
 8001450:	f002 ff94 	bl	800437c <HAL_RTC_GetTime>
	  if(RTC_ALARM_FLAG == 0)
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <main+0x130>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f5      	bne.n	800144a <main+0x82>
	  {
		  RTC_ALARM_FLAG = 1;
 800145e:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <main+0x130>)
 8001460:	2201      	movs	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]

		  if(DATA_READY_FLAG == 1)
 8001464:	4b25      	ldr	r3, [pc, #148]	; (80014fc <main+0x134>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b01      	cmp	r3, #1
 800146c:	d107      	bne.n	800147e <main+0xb6>
		  {
			  HTS221_get_data(&HTS221, &temp, &humidity);
 800146e:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <main+0x118>)
 8001470:	491c      	ldr	r1, [pc, #112]	; (80014e4 <main+0x11c>)
 8001472:	4819      	ldr	r0, [pc, #100]	; (80014d8 <main+0x110>)
 8001474:	f7ff fcbb 	bl	8000dee <HTS221_get_data>
			  DATA_READY_FLAG = 0;
 8001478:	4b20      	ldr	r3, [pc, #128]	; (80014fc <main+0x134>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
		  }

		  if(HAL_GPIO_ReadPin(LPS22HB_DRDY_GPIO_Port, LPS22HB_DRDY_Pin) == GPIO_PIN_RESET)
 800147e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001482:	481f      	ldr	r0, [pc, #124]	; (8001500 <main+0x138>)
 8001484:	f001 f864 	bl	8002550 <HAL_GPIO_ReadPin>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d104      	bne.n	8001498 <main+0xd0>
		  {
			  LPS22HB_GetData(&LPS22HB, &pressure, &tempa);
 800148e:	4a16      	ldr	r2, [pc, #88]	; (80014e8 <main+0x120>)
 8001490:	4916      	ldr	r1, [pc, #88]	; (80014ec <main+0x124>)
 8001492:	4812      	ldr	r0, [pc, #72]	; (80014dc <main+0x114>)
 8001494:	f7ff fdda 	bl	800104c <LPS22HB_GetData>
		  }


		  length = sprintf(&message, "Pressure:%dhPa\r\nTemperature:%dC\r\nHumidity:%d%%\r\n", pressure, temp, humidity);
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <main+0x124>)
 800149a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149e:	461a      	mov	r2, r3
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <main+0x11c>)
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	4619      	mov	r1, r3
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <main+0x118>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	460b      	mov	r3, r1
 80014b0:	4914      	ldr	r1, [pc, #80]	; (8001504 <main+0x13c>)
 80014b2:	4815      	ldr	r0, [pc, #84]	; (8001508 <main+0x140>)
 80014b4:	f004 fdfc 	bl	80060b0 <siprintf>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <main+0x144>)
 80014be:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &message, length, 1000);
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <main+0x144>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ca:	490f      	ldr	r1, [pc, #60]	; (8001508 <main+0x140>)
 80014cc:	4810      	ldr	r0, [pc, #64]	; (8001510 <main+0x148>)
 80014ce:	f003 fcd3 	bl	8004e78 <HAL_UART_Transmit>
	  HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 80014d2:	e7ba      	b.n	800144a <main+0x82>
 80014d4:	20000204 	.word	0x20000204
 80014d8:	200002bc 	.word	0x200002bc
 80014dc:	2000025c 	.word	0x2000025c
 80014e0:	200002ae 	.word	0x200002ae
 80014e4:	20000266 	.word	0x20000266
 80014e8:	20000268 	.word	0x20000268
 80014ec:	200002ac 	.word	0x200002ac
 80014f0:	200002b4 	.word	0x200002b4
 80014f4:	200002dc 	.word	0x200002dc
 80014f8:	200002b0 	.word	0x200002b0
 80014fc:	20000258 	.word	0x20000258
 8001500:	40010c00 	.word	0x40010c00
 8001504:	08008540 	.word	0x08008540
 8001508:	2000026c 	.word	0x2000026c
 800150c:	20000264 	.word	0x20000264
 8001510:	20000334 	.word	0x20000334

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b094      	sub	sp, #80	; 0x50
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800151e:	2228      	movs	r2, #40	; 0x28
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f004 f95c 	bl	80057e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001544:	2306      	movs	r3, #6
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001548:	2301      	movs	r3, #1
 800154a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800154c:	2301      	movs	r3, #1
 800154e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001550:	2310      	movs	r3, #16
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001554:	2302      	movs	r3, #2
 8001556:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001558:	2300      	movs	r3, #0
 800155a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800155c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001560:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001566:	4618      	mov	r0, r3
 8001568:	f002 f846 	bl	80035f8 <HAL_RCC_OscConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001572:	f000 f863 	bl	800163c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001576:	230f      	movs	r3, #15
 8001578:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157a:	2302      	movs	r3, #2
 800157c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001586:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2102      	movs	r1, #2
 8001592:	4618      	mov	r0, r3
 8001594:	f002 fab0 	bl	8003af8 <HAL_RCC_ClockConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800159e:	f000 f84d 	bl	800163c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80015a2:	2301      	movs	r3, #1
 80015a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80015a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015aa:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 fc3c 	bl	8003e2c <HAL_RCCEx_PeriphCLKConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015ba:	f000 f83f 	bl	800163c <Error_Handler>
  }
}
 80015be:	bf00      	nop
 80015c0:	3750      	adds	r7, #80	; 0x50
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == HTS221_DRDY_Pin)
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d8:	d102      	bne.n	80015e0 <HAL_GPIO_EXTI_Callback+0x18>
	{
		DATA_READY_FLAG = 1;
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <HAL_GPIO_EXTI_Callback+0x24>)
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
	}

}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000258 	.word	0x20000258

080015f0 <RTC_set_alarm>:
	//RTC_set_alarm(&rtc_time, 1);
}


void RTC_set_alarm(RTC_TimeTypeDef* RTC_time, uint8_t time_interval_minutes)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
	RTC_AlarmTypeDef sAlarm = {0};
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]

	sAlarm.Alarm = RTC_ALARM_A;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.Minutes = RTC_time->Minutes + time_interval_minutes;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	785a      	ldrb	r2, [r3, #1]
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	4413      	add	r3, r2
 8001612:	b2db      	uxtb	r3, r3
 8001614:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = RTC_time->Seconds;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	789b      	ldrb	r3, [r3, #2]
 800161a:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.Hours = RTC_time->Hours;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	723b      	strb	r3, [r7, #8]


	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	2200      	movs	r2, #0
 8001628:	4619      	mov	r1, r3
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <RTC_set_alarm+0x48>)
 800162c:	f003 f834 	bl	8004698 <HAL_RTC_SetAlarm_IT>
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200002dc 	.word	0x200002dc

0800163c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001640:	b672      	cpsid	i
}
 8001642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001644:	e7fe      	b.n	8001644 <Error_Handler+0x8>
	...

08001648 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2100      	movs	r1, #0
 8001652:	460a      	mov	r2, r1
 8001654:	801a      	strh	r2, [r3, #0]
 8001656:	460a      	mov	r2, r1
 8001658:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800165a:	2300      	movs	r3, #0
 800165c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <MX_RTC_Init+0x8c>)
 8001660:	4a1d      	ldr	r2, [pc, #116]	; (80016d8 <MX_RTC_Init+0x90>)
 8001662:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <MX_RTC_Init+0x8c>)
 8001666:	f04f 32ff 	mov.w	r2, #4294967295
 800166a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <MX_RTC_Init+0x8c>)
 800166e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001672:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001674:	4817      	ldr	r0, [pc, #92]	; (80016d4 <MX_RTC_Init+0x8c>)
 8001676:	f002 fd53 	bl	8004120 <HAL_RTC_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001680:	f7ff ffdc 	bl	800163c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001684:	2300      	movs	r3, #0
 8001686:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001688:	2300      	movs	r3, #0
 800168a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800168c:	2300      	movs	r3, #0
 800168e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	2201      	movs	r2, #1
 8001694:	4619      	mov	r1, r3
 8001696:	480f      	ldr	r0, [pc, #60]	; (80016d4 <MX_RTC_Init+0x8c>)
 8001698:	f002 fdd8 	bl	800424c <HAL_RTC_SetTime>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80016a2:	f7ff ffcb 	bl	800163c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80016a6:	2305      	movs	r3, #5
 80016a8:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_AUGUST;
 80016aa:	2308      	movs	r3, #8
 80016ac:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x27;
 80016ae:	2327      	movs	r3, #39	; 0x27
 80016b0:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x21;
 80016b2:	2321      	movs	r3, #33	; 0x21
 80016b4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80016b6:	463b      	mov	r3, r7
 80016b8:	2201      	movs	r2, #1
 80016ba:	4619      	mov	r1, r3
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_RTC_Init+0x8c>)
 80016be:	f002 ff35 	bl	800452c <HAL_RTC_SetDate>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80016c8:	f7ff ffb8 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200002dc 	.word	0x200002dc
 80016d8:	40002800 	.word	0x40002800

080016dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <HAL_RTC_MspInit+0x4c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d118      	bne.n	8001720 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80016ee:	f001 ff77 	bl	80035e0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_RTC_MspInit+0x50>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a0d      	ldr	r2, [pc, #52]	; (800172c <HAL_RTC_MspInit+0x50>)
 80016f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_RTC_MspInit+0x50>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_RTC_MspInit+0x54>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	2003      	movs	r0, #3
 8001716:	f000 fb50 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800171a:	2003      	movs	r0, #3
 800171c:	f000 fb69 	bl	8001df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40002800 	.word	0x40002800
 800172c:	40021000 	.word	0x40021000
 8001730:	4242043c 	.word	0x4242043c

08001734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <HAL_MspInit+0x5c>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	4a14      	ldr	r2, [pc, #80]	; (8001790 <HAL_MspInit+0x5c>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6193      	str	r3, [r2, #24]
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_MspInit+0x5c>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_MspInit+0x5c>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <HAL_MspInit+0x5c>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	61d3      	str	r3, [r2, #28]
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_MspInit+0x5c>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_MspInit+0x60>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_MspInit+0x60>)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	40021000 	.word	0x40021000
 8001794:	40010000 	.word	0x40010000

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017de:	f000 f9f9 	bl	8001bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <RTC_IRQHandler+0x10>)
 80017ee:	f003 faad 	bl	8004d4c <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200002dc 	.word	0x200002dc

080017fc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <DMA1_Channel7_IRQHandler+0x10>)
 8001802:	f000 fc1b 	bl	800203c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200002f0 	.word	0x200002f0

08001810 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <USART2_IRQHandler+0x10>)
 8001816:	f003 fbc1 	bl	8004f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000334 	.word	0x20000334

08001824 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001828:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800182c:	f000 fec0 	bl	80025b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001830:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001834:	f000 febc 	bl	80025b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
	return 1;
 8001840:	2301      	movs	r3, #1
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <_kill>:

int _kill(int pid, int sig)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001854:	f003 ff9a 	bl	800578c <__errno>
 8001858:	4603      	mov	r3, r0
 800185a:	2216      	movs	r2, #22
 800185c:	601a      	str	r2, [r3, #0]
	return -1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <_exit>:

void _exit (int status)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001872:	f04f 31ff 	mov.w	r1, #4294967295
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffe7 	bl	800184a <_kill>
	while (1) {}		/* Make sure we hang here */
 800187c:	e7fe      	b.n	800187c <_exit+0x12>

0800187e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e00a      	b.n	80018a6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001890:	f3af 8000 	nop.w
 8001894:	4601      	mov	r1, r0
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	60ba      	str	r2, [r7, #8]
 800189c:	b2ca      	uxtb	r2, r1
 800189e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3301      	adds	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	dbf0      	blt.n	8001890 <_read+0x12>
	}

return len;
 80018ae:	687b      	ldr	r3, [r7, #4]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e009      	b.n	80018de <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	60ba      	str	r2, [r7, #8]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3301      	adds	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dbf1      	blt.n	80018ca <_write+0x12>
	}
	return len;
 80018e6:	687b      	ldr	r3, [r7, #4]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_close>:

int _close(int file)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	return -1;
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr

08001906 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001916:	605a      	str	r2, [r3, #4]
	return 0;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <_isatty>:

int _isatty(int file)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	return 1;
 800192c:	2301      	movs	r3, #1
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
	return 0;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <_sbrk+0x5c>)
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <_sbrk+0x60>)
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <_sbrk+0x64>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <_sbrk+0x68>)
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d207      	bcs.n	8001990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001980:	f003 ff04 	bl	800578c <__errno>
 8001984:	4603      	mov	r3, r0
 8001986:	220c      	movs	r2, #12
 8001988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	e009      	b.n	80019a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <_sbrk+0x64>)
 80019a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20005000 	.word	0x20005000
 80019b0:	00000400 	.word	0x00000400
 80019b4:	200001f8 	.word	0x200001f8
 80019b8:	20000390 	.word	0x20000390

080019bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <MX_USART2_UART_Init+0x50>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 8001a00:	f003 f9ed 	bl	8004dde <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a0a:	f7ff fe17 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000334 	.word	0x20000334
 8001a18:	40004400 	.word	0x40004400

08001a1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a2c      	ldr	r2, [pc, #176]	; (8001ae8 <HAL_UART_MspInit+0xcc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d151      	bne.n	8001ae0 <HAL_UART_MspInit+0xc4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <HAL_UART_MspInit+0xd0>)
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	4a2a      	ldr	r2, [pc, #168]	; (8001aec <HAL_UART_MspInit+0xd0>)
 8001a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a46:	61d3      	str	r3, [r2, #28]
 8001a48:	4b28      	ldr	r3, [pc, #160]	; (8001aec <HAL_UART_MspInit+0xd0>)
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	4b25      	ldr	r3, [pc, #148]	; (8001aec <HAL_UART_MspInit+0xd0>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a24      	ldr	r2, [pc, #144]	; (8001aec <HAL_UART_MspInit+0xd0>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b22      	ldr	r3, [pc, #136]	; (8001aec <HAL_UART_MspInit+0xd0>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2302      	movs	r3, #2
 8001a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	481c      	ldr	r0, [pc, #112]	; (8001af0 <HAL_UART_MspInit+0xd4>)
 8001a80:	f000 fbe2 	bl	8002248 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <HAL_UART_MspInit+0xd8>)
 8001a86:	4a1c      	ldr	r2, [pc, #112]	; (8001af8 <HAL_UART_MspInit+0xdc>)
 8001a88:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <HAL_UART_MspInit+0xd8>)
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_UART_MspInit+0xd8>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a96:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <HAL_UART_MspInit+0xd8>)
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a9c:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_UART_MspInit+0xd8>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aa2:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <HAL_UART_MspInit+0xd8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_UART_MspInit+0xd8>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_UART_MspInit+0xd8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ab4:	480f      	ldr	r0, [pc, #60]	; (8001af4 <HAL_UART_MspInit+0xd8>)
 8001ab6:	f000 f9b7 	bl	8001e28 <HAL_DMA_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8001ac0:	f7ff fdbc 	bl	800163c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <HAL_UART_MspInit+0xd8>)
 8001ac8:	635a      	str	r2, [r3, #52]	; 0x34
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <HAL_UART_MspInit+0xd8>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	2026      	movs	r0, #38	; 0x26
 8001ad6:	f000 f970 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ada:	2026      	movs	r0, #38	; 0x26
 8001adc:	f000 f989 	bl	8001df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40004400 	.word	0x40004400
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010800 	.word	0x40010800
 8001af4:	200002f0 	.word	0x200002f0
 8001af8:	40020080 	.word	0x40020080

08001afc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001afc:	480c      	ldr	r0, [pc, #48]	; (8001b30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001afe:	490d      	ldr	r1, [pc, #52]	; (8001b34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b04:	e002      	b.n	8001b0c <LoopCopyDataInit>

08001b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0a:	3304      	adds	r3, #4

08001b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b10:	d3f9      	bcc.n	8001b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b14:	4c0a      	ldr	r4, [pc, #40]	; (8001b40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b18:	e001      	b.n	8001b1e <LoopFillZerobss>

08001b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b1c:	3204      	adds	r2, #4

08001b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b20:	d3fb      	bcc.n	8001b1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b22:	f7ff ff4b 	bl	80019bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b26:	f003 fe37 	bl	8005798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b2a:	f7ff fc4d 	bl	80013c8 <main>
  bx lr
 8001b2e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b34:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b38:	08008994 	.word	0x08008994
  ldr r2, =_sbss
 8001b3c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b40:	2000038c 	.word	0x2000038c

08001b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <ADC1_2_IRQHandler>
	...

08001b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_Init+0x28>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <HAL_Init+0x28>)
 8001b52:	f043 0310 	orr.w	r3, r3, #16
 8001b56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f000 f923 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f000 f808 	bl	8001b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b64:	f7ff fde6 	bl	8001734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40022000 	.word	0x40022000

08001b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_InitTick+0x54>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_InitTick+0x58>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f93b 	bl	8001e0e <HAL_SYSTICK_Config>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00e      	b.n	8001bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b0f      	cmp	r3, #15
 8001ba6:	d80a      	bhi.n	8001bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f000 f903 	bl	8001dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb4:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <HAL_InitTick+0x5c>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e000      	b.n	8001bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	20000004 	.word	0x20000004

08001bd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_IncTick+0x1c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_IncTick+0x20>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	4a03      	ldr	r2, [pc, #12]	; (8001bf4 <HAL_IncTick+0x20>)
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	20000008 	.word	0x20000008
 8001bf4:	20000378 	.word	0x20000378

08001bf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bfc:	4b02      	ldr	r3, [pc, #8]	; (8001c08 <HAL_GetTick+0x10>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000378 	.word	0x20000378

08001c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <__NVIC_GetPriorityGrouping+0x18>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	f003 0307 	and.w	r3, r3, #7
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	db0b      	blt.n	8001c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	4906      	ldr	r1, [pc, #24]	; (8001ca4 <__NVIC_EnableIRQ+0x34>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	2001      	movs	r0, #1
 8001c92:	fa00 f202 	lsl.w	r2, r0, r2
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	e000e100 	.word	0xe000e100

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	; (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d70:	d301      	bcc.n	8001d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00f      	b.n	8001d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <SysTick_Config+0x40>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7e:	210f      	movs	r1, #15
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f7ff ff90 	bl	8001ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <SysTick_Config+0x40>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SysTick_Config+0x40>)
 8001d90:	2207      	movs	r2, #7
 8001d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000e010 	.word	0xe000e010

08001da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff2d 	bl	8001c0c <__NVIC_SetPriorityGrouping>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dcc:	f7ff ff42 	bl	8001c54 <__NVIC_GetPriorityGrouping>
 8001dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	6978      	ldr	r0, [r7, #20]
 8001dd8:	f7ff ff90 	bl	8001cfc <NVIC_EncodePriority>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff5f 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff35 	bl	8001c70 <__NVIC_EnableIRQ>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ffa2 	bl	8001d60 <SysTick_Config>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e043      	b.n	8001ec6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <HAL_DMA_Init+0xa8>)
 8001e46:	4413      	add	r3, r2
 8001e48:	4a22      	ldr	r2, [pc, #136]	; (8001ed4 <HAL_DMA_Init+0xac>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	009a      	lsls	r2, r3, #2
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_DMA_Init+0xb0>)
 8001e5a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	bffdfff8 	.word	0xbffdfff8
 8001ed4:	cccccccd 	.word	0xcccccccd
 8001ed8:	40020000 	.word	0x40020000

08001edc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d008      	beq.n	8001f04 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e020      	b.n	8001f46 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 020e 	bic.w	r2, r2, #14
 8001f12:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f32:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d005      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2204      	movs	r2, #4
 8001f6a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	e051      	b.n	8002016 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 020e 	bic.w	r2, r2, #14
 8001f80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0201 	bic.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a22      	ldr	r2, [pc, #136]	; (8002020 <HAL_DMA_Abort_IT+0xd0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d029      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0xa0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a20      	ldr	r2, [pc, #128]	; (8002024 <HAL_DMA_Abort_IT+0xd4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d022      	beq.n	8001fec <HAL_DMA_Abort_IT+0x9c>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_DMA_Abort_IT+0xd8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d01a      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x96>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	; (800202c <HAL_DMA_Abort_IT+0xdc>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d012      	beq.n	8001fe0 <HAL_DMA_Abort_IT+0x90>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_DMA_Abort_IT+0xe0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00a      	beq.n	8001fda <HAL_DMA_Abort_IT+0x8a>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1a      	ldr	r2, [pc, #104]	; (8002034 <HAL_DMA_Abort_IT+0xe4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d102      	bne.n	8001fd4 <HAL_DMA_Abort_IT+0x84>
 8001fce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fd2:	e00e      	b.n	8001ff2 <HAL_DMA_Abort_IT+0xa2>
 8001fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fd8:	e00b      	b.n	8001ff2 <HAL_DMA_Abort_IT+0xa2>
 8001fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fde:	e008      	b.n	8001ff2 <HAL_DMA_Abort_IT+0xa2>
 8001fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe4:	e005      	b.n	8001ff2 <HAL_DMA_Abort_IT+0xa2>
 8001fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fea:	e002      	b.n	8001ff2 <HAL_DMA_Abort_IT+0xa2>
 8001fec:	2310      	movs	r3, #16
 8001fee:	e000      	b.n	8001ff2 <HAL_DMA_Abort_IT+0xa2>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	4a11      	ldr	r2, [pc, #68]	; (8002038 <HAL_DMA_Abort_IT+0xe8>)
 8001ff4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
    } 
  }
  return status;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40020008 	.word	0x40020008
 8002024:	4002001c 	.word	0x4002001c
 8002028:	40020030 	.word	0x40020030
 800202c:	40020044 	.word	0x40020044
 8002030:	40020058 	.word	0x40020058
 8002034:	4002006c 	.word	0x4002006c
 8002038:	40020000 	.word	0x40020000

0800203c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	2204      	movs	r2, #4
 800205a:	409a      	lsls	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d04f      	beq.n	8002104 <HAL_DMA_IRQHandler+0xc8>
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b00      	cmp	r3, #0
 800206c:	d04a      	beq.n	8002104 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b00      	cmp	r3, #0
 800207a:	d107      	bne.n	800208c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0204 	bic.w	r2, r2, #4
 800208a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a66      	ldr	r2, [pc, #408]	; (800222c <HAL_DMA_IRQHandler+0x1f0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d029      	beq.n	80020ea <HAL_DMA_IRQHandler+0xae>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a65      	ldr	r2, [pc, #404]	; (8002230 <HAL_DMA_IRQHandler+0x1f4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d022      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xaa>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a63      	ldr	r2, [pc, #396]	; (8002234 <HAL_DMA_IRQHandler+0x1f8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01a      	beq.n	80020e0 <HAL_DMA_IRQHandler+0xa4>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a62      	ldr	r2, [pc, #392]	; (8002238 <HAL_DMA_IRQHandler+0x1fc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d012      	beq.n	80020da <HAL_DMA_IRQHandler+0x9e>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a60      	ldr	r2, [pc, #384]	; (800223c <HAL_DMA_IRQHandler+0x200>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00a      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x98>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a5f      	ldr	r2, [pc, #380]	; (8002240 <HAL_DMA_IRQHandler+0x204>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d102      	bne.n	80020ce <HAL_DMA_IRQHandler+0x92>
 80020c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020cc:	e00e      	b.n	80020ec <HAL_DMA_IRQHandler+0xb0>
 80020ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80020d2:	e00b      	b.n	80020ec <HAL_DMA_IRQHandler+0xb0>
 80020d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020d8:	e008      	b.n	80020ec <HAL_DMA_IRQHandler+0xb0>
 80020da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020de:	e005      	b.n	80020ec <HAL_DMA_IRQHandler+0xb0>
 80020e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e4:	e002      	b.n	80020ec <HAL_DMA_IRQHandler+0xb0>
 80020e6:	2340      	movs	r3, #64	; 0x40
 80020e8:	e000      	b.n	80020ec <HAL_DMA_IRQHandler+0xb0>
 80020ea:	2304      	movs	r3, #4
 80020ec:	4a55      	ldr	r2, [pc, #340]	; (8002244 <HAL_DMA_IRQHandler+0x208>)
 80020ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8094 	beq.w	8002222 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002102:	e08e      	b.n	8002222 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	2202      	movs	r2, #2
 800210a:	409a      	lsls	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d056      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x186>
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d051      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0320 	and.w	r3, r3, #32
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10b      	bne.n	8002144 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 020a 	bic.w	r2, r2, #10
 800213a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a38      	ldr	r2, [pc, #224]	; (800222c <HAL_DMA_IRQHandler+0x1f0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d029      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x166>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a37      	ldr	r2, [pc, #220]	; (8002230 <HAL_DMA_IRQHandler+0x1f4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d022      	beq.n	800219e <HAL_DMA_IRQHandler+0x162>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a35      	ldr	r2, [pc, #212]	; (8002234 <HAL_DMA_IRQHandler+0x1f8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01a      	beq.n	8002198 <HAL_DMA_IRQHandler+0x15c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a34      	ldr	r2, [pc, #208]	; (8002238 <HAL_DMA_IRQHandler+0x1fc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d012      	beq.n	8002192 <HAL_DMA_IRQHandler+0x156>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a32      	ldr	r2, [pc, #200]	; (800223c <HAL_DMA_IRQHandler+0x200>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00a      	beq.n	800218c <HAL_DMA_IRQHandler+0x150>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a31      	ldr	r2, [pc, #196]	; (8002240 <HAL_DMA_IRQHandler+0x204>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d102      	bne.n	8002186 <HAL_DMA_IRQHandler+0x14a>
 8002180:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002184:	e00e      	b.n	80021a4 <HAL_DMA_IRQHandler+0x168>
 8002186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800218a:	e00b      	b.n	80021a4 <HAL_DMA_IRQHandler+0x168>
 800218c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002190:	e008      	b.n	80021a4 <HAL_DMA_IRQHandler+0x168>
 8002192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002196:	e005      	b.n	80021a4 <HAL_DMA_IRQHandler+0x168>
 8002198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800219c:	e002      	b.n	80021a4 <HAL_DMA_IRQHandler+0x168>
 800219e:	2320      	movs	r3, #32
 80021a0:	e000      	b.n	80021a4 <HAL_DMA_IRQHandler+0x168>
 80021a2:	2302      	movs	r3, #2
 80021a4:	4a27      	ldr	r2, [pc, #156]	; (8002244 <HAL_DMA_IRQHandler+0x208>)
 80021a6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d034      	beq.n	8002222 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021c0:	e02f      	b.n	8002222 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2208      	movs	r2, #8
 80021c8:	409a      	lsls	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d028      	beq.n	8002224 <HAL_DMA_IRQHandler+0x1e8>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d023      	beq.n	8002224 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 020e 	bic.w	r2, r2, #14
 80021ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f4:	2101      	movs	r1, #1
 80021f6:	fa01 f202 	lsl.w	r2, r1, r2
 80021fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	2b00      	cmp	r3, #0
 8002218:	d004      	beq.n	8002224 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	4798      	blx	r3
    }
  }
  return;
 8002222:	bf00      	nop
 8002224:	bf00      	nop
}
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40020008 	.word	0x40020008
 8002230:	4002001c 	.word	0x4002001c
 8002234:	40020030 	.word	0x40020030
 8002238:	40020044 	.word	0x40020044
 800223c:	40020058 	.word	0x40020058
 8002240:	4002006c 	.word	0x4002006c
 8002244:	40020000 	.word	0x40020000

08002248 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002248:	b480      	push	{r7}
 800224a:	b08b      	sub	sp, #44	; 0x2c
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225a:	e169      	b.n	8002530 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800225c:	2201      	movs	r2, #1
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	429a      	cmp	r2, r3
 8002276:	f040 8158 	bne.w	800252a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4a9a      	ldr	r2, [pc, #616]	; (80024e8 <HAL_GPIO_Init+0x2a0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d05e      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
 8002284:	4a98      	ldr	r2, [pc, #608]	; (80024e8 <HAL_GPIO_Init+0x2a0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d875      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 800228a:	4a98      	ldr	r2, [pc, #608]	; (80024ec <HAL_GPIO_Init+0x2a4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d058      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
 8002290:	4a96      	ldr	r2, [pc, #600]	; (80024ec <HAL_GPIO_Init+0x2a4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d86f      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 8002296:	4a96      	ldr	r2, [pc, #600]	; (80024f0 <HAL_GPIO_Init+0x2a8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d052      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
 800229c:	4a94      	ldr	r2, [pc, #592]	; (80024f0 <HAL_GPIO_Init+0x2a8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d869      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 80022a2:	4a94      	ldr	r2, [pc, #592]	; (80024f4 <HAL_GPIO_Init+0x2ac>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d04c      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
 80022a8:	4a92      	ldr	r2, [pc, #584]	; (80024f4 <HAL_GPIO_Init+0x2ac>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d863      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 80022ae:	4a92      	ldr	r2, [pc, #584]	; (80024f8 <HAL_GPIO_Init+0x2b0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d046      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
 80022b4:	4a90      	ldr	r2, [pc, #576]	; (80024f8 <HAL_GPIO_Init+0x2b0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d85d      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 80022ba:	2b12      	cmp	r3, #18
 80022bc:	d82a      	bhi.n	8002314 <HAL_GPIO_Init+0xcc>
 80022be:	2b12      	cmp	r3, #18
 80022c0:	d859      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 80022c2:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <HAL_GPIO_Init+0x80>)
 80022c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c8:	08002343 	.word	0x08002343
 80022cc:	0800231d 	.word	0x0800231d
 80022d0:	0800232f 	.word	0x0800232f
 80022d4:	08002371 	.word	0x08002371
 80022d8:	08002377 	.word	0x08002377
 80022dc:	08002377 	.word	0x08002377
 80022e0:	08002377 	.word	0x08002377
 80022e4:	08002377 	.word	0x08002377
 80022e8:	08002377 	.word	0x08002377
 80022ec:	08002377 	.word	0x08002377
 80022f0:	08002377 	.word	0x08002377
 80022f4:	08002377 	.word	0x08002377
 80022f8:	08002377 	.word	0x08002377
 80022fc:	08002377 	.word	0x08002377
 8002300:	08002377 	.word	0x08002377
 8002304:	08002377 	.word	0x08002377
 8002308:	08002377 	.word	0x08002377
 800230c:	08002325 	.word	0x08002325
 8002310:	08002339 	.word	0x08002339
 8002314:	4a79      	ldr	r2, [pc, #484]	; (80024fc <HAL_GPIO_Init+0x2b4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800231a:	e02c      	b.n	8002376 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	623b      	str	r3, [r7, #32]
          break;
 8002322:	e029      	b.n	8002378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	3304      	adds	r3, #4
 800232a:	623b      	str	r3, [r7, #32]
          break;
 800232c:	e024      	b.n	8002378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	3308      	adds	r3, #8
 8002334:	623b      	str	r3, [r7, #32]
          break;
 8002336:	e01f      	b.n	8002378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	330c      	adds	r3, #12
 800233e:	623b      	str	r3, [r7, #32]
          break;
 8002340:	e01a      	b.n	8002378 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d102      	bne.n	8002350 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800234a:	2304      	movs	r3, #4
 800234c:	623b      	str	r3, [r7, #32]
          break;
 800234e:	e013      	b.n	8002378 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d105      	bne.n	8002364 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002358:	2308      	movs	r3, #8
 800235a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	611a      	str	r2, [r3, #16]
          break;
 8002362:	e009      	b.n	8002378 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002364:	2308      	movs	r3, #8
 8002366:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	615a      	str	r2, [r3, #20]
          break;
 800236e:	e003      	b.n	8002378 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002370:	2300      	movs	r3, #0
 8002372:	623b      	str	r3, [r7, #32]
          break;
 8002374:	e000      	b.n	8002378 <HAL_GPIO_Init+0x130>
          break;
 8002376:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	2bff      	cmp	r3, #255	; 0xff
 800237c:	d801      	bhi.n	8002382 <HAL_GPIO_Init+0x13a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	e001      	b.n	8002386 <HAL_GPIO_Init+0x13e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3304      	adds	r3, #4
 8002386:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2bff      	cmp	r3, #255	; 0xff
 800238c:	d802      	bhi.n	8002394 <HAL_GPIO_Init+0x14c>
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	e002      	b.n	800239a <HAL_GPIO_Init+0x152>
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	3b08      	subs	r3, #8
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	210f      	movs	r1, #15
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	401a      	ands	r2, r3
 80023ac:	6a39      	ldr	r1, [r7, #32]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	431a      	orrs	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80b1 	beq.w	800252a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023c8:	4b4d      	ldr	r3, [pc, #308]	; (8002500 <HAL_GPIO_Init+0x2b8>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4a4c      	ldr	r2, [pc, #304]	; (8002500 <HAL_GPIO_Init+0x2b8>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6193      	str	r3, [r2, #24]
 80023d4:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <HAL_GPIO_Init+0x2b8>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023e0:	4a48      	ldr	r2, [pc, #288]	; (8002504 <HAL_GPIO_Init+0x2bc>)
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	3302      	adds	r3, #2
 80023e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	220f      	movs	r2, #15
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a40      	ldr	r2, [pc, #256]	; (8002508 <HAL_GPIO_Init+0x2c0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d013      	beq.n	8002434 <HAL_GPIO_Init+0x1ec>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a3f      	ldr	r2, [pc, #252]	; (800250c <HAL_GPIO_Init+0x2c4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00d      	beq.n	8002430 <HAL_GPIO_Init+0x1e8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a3e      	ldr	r2, [pc, #248]	; (8002510 <HAL_GPIO_Init+0x2c8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d007      	beq.n	800242c <HAL_GPIO_Init+0x1e4>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a3d      	ldr	r2, [pc, #244]	; (8002514 <HAL_GPIO_Init+0x2cc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_GPIO_Init+0x1e0>
 8002424:	2303      	movs	r3, #3
 8002426:	e006      	b.n	8002436 <HAL_GPIO_Init+0x1ee>
 8002428:	2304      	movs	r3, #4
 800242a:	e004      	b.n	8002436 <HAL_GPIO_Init+0x1ee>
 800242c:	2302      	movs	r3, #2
 800242e:	e002      	b.n	8002436 <HAL_GPIO_Init+0x1ee>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_GPIO_Init+0x1ee>
 8002434:	2300      	movs	r3, #0
 8002436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002438:	f002 0203 	and.w	r2, r2, #3
 800243c:	0092      	lsls	r2, r2, #2
 800243e:	4093      	lsls	r3, r2
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002446:	492f      	ldr	r1, [pc, #188]	; (8002504 <HAL_GPIO_Init+0x2bc>)
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002460:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	492c      	ldr	r1, [pc, #176]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	600b      	str	r3, [r1, #0]
 800246c:	e006      	b.n	800247c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800246e:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	43db      	mvns	r3, r3
 8002476:	4928      	ldr	r1, [pc, #160]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 8002478:	4013      	ands	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002488:	4b23      	ldr	r3, [pc, #140]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	4922      	ldr	r1, [pc, #136]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	43db      	mvns	r3, r3
 800249e:	491e      	ldr	r1, [pc, #120]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024b0:	4b19      	ldr	r3, [pc, #100]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	4918      	ldr	r1, [pc, #96]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	608b      	str	r3, [r1, #8]
 80024bc:	e006      	b.n	80024cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024be:	4b16      	ldr	r3, [pc, #88]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	4914      	ldr	r1, [pc, #80]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d021      	beq.n	800251c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	490e      	ldr	r1, [pc, #56]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	60cb      	str	r3, [r1, #12]
 80024e4:	e021      	b.n	800252a <HAL_GPIO_Init+0x2e2>
 80024e6:	bf00      	nop
 80024e8:	10320000 	.word	0x10320000
 80024ec:	10310000 	.word	0x10310000
 80024f0:	10220000 	.word	0x10220000
 80024f4:	10210000 	.word	0x10210000
 80024f8:	10120000 	.word	0x10120000
 80024fc:	10110000 	.word	0x10110000
 8002500:	40021000 	.word	0x40021000
 8002504:	40010000 	.word	0x40010000
 8002508:	40010800 	.word	0x40010800
 800250c:	40010c00 	.word	0x40010c00
 8002510:	40011000 	.word	0x40011000
 8002514:	40011400 	.word	0x40011400
 8002518:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_GPIO_Init+0x304>)
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	43db      	mvns	r3, r3
 8002524:	4909      	ldr	r1, [pc, #36]	; (800254c <HAL_GPIO_Init+0x304>)
 8002526:	4013      	ands	r3, r2
 8002528:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	3301      	adds	r3, #1
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	fa22 f303 	lsr.w	r3, r2, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	f47f ae8e 	bne.w	800225c <HAL_GPIO_Init+0x14>
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	372c      	adds	r7, #44	; 0x2c
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	40010400 	.word	0x40010400

08002550 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	887b      	ldrh	r3, [r7, #2]
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	e001      	b.n	8002572 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002572:	7bfb      	ldrb	r3, [r7, #15]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	460b      	mov	r3, r1
 8002588:	807b      	strh	r3, [r7, #2]
 800258a:	4613      	mov	r3, r2
 800258c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800258e:	787b      	ldrb	r3, [r7, #1]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002594:	887a      	ldrh	r2, [r7, #2]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800259a:	e003      	b.n	80025a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	041a      	lsls	r2, r3, #16
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	611a      	str	r2, [r3, #16]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d006      	beq.n	80025d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fffa 	bl	80015c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40010400 	.word	0x40010400

080025e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e12b      	b.n	800284a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe fe8e 	bl	8001328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	; 0x24
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002632:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002642:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002644:	f001 fbac 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 8002648:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	4a81      	ldr	r2, [pc, #516]	; (8002854 <HAL_I2C_Init+0x274>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d807      	bhi.n	8002664 <HAL_I2C_Init+0x84>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4a80      	ldr	r2, [pc, #512]	; (8002858 <HAL_I2C_Init+0x278>)
 8002658:	4293      	cmp	r3, r2
 800265a:	bf94      	ite	ls
 800265c:	2301      	movls	r3, #1
 800265e:	2300      	movhi	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	e006      	b.n	8002672 <HAL_I2C_Init+0x92>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4a7d      	ldr	r2, [pc, #500]	; (800285c <HAL_I2C_Init+0x27c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	bf94      	ite	ls
 800266c:	2301      	movls	r3, #1
 800266e:	2300      	movhi	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e0e7      	b.n	800284a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4a78      	ldr	r2, [pc, #480]	; (8002860 <HAL_I2C_Init+0x280>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0c9b      	lsrs	r3, r3, #18
 8002684:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a6a      	ldr	r2, [pc, #424]	; (8002854 <HAL_I2C_Init+0x274>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d802      	bhi.n	80026b4 <HAL_I2C_Init+0xd4>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3301      	adds	r3, #1
 80026b2:	e009      	b.n	80026c8 <HAL_I2C_Init+0xe8>
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	4a69      	ldr	r2, [pc, #420]	; (8002864 <HAL_I2C_Init+0x284>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	3301      	adds	r3, #1
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	495c      	ldr	r1, [pc, #368]	; (8002854 <HAL_I2C_Init+0x274>)
 80026e4:	428b      	cmp	r3, r1
 80026e6:	d819      	bhi.n	800271c <HAL_I2C_Init+0x13c>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1e59      	subs	r1, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f6:	1c59      	adds	r1, r3, #1
 80026f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026fc:	400b      	ands	r3, r1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_I2C_Init+0x138>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1e59      	subs	r1, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002710:	3301      	adds	r3, #1
 8002712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002716:	e051      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 8002718:	2304      	movs	r3, #4
 800271a:	e04f      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d111      	bne.n	8002748 <HAL_I2C_Init+0x168>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e58      	subs	r0, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	440b      	add	r3, r1
 8002732:	fbb0 f3f3 	udiv	r3, r0, r3
 8002736:	3301      	adds	r3, #1
 8002738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf0c      	ite	eq
 8002740:	2301      	moveq	r3, #1
 8002742:	2300      	movne	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	e012      	b.n	800276e <HAL_I2C_Init+0x18e>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1e58      	subs	r0, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	0099      	lsls	r1, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	fbb0 f3f3 	udiv	r3, r0, r3
 800275e:	3301      	adds	r3, #1
 8002760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Init+0x196>
 8002772:	2301      	movs	r3, #1
 8002774:	e022      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10e      	bne.n	800279c <HAL_I2C_Init+0x1bc>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1e58      	subs	r0, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6859      	ldr	r1, [r3, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	440b      	add	r3, r1
 800278c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002790:	3301      	adds	r3, #1
 8002792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800279a:	e00f      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1e58      	subs	r0, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	0099      	lsls	r1, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b2:	3301      	adds	r3, #1
 80027b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	6809      	ldr	r1, [r1, #0]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6911      	ldr	r1, [r2, #16]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68d2      	ldr	r2, [r2, #12]
 80027f6:	4311      	orrs	r1, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	430b      	orrs	r3, r1
 80027fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	000186a0 	.word	0x000186a0
 8002858:	001e847f 	.word	0x001e847f
 800285c:	003d08ff 	.word	0x003d08ff
 8002860:	431bde83 	.word	0x431bde83
 8002864:	10624dd3 	.word	0x10624dd3

08002868 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	4608      	mov	r0, r1
 8002872:	4611      	mov	r1, r2
 8002874:	461a      	mov	r2, r3
 8002876:	4603      	mov	r3, r0
 8002878:	817b      	strh	r3, [r7, #10]
 800287a:	460b      	mov	r3, r1
 800287c:	813b      	strh	r3, [r7, #8]
 800287e:	4613      	mov	r3, r2
 8002880:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002882:	f7ff f9b9 	bl	8001bf8 <HAL_GetTick>
 8002886:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b20      	cmp	r3, #32
 8002892:	f040 80d9 	bne.w	8002a48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	2319      	movs	r3, #25
 800289c:	2201      	movs	r2, #1
 800289e:	496d      	ldr	r1, [pc, #436]	; (8002a54 <HAL_I2C_Mem_Write+0x1ec>)
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fcc1 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
 80028ae:	e0cc      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_I2C_Mem_Write+0x56>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e0c5      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d007      	beq.n	80028e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2221      	movs	r2, #33	; 0x21
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2240      	movs	r2, #64	; 0x40
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a3a      	ldr	r2, [r7, #32]
 800290e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002914:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a4d      	ldr	r2, [pc, #308]	; (8002a58 <HAL_I2C_Mem_Write+0x1f0>)
 8002924:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002926:	88f8      	ldrh	r0, [r7, #6]
 8002928:	893a      	ldrh	r2, [r7, #8]
 800292a:	8979      	ldrh	r1, [r7, #10]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	4603      	mov	r3, r0
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 faf8 	bl	8002f2c <I2C_RequestMemoryWrite>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d052      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e081      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 fd42 	bl	80033d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00d      	beq.n	8002972 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b04      	cmp	r3, #4
 800295c:	d107      	bne.n	800296e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800296c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e06b      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	781a      	ldrb	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d11b      	bne.n	80029e8 <HAL_I2C_Mem_Write+0x180>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d017      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	781a      	ldrb	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1aa      	bne.n	8002946 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fd2e 	bl	8003456 <I2C_WaitOnBTFFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00d      	beq.n	8002a1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d107      	bne.n	8002a18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e016      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e000      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
  }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	00100002 	.word	0x00100002
 8002a58:	ffff0000 	.word	0xffff0000

08002a5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08c      	sub	sp, #48	; 0x30
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	4608      	mov	r0, r1
 8002a66:	4611      	mov	r1, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	817b      	strh	r3, [r7, #10]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	813b      	strh	r3, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a7a:	f7ff f8bd 	bl	8001bf8 <HAL_GetTick>
 8002a7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	f040 8244 	bne.w	8002f16 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2319      	movs	r3, #25
 8002a94:	2201      	movs	r2, #1
 8002a96:	4982      	ldr	r1, [pc, #520]	; (8002ca0 <HAL_I2C_Mem_Read+0x244>)
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fbc5 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e237      	b.n	8002f18 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_I2C_Mem_Read+0x5a>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e230      	b.n	8002f18 <HAL_I2C_Mem_Read+0x4bc>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d007      	beq.n	8002adc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2222      	movs	r2, #34	; 0x22
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2240      	movs	r2, #64	; 0x40
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a62      	ldr	r2, [pc, #392]	; (8002ca4 <HAL_I2C_Mem_Read+0x248>)
 8002b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b1e:	88f8      	ldrh	r0, [r7, #6]
 8002b20:	893a      	ldrh	r2, [r7, #8]
 8002b22:	8979      	ldrh	r1, [r7, #10]
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fa92 	bl	8003058 <I2C_RequestMemoryRead>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e1ec      	b.n	8002f18 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d113      	bne.n	8002b6e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	e1c0      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d11e      	bne.n	8002bb4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b86:	b672      	cpsid	i
}
 8002b88:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bb0:	b662      	cpsie	i
}
 8002bb2:	e035      	b.n	8002c20 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d11e      	bne.n	8002bfa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bcc:	b672      	cpsid	i
}
 8002bce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bf6:	b662      	cpsie	i
}
 8002bf8:	e012      	b.n	8002c20 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c08:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c20:	e166      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	f200 811f 	bhi.w	8002e6a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d123      	bne.n	8002c7c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 fc4d 	bl	80034d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e167      	b.n	8002f18 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c7a:	e139      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d152      	bne.n	8002d2a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	4906      	ldr	r1, [pc, #24]	; (8002ca8 <HAL_I2C_Mem_Read+0x24c>)
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 faca 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e13c      	b.n	8002f18 <HAL_I2C_Mem_Read+0x4bc>
 8002c9e:	bf00      	nop
 8002ca0:	00100002 	.word	0x00100002
 8002ca4:	ffff0000 	.word	0xffff0000
 8002ca8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002cac:	b672      	cpsid	i
}
 8002cae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002cf2:	b662      	cpsie	i
}
 8002cf4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d28:	e0e2      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	2200      	movs	r2, #0
 8002d32:	497b      	ldr	r1, [pc, #492]	; (8002f20 <HAL_I2C_Mem_Read+0x4c4>)
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fa77 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0e9      	b.n	8002f18 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d54:	b672      	cpsid	i
}
 8002d56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d8a:	4b66      	ldr	r3, [pc, #408]	; (8002f24 <HAL_I2C_Mem_Read+0x4c8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	08db      	lsrs	r3, r3, #3
 8002d90:	4a65      	ldr	r2, [pc, #404]	; (8002f28 <HAL_I2C_Mem_Read+0x4cc>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	0a1a      	lsrs	r2, r3, #8
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00da      	lsls	r2, r3, #3
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d118      	bne.n	8002de2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f043 0220 	orr.w	r2, r3, #32
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002dd2:	b662      	cpsie	i
}
 8002dd4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e09a      	b.n	8002f18 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d1d9      	bne.n	8002da4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e32:	b662      	cpsie	i
}
 8002e34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e68:	e042      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 fb32 	bl	80034d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e04c      	b.n	8002f18 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d118      	bne.n	8002ef0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f47f ae94 	bne.w	8002c22 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e000      	b.n	8002f18 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002f16:	2302      	movs	r3, #2
  }
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3728      	adds	r7, #40	; 0x28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	00010004 	.word	0x00010004
 8002f24:	20000000 	.word	0x20000000
 8002f28:	14f8b589 	.word	0x14f8b589

08002f2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	4608      	mov	r0, r1
 8002f36:	4611      	mov	r1, r2
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	817b      	strh	r3, [r7, #10]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	813b      	strh	r3, [r7, #8]
 8002f42:	4613      	mov	r3, r2
 8002f44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f960 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00d      	beq.n	8002f8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7c:	d103      	bne.n	8002f86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e05f      	b.n	800304a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f8a:	897b      	ldrh	r3, [r7, #10]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	6a3a      	ldr	r2, [r7, #32]
 8002f9e:	492d      	ldr	r1, [pc, #180]	; (8003054 <I2C_RequestMemoryWrite+0x128>)
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f998 	bl	80032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e04c      	b.n	800304a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc8:	6a39      	ldr	r1, [r7, #32]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fa02 	bl	80033d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d107      	bne.n	8002fee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e02b      	b.n	800304a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ff8:	893b      	ldrh	r3, [r7, #8]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	611a      	str	r2, [r3, #16]
 8003002:	e021      	b.n	8003048 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003004:	893b      	ldrh	r3, [r7, #8]
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	b29b      	uxth	r3, r3
 800300a:	b2da      	uxtb	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	6a39      	ldr	r1, [r7, #32]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f9dc 	bl	80033d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00d      	beq.n	800303e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	2b04      	cmp	r3, #4
 8003028:	d107      	bne.n	800303a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003038:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e005      	b.n	800304a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800303e:	893b      	ldrh	r3, [r7, #8]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	00010002 	.word	0x00010002

08003058 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	4608      	mov	r0, r1
 8003062:	4611      	mov	r1, r2
 8003064:	461a      	mov	r2, r3
 8003066:	4603      	mov	r3, r0
 8003068:	817b      	strh	r3, [r7, #10]
 800306a:	460b      	mov	r3, r1
 800306c:	813b      	strh	r3, [r7, #8]
 800306e:	4613      	mov	r3, r2
 8003070:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003080:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003090:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	2200      	movs	r2, #0
 800309a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f8c2 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b8:	d103      	bne.n	80030c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e0aa      	b.n	800321c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030c6:	897b      	ldrh	r3, [r7, #10]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	6a3a      	ldr	r2, [r7, #32]
 80030da:	4952      	ldr	r1, [pc, #328]	; (8003224 <I2C_RequestMemoryRead+0x1cc>)
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f8fa 	bl	80032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e097      	b.n	800321c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003104:	6a39      	ldr	r1, [r7, #32]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f964 	bl	80033d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00d      	beq.n	800312e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2b04      	cmp	r3, #4
 8003118:	d107      	bne.n	800312a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003128:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e076      	b.n	800321c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d105      	bne.n	8003140 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003134:	893b      	ldrh	r3, [r7, #8]
 8003136:	b2da      	uxtb	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	611a      	str	r2, [r3, #16]
 800313e:	e021      	b.n	8003184 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003140:	893b      	ldrh	r3, [r7, #8]
 8003142:	0a1b      	lsrs	r3, r3, #8
 8003144:	b29b      	uxth	r3, r3
 8003146:	b2da      	uxtb	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003150:	6a39      	ldr	r1, [r7, #32]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f93e 	bl	80033d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00d      	beq.n	800317a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b04      	cmp	r3, #4
 8003164:	d107      	bne.n	8003176 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003174:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e050      	b.n	800321c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800317a:	893b      	ldrh	r3, [r7, #8]
 800317c:	b2da      	uxtb	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003186:	6a39      	ldr	r1, [r7, #32]
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f923 	bl	80033d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00d      	beq.n	80031b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	2b04      	cmp	r3, #4
 800319a:	d107      	bne.n	80031ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e035      	b.n	800321c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f82b 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00d      	beq.n	80031f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e6:	d103      	bne.n	80031f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e013      	b.n	800321c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031f4:	897b      	ldrh	r3, [r7, #10]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	6a3a      	ldr	r2, [r7, #32]
 8003208:	4906      	ldr	r1, [pc, #24]	; (8003224 <I2C_RequestMemoryRead+0x1cc>)
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f863 	bl	80032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	00010002 	.word	0x00010002

08003228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	4613      	mov	r3, r2
 8003236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003238:	e025      	b.n	8003286 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003240:	d021      	beq.n	8003286 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003242:	f7fe fcd9 	bl	8001bf8 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d302      	bcc.n	8003258 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d116      	bne.n	8003286 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f043 0220 	orr.w	r2, r3, #32
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e023      	b.n	80032ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	0c1b      	lsrs	r3, r3, #16
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d10d      	bne.n	80032ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4013      	ands	r3, r2
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	e00c      	b.n	80032c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	43da      	mvns	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4013      	ands	r3, r2
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	bf0c      	ite	eq
 80032be:	2301      	moveq	r3, #1
 80032c0:	2300      	movne	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d0b6      	beq.n	800323a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032e4:	e051      	b.n	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f4:	d123      	bne.n	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003304:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800330e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f043 0204 	orr.w	r2, r3, #4
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e046      	b.n	80033cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d021      	beq.n	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003346:	f7fe fc57 	bl	8001bf8 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d116      	bne.n	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f043 0220 	orr.w	r2, r3, #32
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e020      	b.n	80033cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	0c1b      	lsrs	r3, r3, #16
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d10c      	bne.n	80033ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	43da      	mvns	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4013      	ands	r3, r2
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bf14      	ite	ne
 80033a6:	2301      	movne	r3, #1
 80033a8:	2300      	moveq	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	e00b      	b.n	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	43da      	mvns	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4013      	ands	r3, r2
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf14      	ite	ne
 80033c0:	2301      	movne	r3, #1
 80033c2:	2300      	moveq	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d18d      	bne.n	80032e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033e0:	e02d      	b.n	800343e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f8ce 	bl	8003584 <I2C_IsAcknowledgeFailed>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e02d      	b.n	800344e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d021      	beq.n	800343e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fa:	f7fe fbfd 	bl	8001bf8 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	429a      	cmp	r2, r3
 8003408:	d302      	bcc.n	8003410 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d116      	bne.n	800343e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f043 0220 	orr.w	r2, r3, #32
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e007      	b.n	800344e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003448:	2b80      	cmp	r3, #128	; 0x80
 800344a:	d1ca      	bne.n	80033e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003462:	e02d      	b.n	80034c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f88d 	bl	8003584 <I2C_IsAcknowledgeFailed>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e02d      	b.n	80034d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d021      	beq.n	80034c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347c:	f7fe fbbc 	bl	8001bf8 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	429a      	cmp	r2, r3
 800348a:	d302      	bcc.n	8003492 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d116      	bne.n	80034c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	f043 0220 	orr.w	r2, r3, #32
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e007      	b.n	80034d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d1ca      	bne.n	8003464 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034e4:	e042      	b.n	800356c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b10      	cmp	r3, #16
 80034f2:	d119      	bne.n	8003528 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0210 	mvn.w	r2, #16
 80034fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e029      	b.n	800357c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003528:	f7fe fb66 	bl	8001bf8 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	429a      	cmp	r2, r3
 8003536:	d302      	bcc.n	800353e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d116      	bne.n	800356c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f043 0220 	orr.w	r2, r3, #32
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e007      	b.n	800357c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	d1b5      	bne.n	80034e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359a:	d11b      	bne.n	80035d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f043 0204 	orr.w	r2, r3, #4
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80035e4:	4b03      	ldr	r3, [pc, #12]	; (80035f4 <HAL_PWR_EnableBkUpAccess+0x14>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
}
 80035ea:	bf00      	nop
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	420e0020 	.word	0x420e0020

080035f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e26c      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 8087 	beq.w	8003726 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003618:	4b92      	ldr	r3, [pc, #584]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 030c 	and.w	r3, r3, #12
 8003620:	2b04      	cmp	r3, #4
 8003622:	d00c      	beq.n	800363e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003624:	4b8f      	ldr	r3, [pc, #572]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b08      	cmp	r3, #8
 800362e:	d112      	bne.n	8003656 <HAL_RCC_OscConfig+0x5e>
 8003630:	4b8c      	ldr	r3, [pc, #560]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363c:	d10b      	bne.n	8003656 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363e:	4b89      	ldr	r3, [pc, #548]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d06c      	beq.n	8003724 <HAL_RCC_OscConfig+0x12c>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d168      	bne.n	8003724 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e246      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365e:	d106      	bne.n	800366e <HAL_RCC_OscConfig+0x76>
 8003660:	4b80      	ldr	r3, [pc, #512]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a7f      	ldr	r2, [pc, #508]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 8003666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	e02e      	b.n	80036cc <HAL_RCC_OscConfig+0xd4>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x98>
 8003676:	4b7b      	ldr	r3, [pc, #492]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a7a      	ldr	r2, [pc, #488]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 800367c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b78      	ldr	r3, [pc, #480]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a77      	ldr	r2, [pc, #476]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 8003688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e01d      	b.n	80036cc <HAL_RCC_OscConfig+0xd4>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0xbc>
 800369a:	4b72      	ldr	r3, [pc, #456]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a71      	ldr	r2, [pc, #452]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 80036a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	4b6f      	ldr	r3, [pc, #444]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a6e      	ldr	r2, [pc, #440]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0xd4>
 80036b4:	4b6b      	ldr	r3, [pc, #428]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a6a      	ldr	r2, [pc, #424]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 80036ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b68      	ldr	r3, [pc, #416]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a67      	ldr	r2, [pc, #412]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 80036c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7fe fa90 	bl	8001bf8 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036dc:	f7fe fa8c 	bl	8001bf8 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	; 0x64
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e1fa      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	4b5d      	ldr	r3, [pc, #372]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0xe4>
 80036fa:	e014      	b.n	8003726 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fe fa7c 	bl	8001bf8 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003704:	f7fe fa78 	bl	8001bf8 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	; 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e1e6      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003716:	4b53      	ldr	r3, [pc, #332]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x10c>
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d063      	beq.n	80037fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003732:	4b4c      	ldr	r3, [pc, #304]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800373e:	4b49      	ldr	r3, [pc, #292]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b08      	cmp	r3, #8
 8003748:	d11c      	bne.n	8003784 <HAL_RCC_OscConfig+0x18c>
 800374a:	4b46      	ldr	r3, [pc, #280]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d116      	bne.n	8003784 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003756:	4b43      	ldr	r3, [pc, #268]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <HAL_RCC_OscConfig+0x176>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d001      	beq.n	800376e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e1ba      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376e:	4b3d      	ldr	r3, [pc, #244]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4939      	ldr	r1, [pc, #228]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003782:	e03a      	b.n	80037fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d020      	beq.n	80037ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800378c:	4b36      	ldr	r3, [pc, #216]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003792:	f7fe fa31 	bl	8001bf8 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800379a:	f7fe fa2d 	bl	8001bf8 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e19b      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ac:	4b2d      	ldr	r3, [pc, #180]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b8:	4b2a      	ldr	r3, [pc, #168]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4927      	ldr	r1, [pc, #156]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]
 80037cc:	e015      	b.n	80037fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ce:	4b26      	ldr	r3, [pc, #152]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fe fa10 	bl	8001bf8 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037dc:	f7fe fa0c 	bl	8001bf8 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e17a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ee:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d03a      	beq.n	800387c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d019      	beq.n	8003842 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800380e:	4b17      	ldr	r3, [pc, #92]	; (800386c <HAL_RCC_OscConfig+0x274>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003814:	f7fe f9f0 	bl	8001bf8 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800381c:	f7fe f9ec 	bl	8001bf8 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e15a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382e:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <HAL_RCC_OscConfig+0x26c>)
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800383a:	2001      	movs	r0, #1
 800383c:	f000 fad8 	bl	8003df0 <RCC_Delay>
 8003840:	e01c      	b.n	800387c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003842:	4b0a      	ldr	r3, [pc, #40]	; (800386c <HAL_RCC_OscConfig+0x274>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003848:	f7fe f9d6 	bl	8001bf8 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800384e:	e00f      	b.n	8003870 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003850:	f7fe f9d2 	bl	8001bf8 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d908      	bls.n	8003870 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e140      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	42420000 	.word	0x42420000
 800386c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003870:	4b9e      	ldr	r3, [pc, #632]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e9      	bne.n	8003850 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80a6 	beq.w	80039d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388e:	4b97      	ldr	r3, [pc, #604]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10d      	bne.n	80038b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800389a:	4b94      	ldr	r3, [pc, #592]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	4a93      	ldr	r2, [pc, #588]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 80038a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a4:	61d3      	str	r3, [r2, #28]
 80038a6:	4b91      	ldr	r3, [pc, #580]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b2:	2301      	movs	r3, #1
 80038b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b6:	4b8e      	ldr	r3, [pc, #568]	; (8003af0 <HAL_RCC_OscConfig+0x4f8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d118      	bne.n	80038f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038c2:	4b8b      	ldr	r3, [pc, #556]	; (8003af0 <HAL_RCC_OscConfig+0x4f8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a8a      	ldr	r2, [pc, #552]	; (8003af0 <HAL_RCC_OscConfig+0x4f8>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ce:	f7fe f993 	bl	8001bf8 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d6:	f7fe f98f 	bl	8001bf8 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b64      	cmp	r3, #100	; 0x64
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e0fd      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e8:	4b81      	ldr	r3, [pc, #516]	; (8003af0 <HAL_RCC_OscConfig+0x4f8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d106      	bne.n	800390a <HAL_RCC_OscConfig+0x312>
 80038fc:	4b7b      	ldr	r3, [pc, #492]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	4a7a      	ldr	r2, [pc, #488]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6213      	str	r3, [r2, #32]
 8003908:	e02d      	b.n	8003966 <HAL_RCC_OscConfig+0x36e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10c      	bne.n	800392c <HAL_RCC_OscConfig+0x334>
 8003912:	4b76      	ldr	r3, [pc, #472]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	4a75      	ldr	r2, [pc, #468]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	6213      	str	r3, [r2, #32]
 800391e:	4b73      	ldr	r3, [pc, #460]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	4a72      	ldr	r2, [pc, #456]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003924:	f023 0304 	bic.w	r3, r3, #4
 8003928:	6213      	str	r3, [r2, #32]
 800392a:	e01c      	b.n	8003966 <HAL_RCC_OscConfig+0x36e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	2b05      	cmp	r3, #5
 8003932:	d10c      	bne.n	800394e <HAL_RCC_OscConfig+0x356>
 8003934:	4b6d      	ldr	r3, [pc, #436]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	4a6c      	ldr	r2, [pc, #432]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 800393a:	f043 0304 	orr.w	r3, r3, #4
 800393e:	6213      	str	r3, [r2, #32]
 8003940:	4b6a      	ldr	r3, [pc, #424]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	4a69      	ldr	r2, [pc, #420]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6213      	str	r3, [r2, #32]
 800394c:	e00b      	b.n	8003966 <HAL_RCC_OscConfig+0x36e>
 800394e:	4b67      	ldr	r3, [pc, #412]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	4a66      	ldr	r2, [pc, #408]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003954:	f023 0301 	bic.w	r3, r3, #1
 8003958:	6213      	str	r3, [r2, #32]
 800395a:	4b64      	ldr	r3, [pc, #400]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	4a63      	ldr	r2, [pc, #396]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003960:	f023 0304 	bic.w	r3, r3, #4
 8003964:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d015      	beq.n	800399a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396e:	f7fe f943 	bl	8001bf8 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003974:	e00a      	b.n	800398c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003976:	f7fe f93f 	bl	8001bf8 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f241 3288 	movw	r2, #5000	; 0x1388
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e0ab      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398c:	4b57      	ldr	r3, [pc, #348]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0ee      	beq.n	8003976 <HAL_RCC_OscConfig+0x37e>
 8003998:	e014      	b.n	80039c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399a:	f7fe f92d 	bl	8001bf8 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a0:	e00a      	b.n	80039b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7fe f929 	bl	8001bf8 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e095      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b8:	4b4c      	ldr	r3, [pc, #304]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1ee      	bne.n	80039a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039c4:	7dfb      	ldrb	r3, [r7, #23]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d105      	bne.n	80039d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ca:	4b48      	ldr	r3, [pc, #288]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	4a47      	ldr	r2, [pc, #284]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 80039d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 8081 	beq.w	8003ae2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039e0:	4b42      	ldr	r3, [pc, #264]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 030c 	and.w	r3, r3, #12
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d061      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d146      	bne.n	8003a82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f4:	4b3f      	ldr	r3, [pc, #252]	; (8003af4 <HAL_RCC_OscConfig+0x4fc>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fa:	f7fe f8fd 	bl	8001bf8 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a02:	f7fe f8f9 	bl	8001bf8 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e067      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a14:	4b35      	ldr	r3, [pc, #212]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1f0      	bne.n	8003a02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a28:	d108      	bne.n	8003a3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a2a:	4b30      	ldr	r3, [pc, #192]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	492d      	ldr	r1, [pc, #180]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a3c:	4b2b      	ldr	r3, [pc, #172]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a19      	ldr	r1, [r3, #32]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	4927      	ldr	r1, [pc, #156]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a54:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <HAL_RCC_OscConfig+0x4fc>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5a:	f7fe f8cd 	bl	8001bf8 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a62:	f7fe f8c9 	bl	8001bf8 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e037      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a74:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x46a>
 8003a80:	e02f      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a82:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <HAL_RCC_OscConfig+0x4fc>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a88:	f7fe f8b6 	bl	8001bf8 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a90:	f7fe f8b2 	bl	8001bf8 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e020      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa2:	4b12      	ldr	r3, [pc, #72]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x498>
 8003aae:	e018      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e013      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCC_OscConfig+0x4f4>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d106      	bne.n	8003ade <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d001      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40007000 	.word	0x40007000
 8003af4:	42420060 	.word	0x42420060

08003af8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0d0      	b.n	8003cae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b6a      	ldr	r3, [pc, #424]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d910      	bls.n	8003b3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b67      	ldr	r3, [pc, #412]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 0207 	bic.w	r2, r3, #7
 8003b22:	4965      	ldr	r1, [pc, #404]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b63      	ldr	r3, [pc, #396]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0b8      	b.n	8003cae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d020      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b54:	4b59      	ldr	r3, [pc, #356]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4a58      	ldr	r2, [pc, #352]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b6c:	4b53      	ldr	r3, [pc, #332]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	4a52      	ldr	r2, [pc, #328]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b78:	4b50      	ldr	r3, [pc, #320]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	494d      	ldr	r1, [pc, #308]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d040      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d107      	bne.n	8003bae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	4b47      	ldr	r3, [pc, #284]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d115      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e07f      	b.n	8003cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d107      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb6:	4b41      	ldr	r3, [pc, #260]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e073      	b.n	8003cae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc6:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e06b      	b.n	8003cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd6:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f023 0203 	bic.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	4936      	ldr	r1, [pc, #216]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003be8:	f7fe f806 	bl	8001bf8 <HAL_GetTick>
 8003bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bee:	e00a      	b.n	8003c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf0:	f7fe f802 	bl	8001bf8 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e053      	b.n	8003cae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	4b2d      	ldr	r3, [pc, #180]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f003 020c 	and.w	r2, r3, #12
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d1eb      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c18:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d210      	bcs.n	8003c48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 0207 	bic.w	r2, r3, #7
 8003c2e:	4922      	ldr	r1, [pc, #136]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c36:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e032      	b.n	8003cae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c54:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	4916      	ldr	r1, [pc, #88]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d009      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c72:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	490e      	ldr	r1, [pc, #56]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c86:	f000 f821 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	490a      	ldr	r1, [pc, #40]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c98:	5ccb      	ldrb	r3, [r1, r3]
 8003c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9e:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <HAL_RCC_ClockConfig+0x1cc>)
 8003ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_RCC_ClockConfig+0x1d0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fd ff64 	bl	8001b74 <HAL_InitTick>

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40022000 	.word	0x40022000
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	08008594 	.word	0x08008594
 8003cc4:	20000000 	.word	0x20000000
 8003cc8:	20000004 	.word	0x20000004

08003ccc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ccc:	b490      	push	{r4, r7}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cd2:	4b2a      	ldr	r3, [pc, #168]	; (8003d7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cd4:	1d3c      	adds	r4, r7, #4
 8003cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003cdc:	f240 2301 	movw	r3, #513	; 0x201
 8003ce0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	2300      	movs	r3, #0
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cf6:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d002      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0x40>
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d003      	beq.n	8003d12 <HAL_RCC_GetSysClockFreq+0x46>
 8003d0a:	e02d      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d0c:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d0e:	623b      	str	r3, [r7, #32]
      break;
 8003d10:	e02d      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	0c9b      	lsrs	r3, r3, #18
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d1e:	4413      	add	r3, r2
 8003d20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d24:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d013      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d30:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	0c5b      	lsrs	r3, r3, #17
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d3e:	4413      	add	r3, r2
 8003d40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	4a0e      	ldr	r2, [pc, #56]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d4a:	fb02 f203 	mul.w	r2, r2, r3
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
 8003d56:	e004      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	4a0b      	ldr	r2, [pc, #44]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d5c:	fb02 f303 	mul.w	r3, r2, r3
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	623b      	str	r3, [r7, #32]
      break;
 8003d66:	e002      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d6a:	623b      	str	r3, [r7, #32]
      break;
 8003d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3728      	adds	r7, #40	; 0x28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc90      	pop	{r4, r7}
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	08008574 	.word	0x08008574
 8003d80:	40021000 	.word	0x40021000
 8003d84:	007a1200 	.word	0x007a1200
 8003d88:	003d0900 	.word	0x003d0900

08003d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d90:	4b02      	ldr	r3, [pc, #8]	; (8003d9c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d92:	681b      	ldr	r3, [r3, #0]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	20000000 	.word	0x20000000

08003da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003da4:	f7ff fff2 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	0a1b      	lsrs	r3, r3, #8
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	4903      	ldr	r1, [pc, #12]	; (8003dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db6:	5ccb      	ldrb	r3, [r1, r3]
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	080085a4 	.word	0x080085a4

08003dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dcc:	f7ff ffde 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	0adb      	lsrs	r3, r3, #11
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	4903      	ldr	r1, [pc, #12]	; (8003dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dde:	5ccb      	ldrb	r3, [r1, r3]
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40021000 	.word	0x40021000
 8003dec:	080085a4 	.word	0x080085a4

08003df0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003df8:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <RCC_Delay+0x34>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <RCC_Delay+0x38>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	0a5b      	lsrs	r3, r3, #9
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e0c:	bf00      	nop
  }
  while (Delay --);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1e5a      	subs	r2, r3, #1
 8003e12:	60fa      	str	r2, [r7, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f9      	bne.n	8003e0c <RCC_Delay+0x1c>
}
 8003e18:	bf00      	nop
 8003e1a:	bf00      	nop
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr
 8003e24:	20000000 	.word	0x20000000
 8003e28:	10624dd3 	.word	0x10624dd3

08003e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d07d      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e4c:	4b4f      	ldr	r3, [pc, #316]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10d      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e58:	4b4c      	ldr	r3, [pc, #304]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	4a4b      	ldr	r2, [pc, #300]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e62:	61d3      	str	r3, [r2, #28]
 8003e64:	4b49      	ldr	r3, [pc, #292]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e70:	2301      	movs	r3, #1
 8003e72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e74:	4b46      	ldr	r3, [pc, #280]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d118      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e80:	4b43      	ldr	r3, [pc, #268]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a42      	ldr	r2, [pc, #264]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8c:	f7fd feb4 	bl	8001bf8 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e92:	e008      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e94:	f7fd feb0 	bl	8001bf8 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	; 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e06d      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea6:	4b3a      	ldr	r3, [pc, #232]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eb2:	4b36      	ldr	r3, [pc, #216]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d02e      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d027      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ed0:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eda:	4b2e      	ldr	r3, [pc, #184]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ee0:	4b2c      	ldr	r3, [pc, #176]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ee6:	4a29      	ldr	r2, [pc, #164]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d014      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef6:	f7fd fe7f 	bl	8001bf8 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fd fe7b 	bl	8001bf8 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e036      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f14:	4b1d      	ldr	r3, [pc, #116]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ee      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f20:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	4917      	ldr	r1, [pc, #92]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f32:	7dfb      	ldrb	r3, [r7, #23]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d105      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f38:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	4a13      	ldr	r2, [pc, #76]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f50:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	490b      	ldr	r1, [pc, #44]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0310 	and.w	r3, r3, #16
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f6e:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	4904      	ldr	r1, [pc, #16]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40007000 	.word	0x40007000
 8003f94:	42420440 	.word	0x42420440

08003f98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b08d      	sub	sp, #52	; 0x34
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003fa0:	4b5a      	ldr	r3, [pc, #360]	; (800410c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003fa2:	f107 040c 	add.w	r4, r7, #12
 8003fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003fac:	f240 2301 	movw	r3, #513	; 0x201
 8003fb0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fba:	2300      	movs	r3, #0
 8003fbc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b10      	cmp	r3, #16
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b10      	cmp	r3, #16
 8003fd0:	f200 8091 	bhi.w	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d04c      	beq.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d07c      	beq.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003fe0:	e089      	b.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003fe2:	4b4b      	ldr	r3, [pc, #300]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003fe8:	4b49      	ldr	r3, [pc, #292]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 8082 	beq.w	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	0c9b      	lsrs	r3, r3, #18
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004002:	4413      	add	r3, r2
 8004004:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004008:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d018      	beq.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004014:	4b3e      	ldr	r3, [pc, #248]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	0c5b      	lsrs	r3, r3, #17
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004022:	4413      	add	r3, r2
 8004024:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00d      	beq.n	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004034:	4a37      	ldr	r2, [pc, #220]	; (8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	fbb2 f2f3 	udiv	r2, r2, r3
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	fb02 f303 	mul.w	r3, r2, r3
 8004042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004044:	e004      	b.n	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	4a33      	ldr	r2, [pc, #204]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800404a:	fb02 f303 	mul.w	r3, r2, r3
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004050:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800405c:	d102      	bne.n	8004064 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004060:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004062:	e04a      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	4a2c      	ldr	r2, [pc, #176]	; (800411c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004072:	e042      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004074:	4b26      	ldr	r3, [pc, #152]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004084:	d108      	bne.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004094:	62bb      	str	r3, [r7, #40]	; 0x28
 8004096:	e01f      	b.n	80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a2:	d109      	bne.n	80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80040b0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80040b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b6:	e00f      	b.n	80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c2:	d11c      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80040c4:	4b12      	ldr	r3, [pc, #72]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d016      	beq.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80040d0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80040d6:	e012      	b.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80040d8:	e011      	b.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80040da:	f7ff fe75 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 80040de:	4602      	mov	r2, r0
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	0b9b      	lsrs	r3, r3, #14
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	3301      	adds	r3, #1
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80040f4:	e004      	b.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80040f6:	bf00      	nop
 80040f8:	e002      	b.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80040fa:	bf00      	nop
 80040fc:	e000      	b.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80040fe:	bf00      	nop
    }
  }
  return (frequency);
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004102:	4618      	mov	r0, r3
 8004104:	3734      	adds	r7, #52	; 0x34
 8004106:	46bd      	mov	sp, r7
 8004108:	bd90      	pop	{r4, r7, pc}
 800410a:	bf00      	nop
 800410c:	08008584 	.word	0x08008584
 8004110:	40021000 	.word	0x40021000
 8004114:	007a1200 	.word	0x007a1200
 8004118:	003d0900 	.word	0x003d0900
 800411c:	aaaaaaab 	.word	0xaaaaaaab

08004120 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e084      	b.n	8004240 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	7c5b      	ldrb	r3, [r3, #17]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d105      	bne.n	800414c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fd fac8 	bl	80016dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fb58 	bl	8004808 <HAL_RTC_WaitForSynchro>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d004      	beq.n	8004168 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2204      	movs	r2, #4
 8004162:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e06b      	b.n	8004240 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fc11 	bl	8004990 <RTC_EnterInitMode>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d004      	beq.n	800417e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2204      	movs	r2, #4
 8004178:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e060      	b.n	8004240 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0207 	bic.w	r2, r2, #7
 800418c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004196:	4b2c      	ldr	r3, [pc, #176]	; (8004248 <HAL_RTC_Init+0x128>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4a2b      	ldr	r2, [pc, #172]	; (8004248 <HAL_RTC_Init+0x128>)
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80041a2:	4b29      	ldr	r3, [pc, #164]	; (8004248 <HAL_RTC_Init+0x128>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	4926      	ldr	r1, [pc, #152]	; (8004248 <HAL_RTC_Init+0x128>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d003      	beq.n	80041c6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e00e      	b.n	80041e4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80041c6:	2001      	movs	r0, #1
 80041c8:	f7ff fee6 	bl	8003f98 <HAL_RCCEx_GetPeriphCLKFreq>
 80041cc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d104      	bne.n	80041de <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2204      	movs	r2, #4
 80041d8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e030      	b.n	8004240 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f023 010f 	bic.w	r1, r3, #15
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	0c1a      	lsrs	r2, r3, #16
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	0c1b      	lsrs	r3, r3, #16
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	b291      	uxth	r1, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6812      	ldr	r2, [r2, #0]
 800420c:	430b      	orrs	r3, r1
 800420e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fbe5 	bl	80049e0 <RTC_ExitInitMode>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d004      	beq.n	8004226 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2204      	movs	r2, #4
 8004220:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e00c      	b.n	8004240 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800423e:	2300      	movs	r3, #0
  }
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40006c00 	.word	0x40006c00

0800424c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800424c:	b590      	push	{r4, r7, lr}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_RTC_SetTime+0x20>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e080      	b.n	8004372 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	7c1b      	ldrb	r3, [r3, #16]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_RTC_SetTime+0x30>
 8004278:	2302      	movs	r3, #2
 800427a:	e07a      	b.n	8004372 <HAL_RTC_SetTime+0x126>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2201      	movs	r2, #1
 8004280:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2202      	movs	r2, #2
 8004286:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d113      	bne.n	80042b6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004298:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	785b      	ldrb	r3, [r3, #1]
 80042a0:	4619      	mov	r1, r3
 80042a2:	460b      	mov	r3, r1
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a5b      	subs	r3, r3, r1
 80042a8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80042aa:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80042b0:	4413      	add	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	e01e      	b.n	80042f4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fbd5 	bl	8004a6a <RTC_Bcd2ToByte>
 80042c0:	4603      	mov	r3, r0
 80042c2:	461a      	mov	r2, r3
 80042c4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80042c8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	785b      	ldrb	r3, [r3, #1]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fbca 	bl	8004a6a <RTC_Bcd2ToByte>
 80042d6:	4603      	mov	r3, r0
 80042d8:	461a      	mov	r2, r3
 80042da:	4613      	mov	r3, r2
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80042e2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	789b      	ldrb	r3, [r3, #2]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fbbe 	bl	8004a6a <RTC_Bcd2ToByte>
 80042ee:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80042f0:	4423      	add	r3, r4
 80042f2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80042f4:	6979      	ldr	r1, [r7, #20]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fae3 	bl	80048c2 <RTC_WriteTimeCounter>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2204      	movs	r2, #4
 8004306:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e02f      	b.n	8004372 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0205 	bic.w	r2, r2, #5
 8004320:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 faf4 	bl	8004910 <RTC_ReadAlarmCounter>
 8004328:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d018      	beq.n	8004364 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	429a      	cmp	r2, r3
 8004338:	d214      	bcs.n	8004364 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004340:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004344:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004346:	6939      	ldr	r1, [r7, #16]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 fafa 	bl	8004942 <RTC_WriteAlarmCounter>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2204      	movs	r2, #4
 8004358:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e006      	b.n	8004372 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004370:	2300      	movs	r3, #0
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	bd90      	pop	{r4, r7, pc}
	...

0800437c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	61bb      	str	r3, [r7, #24]
 800438c:	2300      	movs	r3, #0
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	2300      	movs	r3, #0
 8004396:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_RTC_GetTime+0x28>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0b5      	b.n	8004514 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e0ac      	b.n	8004514 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fa51 	bl	8004862 <RTC_ReadTimeCounter>
 80043c0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	4a55      	ldr	r2, [pc, #340]	; (800451c <HAL_RTC_GetTime+0x1a0>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	0adb      	lsrs	r3, r3, #11
 80043cc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4b52      	ldr	r3, [pc, #328]	; (800451c <HAL_RTC_GetTime+0x1a0>)
 80043d2:	fba3 1302 	umull	r1, r3, r3, r2
 80043d6:	0adb      	lsrs	r3, r3, #11
 80043d8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80043dc:	fb01 f303 	mul.w	r3, r1, r3
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	4a4f      	ldr	r2, [pc, #316]	; (8004520 <HAL_RTC_GetTime+0x1a4>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	4a4a      	ldr	r2, [pc, #296]	; (800451c <HAL_RTC_GetTime+0x1a0>)
 80043f4:	fba2 1203 	umull	r1, r2, r2, r3
 80043f8:	0ad2      	lsrs	r2, r2, #11
 80043fa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80043fe:	fb01 f202 	mul.w	r2, r1, r2
 8004402:	1a9a      	subs	r2, r3, r2
 8004404:	4b46      	ldr	r3, [pc, #280]	; (8004520 <HAL_RTC_GetTime+0x1a4>)
 8004406:	fba3 1302 	umull	r1, r3, r3, r2
 800440a:	0959      	lsrs	r1, r3, #5
 800440c:	460b      	mov	r3, r1
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a5b      	subs	r3, r3, r1
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	1ad1      	subs	r1, r2, r3
 8004416:	b2ca      	uxtb	r2, r1
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b17      	cmp	r3, #23
 8004420:	d955      	bls.n	80044ce <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4a3f      	ldr	r2, [pc, #252]	; (8004524 <HAL_RTC_GetTime+0x1a8>)
 8004426:	fba2 2303 	umull	r2, r3, r2, r3
 800442a:	091b      	lsrs	r3, r3, #4
 800442c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800442e:	6939      	ldr	r1, [r7, #16]
 8004430:	4b3c      	ldr	r3, [pc, #240]	; (8004524 <HAL_RTC_GetTime+0x1a8>)
 8004432:	fba3 2301 	umull	r2, r3, r3, r1
 8004436:	091a      	lsrs	r2, r3, #4
 8004438:	4613      	mov	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	4413      	add	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	1aca      	subs	r2, r1, r3
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fa61 	bl	8004910 <RTC_ReadAlarmCounter>
 800444e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d008      	beq.n	800446a <HAL_RTC_GetTime+0xee>
 8004458:	69fa      	ldr	r2, [r7, #28]
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	429a      	cmp	r2, r3
 800445e:	d904      	bls.n	800446a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	e002      	b.n	8004470 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800446a:	f04f 33ff 	mov.w	r3, #4294967295
 800446e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	4a2d      	ldr	r2, [pc, #180]	; (8004528 <HAL_RTC_GetTime+0x1ac>)
 8004474:	fb02 f303 	mul.w	r3, r2, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800447e:	69b9      	ldr	r1, [r7, #24]
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fa1e 	bl	80048c2 <RTC_WriteTimeCounter>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e041      	b.n	8004514 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004496:	d00c      	beq.n	80044b2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	4413      	add	r3, r2
 800449e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80044a0:	69f9      	ldr	r1, [r7, #28]
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fa4d 	bl	8004942 <RTC_WriteAlarmCounter>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e030      	b.n	8004514 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80044b2:	69f9      	ldr	r1, [r7, #28]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fa44 	bl	8004942 <RTC_WriteAlarmCounter>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e027      	b.n	8004514 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80044c4:	6979      	ldr	r1, [r7, #20]
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 faec 	bl	8004aa4 <RTC_DateUpdate>
 80044cc:	e003      	b.n	80044d6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01a      	beq.n	8004512 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 faa5 	bl	8004a30 <RTC_ByteToBcd2>
 80044e6:	4603      	mov	r3, r0
 80044e8:	461a      	mov	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	785b      	ldrb	r3, [r3, #1]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fa9c 	bl	8004a30 <RTC_ByteToBcd2>
 80044f8:	4603      	mov	r3, r0
 80044fa:	461a      	mov	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	789b      	ldrb	r3, [r3, #2]
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fa93 	bl	8004a30 <RTC_ByteToBcd2>
 800450a:	4603      	mov	r3, r0
 800450c:	461a      	mov	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3720      	adds	r7, #32
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	91a2b3c5 	.word	0x91a2b3c5
 8004520:	88888889 	.word	0x88888889
 8004524:	aaaaaaab 	.word	0xaaaaaaab
 8004528:	00015180 	.word	0x00015180

0800452c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
 800453c:	2300      	movs	r3, #0
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_RTC_SetDate+0x24>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e097      	b.n	8004684 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	7c1b      	ldrb	r3, [r3, #16]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_RTC_SetDate+0x34>
 800455c:	2302      	movs	r3, #2
 800455e:	e091      	b.n	8004684 <HAL_RTC_SetDate+0x158>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2202      	movs	r2, #2
 800456a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10c      	bne.n	800458c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	78da      	ldrb	r2, [r3, #3]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	785a      	ldrb	r2, [r3, #1]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	789a      	ldrb	r2, [r3, #2]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	739a      	strb	r2, [r3, #14]
 800458a:	e01a      	b.n	80045c2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	78db      	ldrb	r3, [r3, #3]
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fa6a 	bl	8004a6a <RTC_Bcd2ToByte>
 8004596:	4603      	mov	r3, r0
 8004598:	461a      	mov	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	785b      	ldrb	r3, [r3, #1]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fa61 	bl	8004a6a <RTC_Bcd2ToByte>
 80045a8:	4603      	mov	r3, r0
 80045aa:	461a      	mov	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	789b      	ldrb	r3, [r3, #2]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fa58 	bl	8004a6a <RTC_Bcd2ToByte>
 80045ba:	4603      	mov	r3, r0
 80045bc:	461a      	mov	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	7bdb      	ldrb	r3, [r3, #15]
 80045c6:	4618      	mov	r0, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	7b59      	ldrb	r1, [r3, #13]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	7b9b      	ldrb	r3, [r3, #14]
 80045d0:	461a      	mov	r2, r3
 80045d2:	f000 fb43 	bl	8004c5c <RTC_WeekDayNum>
 80045d6:	4603      	mov	r3, r0
 80045d8:	461a      	mov	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	7b1a      	ldrb	r2, [r3, #12]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f93b 	bl	8004862 <RTC_ReadTimeCounter>
 80045ec:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	4a26      	ldr	r2, [pc, #152]	; (800468c <HAL_RTC_SetDate+0x160>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	0adb      	lsrs	r3, r3, #11
 80045f8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b18      	cmp	r3, #24
 80045fe:	d93a      	bls.n	8004676 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	4a23      	ldr	r2, [pc, #140]	; (8004690 <HAL_RTC_SetDate+0x164>)
 8004604:	fba2 2303 	umull	r2, r3, r2, r3
 8004608:	091b      	lsrs	r3, r3, #4
 800460a:	4a22      	ldr	r2, [pc, #136]	; (8004694 <HAL_RTC_SetDate+0x168>)
 800460c:	fb02 f303 	mul.w	r3, r2, r3
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004616:	69f9      	ldr	r1, [r7, #28]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f952 	bl	80048c2 <RTC_WriteTimeCounter>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2204      	movs	r2, #4
 8004628:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e027      	b.n	8004684 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f96b 	bl	8004910 <RTC_ReadAlarmCounter>
 800463a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004642:	d018      	beq.n	8004676 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	429a      	cmp	r2, r3
 800464a:	d214      	bcs.n	8004676 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004652:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004656:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004658:	69b9      	ldr	r1, [r7, #24]
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f971 	bl	8004942 <RTC_WriteAlarmCounter>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2204      	movs	r2, #4
 800466a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e006      	b.n	8004684 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3720      	adds	r7, #32
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	91a2b3c5 	.word	0x91a2b3c5
 8004690:	aaaaaaab 	.word	0xaaaaaaab
 8004694:	00015180 	.word	0x00015180

08004698 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004698:	b590      	push	{r4, r7, lr}
 800469a:	b089      	sub	sp, #36	; 0x24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80046a8:	f107 0314 	add.w	r3, r7, #20
 80046ac:	2100      	movs	r1, #0
 80046ae:	460a      	mov	r2, r1
 80046b0:	801a      	strh	r2, [r3, #0]
 80046b2:	460a      	mov	r2, r1
 80046b4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_RTC_SetAlarm_IT+0x2a>
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e099      	b.n	80047fa <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	7c1b      	ldrb	r3, [r3, #16]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_RTC_SetAlarm_IT+0x3a>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e093      	b.n	80047fa <HAL_RTC_SetAlarm_IT+0x162>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2202      	movs	r2, #2
 80046dc:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80046de:	f107 0314 	add.w	r3, r7, #20
 80046e2:	2200      	movs	r2, #0
 80046e4:	4619      	mov	r1, r3
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f7ff fe48 	bl	800437c <HAL_RTC_GetTime>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e081      	b.n	80047fa <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80046f6:	7d3b      	ldrb	r3, [r7, #20]
 80046f8:	461a      	mov	r2, r3
 80046fa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80046fe:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8004702:	7d7b      	ldrb	r3, [r7, #21]
 8004704:	4619      	mov	r1, r3
 8004706:	460b      	mov	r3, r1
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	1a5b      	subs	r3, r3, r1
 800470c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800470e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8004710:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004712:	4413      	add	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d113      	bne.n	8004744 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004726:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	785b      	ldrb	r3, [r3, #1]
 800472e:	4619      	mov	r1, r3
 8004730:	460b      	mov	r3, r1
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	1a5b      	subs	r3, r3, r1
 8004736:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004738:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800473e:	4413      	add	r3, r2
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	e01e      	b.n	8004782 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f000 f98e 	bl	8004a6a <RTC_Bcd2ToByte>
 800474e:	4603      	mov	r3, r0
 8004750:	461a      	mov	r2, r3
 8004752:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004756:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	785b      	ldrb	r3, [r3, #1]
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f983 	bl	8004a6a <RTC_Bcd2ToByte>
 8004764:	4603      	mov	r3, r0
 8004766:	461a      	mov	r2, r3
 8004768:	4613      	mov	r3, r2
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004770:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	789b      	ldrb	r3, [r3, #2]
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f977 	bl	8004a6a <RTC_Bcd2ToByte>
 800477c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800477e:	4423      	add	r3, r4
 8004780:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	429a      	cmp	r2, r3
 8004788:	d205      	bcs.n	8004796 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004790:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004794:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004796:	69f9      	ldr	r1, [r7, #28]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 f8d2 	bl	8004942 <RTC_WriteAlarmCounter>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d007      	beq.n	80047b4 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2204      	movs	r2, #4
 80047a8:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e022      	b.n	80047fa <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0202 	bic.w	r2, r2, #2
 80047c2:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0202 	orr.w	r2, r2, #2
 80047d2:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_RTC_SetAlarm_IT+0x16c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a0a      	ldr	r2, [pc, #40]	; (8004804 <HAL_RTC_SetAlarm_IT+0x16c>)
 80047da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047de:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80047e0:	4b08      	ldr	r3, [pc, #32]	; (8004804 <HAL_RTC_SetAlarm_IT+0x16c>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a07      	ldr	r2, [pc, #28]	; (8004804 <HAL_RTC_SetAlarm_IT+0x16c>)
 80047e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ea:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80047f8:	2300      	movs	r3, #0
  }
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3724      	adds	r7, #36	; 0x24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd90      	pop	{r4, r7, pc}
 8004802:	bf00      	nop
 8004804:	40010400 	.word	0x40010400

08004808 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e01d      	b.n	800485a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0208 	bic.w	r2, r2, #8
 800482c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800482e:	f7fd f9e3 	bl	8001bf8 <HAL_GetTick>
 8004832:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004834:	e009      	b.n	800484a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004836:	f7fd f9df 	bl	8001bf8 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004844:	d901      	bls.n	800484a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e007      	b.n	800485a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0ee      	beq.n	8004836 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004862:	b480      	push	{r7}
 8004864:	b087      	sub	sp, #28
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	827b      	strh	r3, [r7, #18]
 800486e:	2300      	movs	r3, #0
 8004870:	823b      	strh	r3, [r7, #16]
 8004872:	2300      	movs	r3, #0
 8004874:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004892:	8a7a      	ldrh	r2, [r7, #18]
 8004894:	8a3b      	ldrh	r3, [r7, #16]
 8004896:	429a      	cmp	r2, r3
 8004898:	d008      	beq.n	80048ac <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800489a:	8a3b      	ldrh	r3, [r7, #16]
 800489c:	041a      	lsls	r2, r3, #16
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	e004      	b.n	80048b6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80048ac:	8a7b      	ldrh	r3, [r7, #18]
 80048ae:	041a      	lsls	r2, r3, #16
 80048b0:	89fb      	ldrh	r3, [r7, #14]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80048b6:	697b      	ldr	r3, [r7, #20]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr

080048c2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f85d 	bl	8004990 <RTC_EnterInitMode>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
 80048e0:	e011      	b.n	8004906 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	0c12      	lsrs	r2, r2, #16
 80048ea:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	b292      	uxth	r2, r2
 80048f4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f872 	bl	80049e0 <RTC_ExitInitMode>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	81fb      	strh	r3, [r7, #14]
 800491c:	2300      	movs	r3, #0
 800491e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004930:	89fb      	ldrh	r3, [r7, #14]
 8004932:	041a      	lsls	r2, r3, #16
 8004934:	89bb      	ldrh	r3, [r7, #12]
 8004936:	4313      	orrs	r3, r2
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr

08004942 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f81d 	bl	8004990 <RTC_EnterInitMode>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
 8004960:	e011      	b.n	8004986 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	0c12      	lsrs	r2, r2, #16
 800496a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	b292      	uxth	r2, r2
 8004974:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f832 	bl	80049e0 <RTC_ExitInitMode>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004986:	7bfb      	ldrb	r3, [r7, #15]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800499c:	f7fd f92c 	bl	8001bf8 <HAL_GetTick>
 80049a0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80049a2:	e009      	b.n	80049b8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80049a4:	f7fd f928 	bl	8001bf8 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049b2:	d901      	bls.n	80049b8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e00f      	b.n	80049d8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0ee      	beq.n	80049a4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0210 	orr.w	r2, r2, #16
 80049d4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0210 	bic.w	r2, r2, #16
 80049fa:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80049fc:	f7fd f8fc 	bl	8001bf8 <HAL_GetTick>
 8004a00:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a02:	e009      	b.n	8004a18 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004a04:	f7fd f8f8 	bl	8001bf8 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a12:	d901      	bls.n	8004a18 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e007      	b.n	8004a28 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0ee      	beq.n	8004a04 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004a3e:	e005      	b.n	8004a4c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3301      	adds	r3, #1
 8004a44:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	3b0a      	subs	r3, #10
 8004a4a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	2b09      	cmp	r3, #9
 8004a50:	d8f6      	bhi.n	8004a40 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	b2db      	uxtb	r3, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr

08004a6a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	4603      	mov	r3, r0
 8004a72:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	091b      	lsrs	r3, r3, #4
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	4413      	add	r3, r2
 8004a98:	b2db      	uxtb	r3, r3
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr

08004aa4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	7bdb      	ldrb	r3, [r3, #15]
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	7b5b      	ldrb	r3, [r3, #13]
 8004ac8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	7b9b      	ldrb	r3, [r3, #14]
 8004ace:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60bb      	str	r3, [r7, #8]
 8004ad4:	e06f      	b.n	8004bb6 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d011      	beq.n	8004b00 <RTC_DateUpdate+0x5c>
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	2b03      	cmp	r3, #3
 8004ae0:	d00e      	beq.n	8004b00 <RTC_DateUpdate+0x5c>
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b05      	cmp	r3, #5
 8004ae6:	d00b      	beq.n	8004b00 <RTC_DateUpdate+0x5c>
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	2b07      	cmp	r3, #7
 8004aec:	d008      	beq.n	8004b00 <RTC_DateUpdate+0x5c>
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d005      	beq.n	8004b00 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	2b0a      	cmp	r3, #10
 8004af8:	d002      	beq.n	8004b00 <RTC_DateUpdate+0x5c>
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	2b0c      	cmp	r3, #12
 8004afe:	d117      	bne.n	8004b30 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b1e      	cmp	r3, #30
 8004b04:	d803      	bhi.n	8004b0e <RTC_DateUpdate+0x6a>
      {
        day++;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004b0c:	e050      	b.n	8004bb0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b0c      	cmp	r3, #12
 8004b12:	d005      	beq.n	8004b20 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	3301      	adds	r3, #1
 8004b18:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004b1e:	e047      	b.n	8004bb0 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004b20:	2301      	movs	r3, #1
 8004b22:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004b24:	2301      	movs	r3, #1
 8004b26:	60fb      	str	r3, [r7, #12]
          year++;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004b2e:	e03f      	b.n	8004bb0 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d008      	beq.n	8004b48 <RTC_DateUpdate+0xa4>
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b06      	cmp	r3, #6
 8004b3a:	d005      	beq.n	8004b48 <RTC_DateUpdate+0xa4>
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b09      	cmp	r3, #9
 8004b40:	d002      	beq.n	8004b48 <RTC_DateUpdate+0xa4>
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	2b0b      	cmp	r3, #11
 8004b46:	d10c      	bne.n	8004b62 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b1d      	cmp	r3, #29
 8004b4c:	d803      	bhi.n	8004b56 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3301      	adds	r3, #1
 8004b52:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004b54:	e02c      	b.n	8004bb0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004b60:	e026      	b.n	8004bb0 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d123      	bne.n	8004bb0 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b1b      	cmp	r3, #27
 8004b6c:	d803      	bhi.n	8004b76 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3301      	adds	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	e01c      	b.n	8004bb0 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b1c      	cmp	r3, #28
 8004b7a:	d111      	bne.n	8004ba0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 f839 	bl	8004bf8 <RTC_IsLeapYear>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	e00d      	b.n	8004bb0 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	3301      	adds	r3, #1
 8004b98:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	e007      	b.n	8004bb0 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b1d      	cmp	r3, #29
 8004ba4:	d104      	bne.n	8004bb0 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004bac:	2301      	movs	r3, #1
 8004bae:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d38b      	bcc.n	8004ad6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	4619      	mov	r1, r3
 8004be0:	6978      	ldr	r0, [r7, #20]
 8004be2:	f000 f83b 	bl	8004c5c <RTC_WeekDayNum>
 8004be6:	4603      	mov	r3, r0
 8004be8:	461a      	mov	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	731a      	strb	r2, [r3, #12]
}
 8004bee:	bf00      	nop
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e01d      	b.n	8004c4e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	4a10      	ldr	r2, [pc, #64]	; (8004c58 <RTC_IsLeapYear+0x60>)
 8004c16:	fba2 1203 	umull	r1, r2, r2, r3
 8004c1a:	0952      	lsrs	r2, r2, #5
 8004c1c:	2164      	movs	r1, #100	; 0x64
 8004c1e:	fb01 f202 	mul.w	r2, r1, r2
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e00f      	b.n	8004c4e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	4a09      	ldr	r2, [pc, #36]	; (8004c58 <RTC_IsLeapYear+0x60>)
 8004c32:	fba2 1203 	umull	r1, r2, r2, r3
 8004c36:	09d2      	lsrs	r2, r2, #7
 8004c38:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004c3c:	fb01 f202 	mul.w	r2, r1, r2
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004c4c:	2300      	movs	r3, #0
  }
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	70fb      	strb	r3, [r7, #3]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004c7a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d82d      	bhi.n	8004cde <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	4613      	mov	r3, r2
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	4413      	add	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	1a9b      	subs	r3, r3, r2
 8004c8e:	4a2c      	ldr	r2, [pc, #176]	; (8004d40 <RTC_WeekDayNum+0xe4>)
 8004c90:	fba2 2303 	umull	r2, r3, r2, r3
 8004c94:	085a      	lsrs	r2, r3, #1
 8004c96:	78bb      	ldrb	r3, [r7, #2]
 8004c98:	441a      	add	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	441a      	add	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	089b      	lsrs	r3, r3, #2
 8004ca4:	441a      	add	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	4926      	ldr	r1, [pc, #152]	; (8004d44 <RTC_WeekDayNum+0xe8>)
 8004cac:	fba1 1303 	umull	r1, r3, r1, r3
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	1ad2      	subs	r2, r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	4922      	ldr	r1, [pc, #136]	; (8004d44 <RTC_WeekDayNum+0xe8>)
 8004cba:	fba1 1303 	umull	r1, r3, r1, r3
 8004cbe:	09db      	lsrs	r3, r3, #7
 8004cc0:	4413      	add	r3, r2
 8004cc2:	1d1a      	adds	r2, r3, #4
 8004cc4:	4b20      	ldr	r3, [pc, #128]	; (8004d48 <RTC_WeekDayNum+0xec>)
 8004cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8004cca:	1ad1      	subs	r1, r2, r3
 8004ccc:	0849      	lsrs	r1, r1, #1
 8004cce:	440b      	add	r3, r1
 8004cd0:	0899      	lsrs	r1, r3, #2
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	1a5b      	subs	r3, r3, r1
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	e029      	b.n	8004d32 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004cde:	78fa      	ldrb	r2, [r7, #3]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	4413      	add	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	1a9b      	subs	r3, r3, r2
 8004cea:	4a15      	ldr	r2, [pc, #84]	; (8004d40 <RTC_WeekDayNum+0xe4>)
 8004cec:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf0:	085a      	lsrs	r2, r3, #1
 8004cf2:	78bb      	ldrb	r3, [r7, #2]
 8004cf4:	441a      	add	r2, r3
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	441a      	add	r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	089b      	lsrs	r3, r3, #2
 8004cfe:	441a      	add	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4910      	ldr	r1, [pc, #64]	; (8004d44 <RTC_WeekDayNum+0xe8>)
 8004d04:	fba1 1303 	umull	r1, r3, r1, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	1ad2      	subs	r2, r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	490d      	ldr	r1, [pc, #52]	; (8004d44 <RTC_WeekDayNum+0xe8>)
 8004d10:	fba1 1303 	umull	r1, r3, r1, r3
 8004d14:	09db      	lsrs	r3, r3, #7
 8004d16:	4413      	add	r3, r2
 8004d18:	1c9a      	adds	r2, r3, #2
 8004d1a:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <RTC_WeekDayNum+0xec>)
 8004d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d20:	1ad1      	subs	r1, r2, r3
 8004d22:	0849      	lsrs	r1, r1, #1
 8004d24:	440b      	add	r3, r1
 8004d26:	0899      	lsrs	r1, r3, #2
 8004d28:	460b      	mov	r3, r1
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	1a5b      	subs	r3, r3, r1
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	b2db      	uxtb	r3, r3
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr
 8004d40:	38e38e39 	.word	0x38e38e39
 8004d44:	51eb851f 	.word	0x51eb851f
 8004d48:	24924925 	.word	0x24924925

08004d4c <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d027      	beq.n	8004db2 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d020      	beq.n	8004db2 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00b      	beq.n	8004d96 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f824 	bl	8004dcc <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0204 	mvn.w	r2, #4
 8004d8c:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2204      	movs	r2, #4
 8004d92:	745a      	strb	r2, [r3, #17]
 8004d94:	e005      	b.n	8004da2 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f80f 	bl	8004dba <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0201 	bic.w	r2, r2, #1
 8004db0:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004db2:	bf00      	nop
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr

08004dcc <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr

08004dde <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b082      	sub	sp, #8
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e03f      	b.n	8004e70 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fc fe09 	bl	8001a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2224      	movs	r2, #36	; 0x24
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e20:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fc24 	bl	8005670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695a      	ldr	r2, [r3, #20]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e46:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e56:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	4613      	mov	r3, r2
 8004e86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d17c      	bne.n	8004f92 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_UART_Transmit+0x2c>
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e075      	b.n	8004f94 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_UART_Transmit+0x3e>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e06e      	b.n	8004f94 <HAL_UART_Transmit+0x11c>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2221      	movs	r2, #33	; 0x21
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ecc:	f7fc fe94 	bl	8001bf8 <HAL_GetTick>
 8004ed0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	88fa      	ldrh	r2, [r7, #6]
 8004ed6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	88fa      	ldrh	r2, [r7, #6]
 8004edc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee6:	d108      	bne.n	8004efa <HAL_UART_Transmit+0x82>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d104      	bne.n	8004efa <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	e003      	b.n	8004f02 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f0a:	e02a      	b.n	8004f62 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2200      	movs	r2, #0
 8004f14:	2180      	movs	r1, #128	; 0x80
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fa10 	bl	800533c <UART_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e036      	b.n	8004f94 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10b      	bne.n	8004f44 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f3a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	3302      	adds	r3, #2
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	e007      	b.n	8004f54 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	781a      	ldrb	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	3301      	adds	r3, #1
 8004f52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1cf      	bne.n	8004f0c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	2200      	movs	r2, #0
 8004f74:	2140      	movs	r1, #64	; 0x40
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 f9e0 	bl	800533c <UART_WaitOnFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e006      	b.n	8004f94 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	e000      	b.n	8004f94 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f92:	2302      	movs	r3, #2
  }
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3720      	adds	r7, #32
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	; 0x28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10d      	bne.n	8004fee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d008      	beq.n	8004fee <HAL_UART_IRQHandler+0x52>
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fa99 	bl	800551e <UART_Receive_IT>
      return;
 8004fec:	e17b      	b.n	80052e6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80b1 	beq.w	8005158 <HAL_UART_IRQHandler+0x1bc>
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d105      	bne.n	800500c <HAL_UART_IRQHandler+0x70>
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80a6 	beq.w	8005158 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_UART_IRQHandler+0x90>
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	f043 0201 	orr.w	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_UART_IRQHandler+0xb0>
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	f043 0202 	orr.w	r2, r3, #2
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_UART_IRQHandler+0xd0>
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	f043 0204 	orr.w	r2, r3, #4
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00f      	beq.n	8005096 <HAL_UART_IRQHandler+0xfa>
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d104      	bne.n	800508a <HAL_UART_IRQHandler+0xee>
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d005      	beq.n	8005096 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f043 0208 	orr.w	r2, r3, #8
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 811e 	beq.w	80052dc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d007      	beq.n	80050ba <HAL_UART_IRQHandler+0x11e>
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fa32 	bl	800551e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	bf14      	ite	ne
 80050c8:	2301      	movne	r3, #1
 80050ca:	2300      	moveq	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <HAL_UART_IRQHandler+0x146>
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d031      	beq.n	8005146 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f974 	bl	80053d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d023      	beq.n	800513e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695a      	ldr	r2, [r3, #20]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005104:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	2b00      	cmp	r3, #0
 800510c:	d013      	beq.n	8005136 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	4a76      	ldr	r2, [pc, #472]	; (80052ec <HAL_UART_IRQHandler+0x350>)
 8005114:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	4618      	mov	r0, r3
 800511c:	f7fc ff18 	bl	8001f50 <HAL_DMA_Abort_IT>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d016      	beq.n	8005154 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005130:	4610      	mov	r0, r2
 8005132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005134:	e00e      	b.n	8005154 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8ec 	bl	8005314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513c:	e00a      	b.n	8005154 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f8e8 	bl	8005314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005144:	e006      	b.n	8005154 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f8e4 	bl	8005314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005152:	e0c3      	b.n	80052dc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005154:	bf00      	nop
    return;
 8005156:	e0c1      	b.n	80052dc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515c:	2b01      	cmp	r3, #1
 800515e:	f040 80a1 	bne.w	80052a4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 809b 	beq.w	80052a4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 8095 	beq.w	80052a4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d04e      	beq.n	800523c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80051a8:	8a3b      	ldrh	r3, [r7, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 8098 	beq.w	80052e0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051b4:	8a3a      	ldrh	r2, [r7, #16]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	f080 8092 	bcs.w	80052e0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8a3a      	ldrh	r2, [r7, #16]
 80051c0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	d02b      	beq.n	8005224 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051da:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695a      	ldr	r2, [r3, #20]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0201 	bic.w	r2, r2, #1
 80051ea:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051fa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0210 	bic.w	r2, r2, #16
 8005218:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	4618      	mov	r0, r3
 8005220:	f7fc fe5c 	bl	8001edc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800522c:	b29b      	uxth	r3, r3
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	b29b      	uxth	r3, r3
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f876 	bl	8005326 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800523a:	e051      	b.n	80052e0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005244:	b29b      	uxth	r3, r3
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d047      	beq.n	80052e4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005254:	8a7b      	ldrh	r3, [r7, #18]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d044      	beq.n	80052e4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005268:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695a      	ldr	r2, [r3, #20]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0201 	bic.w	r2, r2, #1
 8005278:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0210 	bic.w	r2, r2, #16
 8005296:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005298:	8a7b      	ldrh	r3, [r7, #18]
 800529a:	4619      	mov	r1, r3
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f842 	bl	8005326 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80052a2:	e01f      	b.n	80052e4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d008      	beq.n	80052c0 <HAL_UART_IRQHandler+0x324>
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f8c9 	bl	8005450 <UART_Transmit_IT>
    return;
 80052be:	e012      	b.n	80052e6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00d      	beq.n	80052e6 <HAL_UART_IRQHandler+0x34a>
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f90a 	bl	80054ee <UART_EndTransmit_IT>
    return;
 80052da:	e004      	b.n	80052e6 <HAL_UART_IRQHandler+0x34a>
    return;
 80052dc:	bf00      	nop
 80052de:	e002      	b.n	80052e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80052e0:	bf00      	nop
 80052e2:	e000      	b.n	80052e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80052e4:	bf00      	nop
  }
}
 80052e6:	3728      	adds	r7, #40	; 0x28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	08005429 	.word	0x08005429

080052f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bc80      	pop	{r7}
 8005300:	4770      	bx	lr

08005302 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr

08005314 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	bc80      	pop	{r7}
 8005324:	4770      	bx	lr

08005326 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	460b      	mov	r3, r1
 8005330:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr

0800533c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	4613      	mov	r3, r2
 800534a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800534c:	e02c      	b.n	80053a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005354:	d028      	beq.n	80053a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <UART_WaitOnFlagUntilTimeout+0x30>
 800535c:	f7fc fc4c 	bl	8001bf8 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	429a      	cmp	r2, r3
 800536a:	d21d      	bcs.n	80053a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800537a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695a      	ldr	r2, [r3, #20]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0201 	bic.w	r2, r2, #1
 800538a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e00f      	b.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	4013      	ands	r3, r2
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	bf0c      	ite	eq
 80053b8:	2301      	moveq	r3, #1
 80053ba:	2300      	movne	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d0c3      	beq.n	800534e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695a      	ldr	r2, [r3, #20]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0201 	bic.w	r2, r2, #1
 80053f6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d107      	bne.n	8005410 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0210 	bic.w	r2, r2, #16
 800540e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr

08005428 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7ff ff66 	bl	8005314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b21      	cmp	r3, #33	; 0x21
 8005462:	d13e      	bne.n	80054e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546c:	d114      	bne.n	8005498 <UART_Transmit_IT+0x48>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d110      	bne.n	8005498 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800548a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	1c9a      	adds	r2, r3, #2
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	621a      	str	r2, [r3, #32]
 8005496:	e008      	b.n	80054aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	1c59      	adds	r1, r3, #1
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6211      	str	r1, [r2, #32]
 80054a2:	781a      	ldrb	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	4619      	mov	r1, r3
 80054b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10f      	bne.n	80054de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	e000      	b.n	80054e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054e2:	2302      	movs	r3, #2
  }
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr

080054ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005504:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff feee 	bl	80052f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b086      	sub	sp, #24
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b22      	cmp	r3, #34	; 0x22
 8005530:	f040 8099 	bne.w	8005666 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553c:	d117      	bne.n	800556e <UART_Receive_IT+0x50>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d113      	bne.n	800556e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	b29b      	uxth	r3, r3
 8005558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555c:	b29a      	uxth	r2, r3
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	1c9a      	adds	r2, r3, #2
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	629a      	str	r2, [r3, #40]	; 0x28
 800556c:	e026      	b.n	80055bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005574:	2300      	movs	r3, #0
 8005576:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005580:	d007      	beq.n	8005592 <UART_Receive_IT+0x74>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10a      	bne.n	80055a0 <UART_Receive_IT+0x82>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	b2da      	uxtb	r2, r3
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	e008      	b.n	80055b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	4619      	mov	r1, r3
 80055ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d148      	bne.n	8005662 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0220 	bic.w	r2, r2, #32
 80055de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	2b01      	cmp	r3, #1
 800560e:	d123      	bne.n	8005658 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0210 	bic.w	r2, r2, #16
 8005624:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	2b10      	cmp	r3, #16
 8005632:	d10a      	bne.n	800564a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800564e:	4619      	mov	r1, r3
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff fe68 	bl	8005326 <HAL_UARTEx_RxEventCallback>
 8005656:	e002      	b.n	800565e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff fe52 	bl	8005302 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	e002      	b.n	8005668 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	e000      	b.n	8005668 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005666:	2302      	movs	r3, #2
  }
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80056aa:	f023 030c 	bic.w	r3, r3, #12
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	430b      	orrs	r3, r1
 80056b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a2c      	ldr	r2, [pc, #176]	; (8005784 <UART_SetConfig+0x114>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d103      	bne.n	80056e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80056d8:	f7fe fb76 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	e002      	b.n	80056e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80056e0:	f7fe fb5e 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 80056e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4613      	mov	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	009a      	lsls	r2, r3, #2
 80056f0:	441a      	add	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	4a22      	ldr	r2, [pc, #136]	; (8005788 <UART_SetConfig+0x118>)
 80056fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	0119      	lsls	r1, r3, #4
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4613      	mov	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	009a      	lsls	r2, r3, #2
 8005710:	441a      	add	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	fbb2 f2f3 	udiv	r2, r2, r3
 800571c:	4b1a      	ldr	r3, [pc, #104]	; (8005788 <UART_SetConfig+0x118>)
 800571e:	fba3 0302 	umull	r0, r3, r3, r2
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	2064      	movs	r0, #100	; 0x64
 8005726:	fb00 f303 	mul.w	r3, r0, r3
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	3332      	adds	r3, #50	; 0x32
 8005730:	4a15      	ldr	r2, [pc, #84]	; (8005788 <UART_SetConfig+0x118>)
 8005732:	fba2 2303 	umull	r2, r3, r2, r3
 8005736:	095b      	lsrs	r3, r3, #5
 8005738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800573c:	4419      	add	r1, r3
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	009a      	lsls	r2, r3, #2
 8005748:	441a      	add	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	fbb2 f2f3 	udiv	r2, r2, r3
 8005754:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <UART_SetConfig+0x118>)
 8005756:	fba3 0302 	umull	r0, r3, r3, r2
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	2064      	movs	r0, #100	; 0x64
 800575e:	fb00 f303 	mul.w	r3, r0, r3
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	3332      	adds	r3, #50	; 0x32
 8005768:	4a07      	ldr	r2, [pc, #28]	; (8005788 <UART_SetConfig+0x118>)
 800576a:	fba2 2303 	umull	r2, r3, r2, r3
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	f003 020f 	and.w	r2, r3, #15
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	440a      	add	r2, r1
 800577a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800577c:	bf00      	nop
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40013800 	.word	0x40013800
 8005788:	51eb851f 	.word	0x51eb851f

0800578c <__errno>:
 800578c:	4b01      	ldr	r3, [pc, #4]	; (8005794 <__errno+0x8>)
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	2000000c 	.word	0x2000000c

08005798 <__libc_init_array>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	2600      	movs	r6, #0
 800579c:	4d0c      	ldr	r5, [pc, #48]	; (80057d0 <__libc_init_array+0x38>)
 800579e:	4c0d      	ldr	r4, [pc, #52]	; (80057d4 <__libc_init_array+0x3c>)
 80057a0:	1b64      	subs	r4, r4, r5
 80057a2:	10a4      	asrs	r4, r4, #2
 80057a4:	42a6      	cmp	r6, r4
 80057a6:	d109      	bne.n	80057bc <__libc_init_array+0x24>
 80057a8:	f002 febc 	bl	8008524 <_init>
 80057ac:	2600      	movs	r6, #0
 80057ae:	4d0a      	ldr	r5, [pc, #40]	; (80057d8 <__libc_init_array+0x40>)
 80057b0:	4c0a      	ldr	r4, [pc, #40]	; (80057dc <__libc_init_array+0x44>)
 80057b2:	1b64      	subs	r4, r4, r5
 80057b4:	10a4      	asrs	r4, r4, #2
 80057b6:	42a6      	cmp	r6, r4
 80057b8:	d105      	bne.n	80057c6 <__libc_init_array+0x2e>
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c0:	4798      	blx	r3
 80057c2:	3601      	adds	r6, #1
 80057c4:	e7ee      	b.n	80057a4 <__libc_init_array+0xc>
 80057c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ca:	4798      	blx	r3
 80057cc:	3601      	adds	r6, #1
 80057ce:	e7f2      	b.n	80057b6 <__libc_init_array+0x1e>
 80057d0:	0800898c 	.word	0x0800898c
 80057d4:	0800898c 	.word	0x0800898c
 80057d8:	0800898c 	.word	0x0800898c
 80057dc:	08008990 	.word	0x08008990

080057e0 <memset>:
 80057e0:	4603      	mov	r3, r0
 80057e2:	4402      	add	r2, r0
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d100      	bne.n	80057ea <memset+0xa>
 80057e8:	4770      	bx	lr
 80057ea:	f803 1b01 	strb.w	r1, [r3], #1
 80057ee:	e7f9      	b.n	80057e4 <memset+0x4>

080057f0 <__cvt>:
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f6:	461f      	mov	r7, r3
 80057f8:	bfbb      	ittet	lt
 80057fa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80057fe:	461f      	movlt	r7, r3
 8005800:	2300      	movge	r3, #0
 8005802:	232d      	movlt	r3, #45	; 0x2d
 8005804:	b088      	sub	sp, #32
 8005806:	4614      	mov	r4, r2
 8005808:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800580a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800580c:	7013      	strb	r3, [r2, #0]
 800580e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005810:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005814:	f023 0820 	bic.w	r8, r3, #32
 8005818:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800581c:	d005      	beq.n	800582a <__cvt+0x3a>
 800581e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005822:	d100      	bne.n	8005826 <__cvt+0x36>
 8005824:	3501      	adds	r5, #1
 8005826:	2302      	movs	r3, #2
 8005828:	e000      	b.n	800582c <__cvt+0x3c>
 800582a:	2303      	movs	r3, #3
 800582c:	aa07      	add	r2, sp, #28
 800582e:	9204      	str	r2, [sp, #16]
 8005830:	aa06      	add	r2, sp, #24
 8005832:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005836:	e9cd 3500 	strd	r3, r5, [sp]
 800583a:	4622      	mov	r2, r4
 800583c:	463b      	mov	r3, r7
 800583e:	f000 fce7 	bl	8006210 <_dtoa_r>
 8005842:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005846:	4606      	mov	r6, r0
 8005848:	d102      	bne.n	8005850 <__cvt+0x60>
 800584a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800584c:	07db      	lsls	r3, r3, #31
 800584e:	d522      	bpl.n	8005896 <__cvt+0xa6>
 8005850:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005854:	eb06 0905 	add.w	r9, r6, r5
 8005858:	d110      	bne.n	800587c <__cvt+0x8c>
 800585a:	7833      	ldrb	r3, [r6, #0]
 800585c:	2b30      	cmp	r3, #48	; 0x30
 800585e:	d10a      	bne.n	8005876 <__cvt+0x86>
 8005860:	2200      	movs	r2, #0
 8005862:	2300      	movs	r3, #0
 8005864:	4620      	mov	r0, r4
 8005866:	4639      	mov	r1, r7
 8005868:	f7fb f89e 	bl	80009a8 <__aeabi_dcmpeq>
 800586c:	b918      	cbnz	r0, 8005876 <__cvt+0x86>
 800586e:	f1c5 0501 	rsb	r5, r5, #1
 8005872:	f8ca 5000 	str.w	r5, [sl]
 8005876:	f8da 3000 	ldr.w	r3, [sl]
 800587a:	4499      	add	r9, r3
 800587c:	2200      	movs	r2, #0
 800587e:	2300      	movs	r3, #0
 8005880:	4620      	mov	r0, r4
 8005882:	4639      	mov	r1, r7
 8005884:	f7fb f890 	bl	80009a8 <__aeabi_dcmpeq>
 8005888:	b108      	cbz	r0, 800588e <__cvt+0x9e>
 800588a:	f8cd 901c 	str.w	r9, [sp, #28]
 800588e:	2230      	movs	r2, #48	; 0x30
 8005890:	9b07      	ldr	r3, [sp, #28]
 8005892:	454b      	cmp	r3, r9
 8005894:	d307      	bcc.n	80058a6 <__cvt+0xb6>
 8005896:	4630      	mov	r0, r6
 8005898:	9b07      	ldr	r3, [sp, #28]
 800589a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800589c:	1b9b      	subs	r3, r3, r6
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	b008      	add	sp, #32
 80058a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a6:	1c59      	adds	r1, r3, #1
 80058a8:	9107      	str	r1, [sp, #28]
 80058aa:	701a      	strb	r2, [r3, #0]
 80058ac:	e7f0      	b.n	8005890 <__cvt+0xa0>

080058ae <__exponent>:
 80058ae:	4603      	mov	r3, r0
 80058b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058b2:	2900      	cmp	r1, #0
 80058b4:	f803 2b02 	strb.w	r2, [r3], #2
 80058b8:	bfb6      	itet	lt
 80058ba:	222d      	movlt	r2, #45	; 0x2d
 80058bc:	222b      	movge	r2, #43	; 0x2b
 80058be:	4249      	neglt	r1, r1
 80058c0:	2909      	cmp	r1, #9
 80058c2:	7042      	strb	r2, [r0, #1]
 80058c4:	dd2b      	ble.n	800591e <__exponent+0x70>
 80058c6:	f10d 0407 	add.w	r4, sp, #7
 80058ca:	46a4      	mov	ip, r4
 80058cc:	270a      	movs	r7, #10
 80058ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80058d2:	460a      	mov	r2, r1
 80058d4:	46a6      	mov	lr, r4
 80058d6:	fb07 1516 	mls	r5, r7, r6, r1
 80058da:	2a63      	cmp	r2, #99	; 0x63
 80058dc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80058e0:	4631      	mov	r1, r6
 80058e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80058e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058ea:	dcf0      	bgt.n	80058ce <__exponent+0x20>
 80058ec:	3130      	adds	r1, #48	; 0x30
 80058ee:	f1ae 0502 	sub.w	r5, lr, #2
 80058f2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058f6:	4629      	mov	r1, r5
 80058f8:	1c44      	adds	r4, r0, #1
 80058fa:	4561      	cmp	r1, ip
 80058fc:	d30a      	bcc.n	8005914 <__exponent+0x66>
 80058fe:	f10d 0209 	add.w	r2, sp, #9
 8005902:	eba2 020e 	sub.w	r2, r2, lr
 8005906:	4565      	cmp	r5, ip
 8005908:	bf88      	it	hi
 800590a:	2200      	movhi	r2, #0
 800590c:	4413      	add	r3, r2
 800590e:	1a18      	subs	r0, r3, r0
 8005910:	b003      	add	sp, #12
 8005912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005914:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005918:	f804 2f01 	strb.w	r2, [r4, #1]!
 800591c:	e7ed      	b.n	80058fa <__exponent+0x4c>
 800591e:	2330      	movs	r3, #48	; 0x30
 8005920:	3130      	adds	r1, #48	; 0x30
 8005922:	7083      	strb	r3, [r0, #2]
 8005924:	70c1      	strb	r1, [r0, #3]
 8005926:	1d03      	adds	r3, r0, #4
 8005928:	e7f1      	b.n	800590e <__exponent+0x60>
	...

0800592c <_printf_float>:
 800592c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005930:	b091      	sub	sp, #68	; 0x44
 8005932:	460c      	mov	r4, r1
 8005934:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005938:	4616      	mov	r6, r2
 800593a:	461f      	mov	r7, r3
 800593c:	4605      	mov	r5, r0
 800593e:	f001 fa55 	bl	8006dec <_localeconv_r>
 8005942:	6803      	ldr	r3, [r0, #0]
 8005944:	4618      	mov	r0, r3
 8005946:	9309      	str	r3, [sp, #36]	; 0x24
 8005948:	f7fa fc02 	bl	8000150 <strlen>
 800594c:	2300      	movs	r3, #0
 800594e:	930e      	str	r3, [sp, #56]	; 0x38
 8005950:	f8d8 3000 	ldr.w	r3, [r8]
 8005954:	900a      	str	r0, [sp, #40]	; 0x28
 8005956:	3307      	adds	r3, #7
 8005958:	f023 0307 	bic.w	r3, r3, #7
 800595c:	f103 0208 	add.w	r2, r3, #8
 8005960:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005964:	f8d4 b000 	ldr.w	fp, [r4]
 8005968:	f8c8 2000 	str.w	r2, [r8]
 800596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005970:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005974:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005978:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800597c:	930b      	str	r3, [sp, #44]	; 0x2c
 800597e:	f04f 32ff 	mov.w	r2, #4294967295
 8005982:	4640      	mov	r0, r8
 8005984:	4b9c      	ldr	r3, [pc, #624]	; (8005bf8 <_printf_float+0x2cc>)
 8005986:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005988:	f7fb f840 	bl	8000a0c <__aeabi_dcmpun>
 800598c:	bb70      	cbnz	r0, 80059ec <_printf_float+0xc0>
 800598e:	f04f 32ff 	mov.w	r2, #4294967295
 8005992:	4640      	mov	r0, r8
 8005994:	4b98      	ldr	r3, [pc, #608]	; (8005bf8 <_printf_float+0x2cc>)
 8005996:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005998:	f7fb f81a 	bl	80009d0 <__aeabi_dcmple>
 800599c:	bb30      	cbnz	r0, 80059ec <_printf_float+0xc0>
 800599e:	2200      	movs	r2, #0
 80059a0:	2300      	movs	r3, #0
 80059a2:	4640      	mov	r0, r8
 80059a4:	4651      	mov	r1, sl
 80059a6:	f7fb f809 	bl	80009bc <__aeabi_dcmplt>
 80059aa:	b110      	cbz	r0, 80059b2 <_printf_float+0x86>
 80059ac:	232d      	movs	r3, #45	; 0x2d
 80059ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b2:	4b92      	ldr	r3, [pc, #584]	; (8005bfc <_printf_float+0x2d0>)
 80059b4:	4892      	ldr	r0, [pc, #584]	; (8005c00 <_printf_float+0x2d4>)
 80059b6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80059ba:	bf94      	ite	ls
 80059bc:	4698      	movls	r8, r3
 80059be:	4680      	movhi	r8, r0
 80059c0:	2303      	movs	r3, #3
 80059c2:	f04f 0a00 	mov.w	sl, #0
 80059c6:	6123      	str	r3, [r4, #16]
 80059c8:	f02b 0304 	bic.w	r3, fp, #4
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	4633      	mov	r3, r6
 80059d0:	4621      	mov	r1, r4
 80059d2:	4628      	mov	r0, r5
 80059d4:	9700      	str	r7, [sp, #0]
 80059d6:	aa0f      	add	r2, sp, #60	; 0x3c
 80059d8:	f000 f9d4 	bl	8005d84 <_printf_common>
 80059dc:	3001      	adds	r0, #1
 80059de:	f040 8090 	bne.w	8005b02 <_printf_float+0x1d6>
 80059e2:	f04f 30ff 	mov.w	r0, #4294967295
 80059e6:	b011      	add	sp, #68	; 0x44
 80059e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ec:	4642      	mov	r2, r8
 80059ee:	4653      	mov	r3, sl
 80059f0:	4640      	mov	r0, r8
 80059f2:	4651      	mov	r1, sl
 80059f4:	f7fb f80a 	bl	8000a0c <__aeabi_dcmpun>
 80059f8:	b148      	cbz	r0, 8005a0e <_printf_float+0xe2>
 80059fa:	f1ba 0f00 	cmp.w	sl, #0
 80059fe:	bfb8      	it	lt
 8005a00:	232d      	movlt	r3, #45	; 0x2d
 8005a02:	4880      	ldr	r0, [pc, #512]	; (8005c04 <_printf_float+0x2d8>)
 8005a04:	bfb8      	it	lt
 8005a06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a0a:	4b7f      	ldr	r3, [pc, #508]	; (8005c08 <_printf_float+0x2dc>)
 8005a0c:	e7d3      	b.n	80059b6 <_printf_float+0x8a>
 8005a0e:	6863      	ldr	r3, [r4, #4]
 8005a10:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	d142      	bne.n	8005a9e <_printf_float+0x172>
 8005a18:	2306      	movs	r3, #6
 8005a1a:	6063      	str	r3, [r4, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	9206      	str	r2, [sp, #24]
 8005a20:	aa0e      	add	r2, sp, #56	; 0x38
 8005a22:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005a26:	aa0d      	add	r2, sp, #52	; 0x34
 8005a28:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005a2c:	9203      	str	r2, [sp, #12]
 8005a2e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005a32:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005a36:	6023      	str	r3, [r4, #0]
 8005a38:	6863      	ldr	r3, [r4, #4]
 8005a3a:	4642      	mov	r2, r8
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	4628      	mov	r0, r5
 8005a40:	4653      	mov	r3, sl
 8005a42:	910b      	str	r1, [sp, #44]	; 0x2c
 8005a44:	f7ff fed4 	bl	80057f0 <__cvt>
 8005a48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a4a:	4680      	mov	r8, r0
 8005a4c:	2947      	cmp	r1, #71	; 0x47
 8005a4e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005a50:	d108      	bne.n	8005a64 <_printf_float+0x138>
 8005a52:	1cc8      	adds	r0, r1, #3
 8005a54:	db02      	blt.n	8005a5c <_printf_float+0x130>
 8005a56:	6863      	ldr	r3, [r4, #4]
 8005a58:	4299      	cmp	r1, r3
 8005a5a:	dd40      	ble.n	8005ade <_printf_float+0x1b2>
 8005a5c:	f1a9 0902 	sub.w	r9, r9, #2
 8005a60:	fa5f f989 	uxtb.w	r9, r9
 8005a64:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a68:	d81f      	bhi.n	8005aaa <_printf_float+0x17e>
 8005a6a:	464a      	mov	r2, r9
 8005a6c:	3901      	subs	r1, #1
 8005a6e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a72:	910d      	str	r1, [sp, #52]	; 0x34
 8005a74:	f7ff ff1b 	bl	80058ae <__exponent>
 8005a78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a7a:	4682      	mov	sl, r0
 8005a7c:	1813      	adds	r3, r2, r0
 8005a7e:	2a01      	cmp	r2, #1
 8005a80:	6123      	str	r3, [r4, #16]
 8005a82:	dc02      	bgt.n	8005a8a <_printf_float+0x15e>
 8005a84:	6822      	ldr	r2, [r4, #0]
 8005a86:	07d2      	lsls	r2, r2, #31
 8005a88:	d501      	bpl.n	8005a8e <_printf_float+0x162>
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	6123      	str	r3, [r4, #16]
 8005a8e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d09b      	beq.n	80059ce <_printf_float+0xa2>
 8005a96:	232d      	movs	r3, #45	; 0x2d
 8005a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a9c:	e797      	b.n	80059ce <_printf_float+0xa2>
 8005a9e:	2947      	cmp	r1, #71	; 0x47
 8005aa0:	d1bc      	bne.n	8005a1c <_printf_float+0xf0>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1ba      	bne.n	8005a1c <_printf_float+0xf0>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e7b7      	b.n	8005a1a <_printf_float+0xee>
 8005aaa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005aae:	d118      	bne.n	8005ae2 <_printf_float+0x1b6>
 8005ab0:	2900      	cmp	r1, #0
 8005ab2:	6863      	ldr	r3, [r4, #4]
 8005ab4:	dd0b      	ble.n	8005ace <_printf_float+0x1a2>
 8005ab6:	6121      	str	r1, [r4, #16]
 8005ab8:	b913      	cbnz	r3, 8005ac0 <_printf_float+0x194>
 8005aba:	6822      	ldr	r2, [r4, #0]
 8005abc:	07d0      	lsls	r0, r2, #31
 8005abe:	d502      	bpl.n	8005ac6 <_printf_float+0x19a>
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	440b      	add	r3, r1
 8005ac4:	6123      	str	r3, [r4, #16]
 8005ac6:	f04f 0a00 	mov.w	sl, #0
 8005aca:	65a1      	str	r1, [r4, #88]	; 0x58
 8005acc:	e7df      	b.n	8005a8e <_printf_float+0x162>
 8005ace:	b913      	cbnz	r3, 8005ad6 <_printf_float+0x1aa>
 8005ad0:	6822      	ldr	r2, [r4, #0]
 8005ad2:	07d2      	lsls	r2, r2, #31
 8005ad4:	d501      	bpl.n	8005ada <_printf_float+0x1ae>
 8005ad6:	3302      	adds	r3, #2
 8005ad8:	e7f4      	b.n	8005ac4 <_printf_float+0x198>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e7f2      	b.n	8005ac4 <_printf_float+0x198>
 8005ade:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ae4:	4299      	cmp	r1, r3
 8005ae6:	db05      	blt.n	8005af4 <_printf_float+0x1c8>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	6121      	str	r1, [r4, #16]
 8005aec:	07d8      	lsls	r0, r3, #31
 8005aee:	d5ea      	bpl.n	8005ac6 <_printf_float+0x19a>
 8005af0:	1c4b      	adds	r3, r1, #1
 8005af2:	e7e7      	b.n	8005ac4 <_printf_float+0x198>
 8005af4:	2900      	cmp	r1, #0
 8005af6:	bfcc      	ite	gt
 8005af8:	2201      	movgt	r2, #1
 8005afa:	f1c1 0202 	rsble	r2, r1, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	e7e0      	b.n	8005ac4 <_printf_float+0x198>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	055a      	lsls	r2, r3, #21
 8005b06:	d407      	bmi.n	8005b18 <_printf_float+0x1ec>
 8005b08:	6923      	ldr	r3, [r4, #16]
 8005b0a:	4642      	mov	r2, r8
 8005b0c:	4631      	mov	r1, r6
 8005b0e:	4628      	mov	r0, r5
 8005b10:	47b8      	blx	r7
 8005b12:	3001      	adds	r0, #1
 8005b14:	d12b      	bne.n	8005b6e <_printf_float+0x242>
 8005b16:	e764      	b.n	80059e2 <_printf_float+0xb6>
 8005b18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b1c:	f240 80dd 	bls.w	8005cda <_printf_float+0x3ae>
 8005b20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b24:	2200      	movs	r2, #0
 8005b26:	2300      	movs	r3, #0
 8005b28:	f7fa ff3e 	bl	80009a8 <__aeabi_dcmpeq>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d033      	beq.n	8005b98 <_printf_float+0x26c>
 8005b30:	2301      	movs	r3, #1
 8005b32:	4631      	mov	r1, r6
 8005b34:	4628      	mov	r0, r5
 8005b36:	4a35      	ldr	r2, [pc, #212]	; (8005c0c <_printf_float+0x2e0>)
 8005b38:	47b8      	blx	r7
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	f43f af51 	beq.w	80059e2 <_printf_float+0xb6>
 8005b40:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b44:	429a      	cmp	r2, r3
 8005b46:	db02      	blt.n	8005b4e <_printf_float+0x222>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	07d8      	lsls	r0, r3, #31
 8005b4c:	d50f      	bpl.n	8005b6e <_printf_float+0x242>
 8005b4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b52:	4631      	mov	r1, r6
 8005b54:	4628      	mov	r0, r5
 8005b56:	47b8      	blx	r7
 8005b58:	3001      	adds	r0, #1
 8005b5a:	f43f af42 	beq.w	80059e2 <_printf_float+0xb6>
 8005b5e:	f04f 0800 	mov.w	r8, #0
 8005b62:	f104 091a 	add.w	r9, r4, #26
 8005b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	4543      	cmp	r3, r8
 8005b6c:	dc09      	bgt.n	8005b82 <_printf_float+0x256>
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	079b      	lsls	r3, r3, #30
 8005b72:	f100 8102 	bmi.w	8005d7a <_printf_float+0x44e>
 8005b76:	68e0      	ldr	r0, [r4, #12]
 8005b78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b7a:	4298      	cmp	r0, r3
 8005b7c:	bfb8      	it	lt
 8005b7e:	4618      	movlt	r0, r3
 8005b80:	e731      	b.n	80059e6 <_printf_float+0xba>
 8005b82:	2301      	movs	r3, #1
 8005b84:	464a      	mov	r2, r9
 8005b86:	4631      	mov	r1, r6
 8005b88:	4628      	mov	r0, r5
 8005b8a:	47b8      	blx	r7
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	f43f af28 	beq.w	80059e2 <_printf_float+0xb6>
 8005b92:	f108 0801 	add.w	r8, r8, #1
 8005b96:	e7e6      	b.n	8005b66 <_printf_float+0x23a>
 8005b98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	dc38      	bgt.n	8005c10 <_printf_float+0x2e4>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	4631      	mov	r1, r6
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	4a19      	ldr	r2, [pc, #100]	; (8005c0c <_printf_float+0x2e0>)
 8005ba6:	47b8      	blx	r7
 8005ba8:	3001      	adds	r0, #1
 8005baa:	f43f af1a 	beq.w	80059e2 <_printf_float+0xb6>
 8005bae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	d102      	bne.n	8005bbc <_printf_float+0x290>
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	07d9      	lsls	r1, r3, #31
 8005bba:	d5d8      	bpl.n	8005b6e <_printf_float+0x242>
 8005bbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bc0:	4631      	mov	r1, r6
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	47b8      	blx	r7
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	f43f af0b 	beq.w	80059e2 <_printf_float+0xb6>
 8005bcc:	f04f 0900 	mov.w	r9, #0
 8005bd0:	f104 0a1a 	add.w	sl, r4, #26
 8005bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bd6:	425b      	negs	r3, r3
 8005bd8:	454b      	cmp	r3, r9
 8005bda:	dc01      	bgt.n	8005be0 <_printf_float+0x2b4>
 8005bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bde:	e794      	b.n	8005b0a <_printf_float+0x1de>
 8005be0:	2301      	movs	r3, #1
 8005be2:	4652      	mov	r2, sl
 8005be4:	4631      	mov	r1, r6
 8005be6:	4628      	mov	r0, r5
 8005be8:	47b8      	blx	r7
 8005bea:	3001      	adds	r0, #1
 8005bec:	f43f aef9 	beq.w	80059e2 <_printf_float+0xb6>
 8005bf0:	f109 0901 	add.w	r9, r9, #1
 8005bf4:	e7ee      	b.n	8005bd4 <_printf_float+0x2a8>
 8005bf6:	bf00      	nop
 8005bf8:	7fefffff 	.word	0x7fefffff
 8005bfc:	080085b0 	.word	0x080085b0
 8005c00:	080085b4 	.word	0x080085b4
 8005c04:	080085bc 	.word	0x080085bc
 8005c08:	080085b8 	.word	0x080085b8
 8005c0c:	080085c0 	.word	0x080085c0
 8005c10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c14:	429a      	cmp	r2, r3
 8005c16:	bfa8      	it	ge
 8005c18:	461a      	movge	r2, r3
 8005c1a:	2a00      	cmp	r2, #0
 8005c1c:	4691      	mov	r9, r2
 8005c1e:	dc37      	bgt.n	8005c90 <_printf_float+0x364>
 8005c20:	f04f 0b00 	mov.w	fp, #0
 8005c24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c28:	f104 021a 	add.w	r2, r4, #26
 8005c2c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005c30:	ebaa 0309 	sub.w	r3, sl, r9
 8005c34:	455b      	cmp	r3, fp
 8005c36:	dc33      	bgt.n	8005ca0 <_printf_float+0x374>
 8005c38:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	db3b      	blt.n	8005cb8 <_printf_float+0x38c>
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	07da      	lsls	r2, r3, #31
 8005c44:	d438      	bmi.n	8005cb8 <_printf_float+0x38c>
 8005c46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c48:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c4a:	eba2 030a 	sub.w	r3, r2, sl
 8005c4e:	eba2 0901 	sub.w	r9, r2, r1
 8005c52:	4599      	cmp	r9, r3
 8005c54:	bfa8      	it	ge
 8005c56:	4699      	movge	r9, r3
 8005c58:	f1b9 0f00 	cmp.w	r9, #0
 8005c5c:	dc34      	bgt.n	8005cc8 <_printf_float+0x39c>
 8005c5e:	f04f 0800 	mov.w	r8, #0
 8005c62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c66:	f104 0a1a 	add.w	sl, r4, #26
 8005c6a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c6e:	1a9b      	subs	r3, r3, r2
 8005c70:	eba3 0309 	sub.w	r3, r3, r9
 8005c74:	4543      	cmp	r3, r8
 8005c76:	f77f af7a 	ble.w	8005b6e <_printf_float+0x242>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4652      	mov	r2, sl
 8005c7e:	4631      	mov	r1, r6
 8005c80:	4628      	mov	r0, r5
 8005c82:	47b8      	blx	r7
 8005c84:	3001      	adds	r0, #1
 8005c86:	f43f aeac 	beq.w	80059e2 <_printf_float+0xb6>
 8005c8a:	f108 0801 	add.w	r8, r8, #1
 8005c8e:	e7ec      	b.n	8005c6a <_printf_float+0x33e>
 8005c90:	4613      	mov	r3, r2
 8005c92:	4631      	mov	r1, r6
 8005c94:	4642      	mov	r2, r8
 8005c96:	4628      	mov	r0, r5
 8005c98:	47b8      	blx	r7
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	d1c0      	bne.n	8005c20 <_printf_float+0x2f4>
 8005c9e:	e6a0      	b.n	80059e2 <_printf_float+0xb6>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ca8:	47b8      	blx	r7
 8005caa:	3001      	adds	r0, #1
 8005cac:	f43f ae99 	beq.w	80059e2 <_printf_float+0xb6>
 8005cb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cb2:	f10b 0b01 	add.w	fp, fp, #1
 8005cb6:	e7b9      	b.n	8005c2c <_printf_float+0x300>
 8005cb8:	4631      	mov	r1, r6
 8005cba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	47b8      	blx	r7
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	d1bf      	bne.n	8005c46 <_printf_float+0x31a>
 8005cc6:	e68c      	b.n	80059e2 <_printf_float+0xb6>
 8005cc8:	464b      	mov	r3, r9
 8005cca:	4631      	mov	r1, r6
 8005ccc:	4628      	mov	r0, r5
 8005cce:	eb08 020a 	add.w	r2, r8, sl
 8005cd2:	47b8      	blx	r7
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d1c2      	bne.n	8005c5e <_printf_float+0x332>
 8005cd8:	e683      	b.n	80059e2 <_printf_float+0xb6>
 8005cda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cdc:	2a01      	cmp	r2, #1
 8005cde:	dc01      	bgt.n	8005ce4 <_printf_float+0x3b8>
 8005ce0:	07db      	lsls	r3, r3, #31
 8005ce2:	d537      	bpl.n	8005d54 <_printf_float+0x428>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	4642      	mov	r2, r8
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4628      	mov	r0, r5
 8005cec:	47b8      	blx	r7
 8005cee:	3001      	adds	r0, #1
 8005cf0:	f43f ae77 	beq.w	80059e2 <_printf_float+0xb6>
 8005cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cf8:	4631      	mov	r1, r6
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	47b8      	blx	r7
 8005cfe:	3001      	adds	r0, #1
 8005d00:	f43f ae6f 	beq.w	80059e2 <_printf_float+0xb6>
 8005d04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f7fa fe4c 	bl	80009a8 <__aeabi_dcmpeq>
 8005d10:	b9d8      	cbnz	r0, 8005d4a <_printf_float+0x41e>
 8005d12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d14:	f108 0201 	add.w	r2, r8, #1
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	47b8      	blx	r7
 8005d20:	3001      	adds	r0, #1
 8005d22:	d10e      	bne.n	8005d42 <_printf_float+0x416>
 8005d24:	e65d      	b.n	80059e2 <_printf_float+0xb6>
 8005d26:	2301      	movs	r3, #1
 8005d28:	464a      	mov	r2, r9
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	47b8      	blx	r7
 8005d30:	3001      	adds	r0, #1
 8005d32:	f43f ae56 	beq.w	80059e2 <_printf_float+0xb6>
 8005d36:	f108 0801 	add.w	r8, r8, #1
 8005d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	4543      	cmp	r3, r8
 8005d40:	dcf1      	bgt.n	8005d26 <_printf_float+0x3fa>
 8005d42:	4653      	mov	r3, sl
 8005d44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d48:	e6e0      	b.n	8005b0c <_printf_float+0x1e0>
 8005d4a:	f04f 0800 	mov.w	r8, #0
 8005d4e:	f104 091a 	add.w	r9, r4, #26
 8005d52:	e7f2      	b.n	8005d3a <_printf_float+0x40e>
 8005d54:	2301      	movs	r3, #1
 8005d56:	4642      	mov	r2, r8
 8005d58:	e7df      	b.n	8005d1a <_printf_float+0x3ee>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	464a      	mov	r2, r9
 8005d5e:	4631      	mov	r1, r6
 8005d60:	4628      	mov	r0, r5
 8005d62:	47b8      	blx	r7
 8005d64:	3001      	adds	r0, #1
 8005d66:	f43f ae3c 	beq.w	80059e2 <_printf_float+0xb6>
 8005d6a:	f108 0801 	add.w	r8, r8, #1
 8005d6e:	68e3      	ldr	r3, [r4, #12]
 8005d70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d72:	1a5b      	subs	r3, r3, r1
 8005d74:	4543      	cmp	r3, r8
 8005d76:	dcf0      	bgt.n	8005d5a <_printf_float+0x42e>
 8005d78:	e6fd      	b.n	8005b76 <_printf_float+0x24a>
 8005d7a:	f04f 0800 	mov.w	r8, #0
 8005d7e:	f104 0919 	add.w	r9, r4, #25
 8005d82:	e7f4      	b.n	8005d6e <_printf_float+0x442>

08005d84 <_printf_common>:
 8005d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d88:	4616      	mov	r6, r2
 8005d8a:	4699      	mov	r9, r3
 8005d8c:	688a      	ldr	r2, [r1, #8]
 8005d8e:	690b      	ldr	r3, [r1, #16]
 8005d90:	4607      	mov	r7, r0
 8005d92:	4293      	cmp	r3, r2
 8005d94:	bfb8      	it	lt
 8005d96:	4613      	movlt	r3, r2
 8005d98:	6033      	str	r3, [r6, #0]
 8005d9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d9e:	460c      	mov	r4, r1
 8005da0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005da4:	b10a      	cbz	r2, 8005daa <_printf_common+0x26>
 8005da6:	3301      	adds	r3, #1
 8005da8:	6033      	str	r3, [r6, #0]
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	0699      	lsls	r1, r3, #26
 8005dae:	bf42      	ittt	mi
 8005db0:	6833      	ldrmi	r3, [r6, #0]
 8005db2:	3302      	addmi	r3, #2
 8005db4:	6033      	strmi	r3, [r6, #0]
 8005db6:	6825      	ldr	r5, [r4, #0]
 8005db8:	f015 0506 	ands.w	r5, r5, #6
 8005dbc:	d106      	bne.n	8005dcc <_printf_common+0x48>
 8005dbe:	f104 0a19 	add.w	sl, r4, #25
 8005dc2:	68e3      	ldr	r3, [r4, #12]
 8005dc4:	6832      	ldr	r2, [r6, #0]
 8005dc6:	1a9b      	subs	r3, r3, r2
 8005dc8:	42ab      	cmp	r3, r5
 8005dca:	dc28      	bgt.n	8005e1e <_printf_common+0x9a>
 8005dcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dd0:	1e13      	subs	r3, r2, #0
 8005dd2:	6822      	ldr	r2, [r4, #0]
 8005dd4:	bf18      	it	ne
 8005dd6:	2301      	movne	r3, #1
 8005dd8:	0692      	lsls	r2, r2, #26
 8005dda:	d42d      	bmi.n	8005e38 <_printf_common+0xb4>
 8005ddc:	4649      	mov	r1, r9
 8005dde:	4638      	mov	r0, r7
 8005de0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005de4:	47c0      	blx	r8
 8005de6:	3001      	adds	r0, #1
 8005de8:	d020      	beq.n	8005e2c <_printf_common+0xa8>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	68e5      	ldr	r5, [r4, #12]
 8005dee:	f003 0306 	and.w	r3, r3, #6
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	bf18      	it	ne
 8005df6:	2500      	movne	r5, #0
 8005df8:	6832      	ldr	r2, [r6, #0]
 8005dfa:	f04f 0600 	mov.w	r6, #0
 8005dfe:	68a3      	ldr	r3, [r4, #8]
 8005e00:	bf08      	it	eq
 8005e02:	1aad      	subeq	r5, r5, r2
 8005e04:	6922      	ldr	r2, [r4, #16]
 8005e06:	bf08      	it	eq
 8005e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	bfc4      	itt	gt
 8005e10:	1a9b      	subgt	r3, r3, r2
 8005e12:	18ed      	addgt	r5, r5, r3
 8005e14:	341a      	adds	r4, #26
 8005e16:	42b5      	cmp	r5, r6
 8005e18:	d11a      	bne.n	8005e50 <_printf_common+0xcc>
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	e008      	b.n	8005e30 <_printf_common+0xac>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	4652      	mov	r2, sl
 8005e22:	4649      	mov	r1, r9
 8005e24:	4638      	mov	r0, r7
 8005e26:	47c0      	blx	r8
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d103      	bne.n	8005e34 <_printf_common+0xb0>
 8005e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e34:	3501      	adds	r5, #1
 8005e36:	e7c4      	b.n	8005dc2 <_printf_common+0x3e>
 8005e38:	2030      	movs	r0, #48	; 0x30
 8005e3a:	18e1      	adds	r1, r4, r3
 8005e3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e40:	1c5a      	adds	r2, r3, #1
 8005e42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e46:	4422      	add	r2, r4
 8005e48:	3302      	adds	r3, #2
 8005e4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e4e:	e7c5      	b.n	8005ddc <_printf_common+0x58>
 8005e50:	2301      	movs	r3, #1
 8005e52:	4622      	mov	r2, r4
 8005e54:	4649      	mov	r1, r9
 8005e56:	4638      	mov	r0, r7
 8005e58:	47c0      	blx	r8
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d0e6      	beq.n	8005e2c <_printf_common+0xa8>
 8005e5e:	3601      	adds	r6, #1
 8005e60:	e7d9      	b.n	8005e16 <_printf_common+0x92>
	...

08005e64 <_printf_i>:
 8005e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e68:	460c      	mov	r4, r1
 8005e6a:	7e27      	ldrb	r7, [r4, #24]
 8005e6c:	4691      	mov	r9, r2
 8005e6e:	2f78      	cmp	r7, #120	; 0x78
 8005e70:	4680      	mov	r8, r0
 8005e72:	469a      	mov	sl, r3
 8005e74:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e7a:	d807      	bhi.n	8005e8c <_printf_i+0x28>
 8005e7c:	2f62      	cmp	r7, #98	; 0x62
 8005e7e:	d80a      	bhi.n	8005e96 <_printf_i+0x32>
 8005e80:	2f00      	cmp	r7, #0
 8005e82:	f000 80d9 	beq.w	8006038 <_printf_i+0x1d4>
 8005e86:	2f58      	cmp	r7, #88	; 0x58
 8005e88:	f000 80a4 	beq.w	8005fd4 <_printf_i+0x170>
 8005e8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e94:	e03a      	b.n	8005f0c <_printf_i+0xa8>
 8005e96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e9a:	2b15      	cmp	r3, #21
 8005e9c:	d8f6      	bhi.n	8005e8c <_printf_i+0x28>
 8005e9e:	a001      	add	r0, pc, #4	; (adr r0, 8005ea4 <_printf_i+0x40>)
 8005ea0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ea4:	08005efd 	.word	0x08005efd
 8005ea8:	08005f11 	.word	0x08005f11
 8005eac:	08005e8d 	.word	0x08005e8d
 8005eb0:	08005e8d 	.word	0x08005e8d
 8005eb4:	08005e8d 	.word	0x08005e8d
 8005eb8:	08005e8d 	.word	0x08005e8d
 8005ebc:	08005f11 	.word	0x08005f11
 8005ec0:	08005e8d 	.word	0x08005e8d
 8005ec4:	08005e8d 	.word	0x08005e8d
 8005ec8:	08005e8d 	.word	0x08005e8d
 8005ecc:	08005e8d 	.word	0x08005e8d
 8005ed0:	0800601f 	.word	0x0800601f
 8005ed4:	08005f41 	.word	0x08005f41
 8005ed8:	08006001 	.word	0x08006001
 8005edc:	08005e8d 	.word	0x08005e8d
 8005ee0:	08005e8d 	.word	0x08005e8d
 8005ee4:	08006041 	.word	0x08006041
 8005ee8:	08005e8d 	.word	0x08005e8d
 8005eec:	08005f41 	.word	0x08005f41
 8005ef0:	08005e8d 	.word	0x08005e8d
 8005ef4:	08005e8d 	.word	0x08005e8d
 8005ef8:	08006009 	.word	0x08006009
 8005efc:	680b      	ldr	r3, [r1, #0]
 8005efe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f02:	1d1a      	adds	r2, r3, #4
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	600a      	str	r2, [r1, #0]
 8005f08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e0a4      	b.n	800605a <_printf_i+0x1f6>
 8005f10:	6825      	ldr	r5, [r4, #0]
 8005f12:	6808      	ldr	r0, [r1, #0]
 8005f14:	062e      	lsls	r6, r5, #24
 8005f16:	f100 0304 	add.w	r3, r0, #4
 8005f1a:	d50a      	bpl.n	8005f32 <_printf_i+0xce>
 8005f1c:	6805      	ldr	r5, [r0, #0]
 8005f1e:	600b      	str	r3, [r1, #0]
 8005f20:	2d00      	cmp	r5, #0
 8005f22:	da03      	bge.n	8005f2c <_printf_i+0xc8>
 8005f24:	232d      	movs	r3, #45	; 0x2d
 8005f26:	426d      	negs	r5, r5
 8005f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f2c:	230a      	movs	r3, #10
 8005f2e:	485e      	ldr	r0, [pc, #376]	; (80060a8 <_printf_i+0x244>)
 8005f30:	e019      	b.n	8005f66 <_printf_i+0x102>
 8005f32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f36:	6805      	ldr	r5, [r0, #0]
 8005f38:	600b      	str	r3, [r1, #0]
 8005f3a:	bf18      	it	ne
 8005f3c:	b22d      	sxthne	r5, r5
 8005f3e:	e7ef      	b.n	8005f20 <_printf_i+0xbc>
 8005f40:	680b      	ldr	r3, [r1, #0]
 8005f42:	6825      	ldr	r5, [r4, #0]
 8005f44:	1d18      	adds	r0, r3, #4
 8005f46:	6008      	str	r0, [r1, #0]
 8005f48:	0628      	lsls	r0, r5, #24
 8005f4a:	d501      	bpl.n	8005f50 <_printf_i+0xec>
 8005f4c:	681d      	ldr	r5, [r3, #0]
 8005f4e:	e002      	b.n	8005f56 <_printf_i+0xf2>
 8005f50:	0669      	lsls	r1, r5, #25
 8005f52:	d5fb      	bpl.n	8005f4c <_printf_i+0xe8>
 8005f54:	881d      	ldrh	r5, [r3, #0]
 8005f56:	2f6f      	cmp	r7, #111	; 0x6f
 8005f58:	bf0c      	ite	eq
 8005f5a:	2308      	moveq	r3, #8
 8005f5c:	230a      	movne	r3, #10
 8005f5e:	4852      	ldr	r0, [pc, #328]	; (80060a8 <_printf_i+0x244>)
 8005f60:	2100      	movs	r1, #0
 8005f62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f66:	6866      	ldr	r6, [r4, #4]
 8005f68:	2e00      	cmp	r6, #0
 8005f6a:	bfa8      	it	ge
 8005f6c:	6821      	ldrge	r1, [r4, #0]
 8005f6e:	60a6      	str	r6, [r4, #8]
 8005f70:	bfa4      	itt	ge
 8005f72:	f021 0104 	bicge.w	r1, r1, #4
 8005f76:	6021      	strge	r1, [r4, #0]
 8005f78:	b90d      	cbnz	r5, 8005f7e <_printf_i+0x11a>
 8005f7a:	2e00      	cmp	r6, #0
 8005f7c:	d04d      	beq.n	800601a <_printf_i+0x1b6>
 8005f7e:	4616      	mov	r6, r2
 8005f80:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f84:	fb03 5711 	mls	r7, r3, r1, r5
 8005f88:	5dc7      	ldrb	r7, [r0, r7]
 8005f8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f8e:	462f      	mov	r7, r5
 8005f90:	42bb      	cmp	r3, r7
 8005f92:	460d      	mov	r5, r1
 8005f94:	d9f4      	bls.n	8005f80 <_printf_i+0x11c>
 8005f96:	2b08      	cmp	r3, #8
 8005f98:	d10b      	bne.n	8005fb2 <_printf_i+0x14e>
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	07df      	lsls	r7, r3, #31
 8005f9e:	d508      	bpl.n	8005fb2 <_printf_i+0x14e>
 8005fa0:	6923      	ldr	r3, [r4, #16]
 8005fa2:	6861      	ldr	r1, [r4, #4]
 8005fa4:	4299      	cmp	r1, r3
 8005fa6:	bfde      	ittt	le
 8005fa8:	2330      	movle	r3, #48	; 0x30
 8005faa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fb2:	1b92      	subs	r2, r2, r6
 8005fb4:	6122      	str	r2, [r4, #16]
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	4621      	mov	r1, r4
 8005fba:	4640      	mov	r0, r8
 8005fbc:	f8cd a000 	str.w	sl, [sp]
 8005fc0:	aa03      	add	r2, sp, #12
 8005fc2:	f7ff fedf 	bl	8005d84 <_printf_common>
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	d14c      	bne.n	8006064 <_printf_i+0x200>
 8005fca:	f04f 30ff 	mov.w	r0, #4294967295
 8005fce:	b004      	add	sp, #16
 8005fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd4:	4834      	ldr	r0, [pc, #208]	; (80060a8 <_printf_i+0x244>)
 8005fd6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fda:	680e      	ldr	r6, [r1, #0]
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	f856 5b04 	ldr.w	r5, [r6], #4
 8005fe2:	061f      	lsls	r7, r3, #24
 8005fe4:	600e      	str	r6, [r1, #0]
 8005fe6:	d514      	bpl.n	8006012 <_printf_i+0x1ae>
 8005fe8:	07d9      	lsls	r1, r3, #31
 8005fea:	bf44      	itt	mi
 8005fec:	f043 0320 	orrmi.w	r3, r3, #32
 8005ff0:	6023      	strmi	r3, [r4, #0]
 8005ff2:	b91d      	cbnz	r5, 8005ffc <_printf_i+0x198>
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	f023 0320 	bic.w	r3, r3, #32
 8005ffa:	6023      	str	r3, [r4, #0]
 8005ffc:	2310      	movs	r3, #16
 8005ffe:	e7af      	b.n	8005f60 <_printf_i+0xfc>
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	f043 0320 	orr.w	r3, r3, #32
 8006006:	6023      	str	r3, [r4, #0]
 8006008:	2378      	movs	r3, #120	; 0x78
 800600a:	4828      	ldr	r0, [pc, #160]	; (80060ac <_printf_i+0x248>)
 800600c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006010:	e7e3      	b.n	8005fda <_printf_i+0x176>
 8006012:	065e      	lsls	r6, r3, #25
 8006014:	bf48      	it	mi
 8006016:	b2ad      	uxthmi	r5, r5
 8006018:	e7e6      	b.n	8005fe8 <_printf_i+0x184>
 800601a:	4616      	mov	r6, r2
 800601c:	e7bb      	b.n	8005f96 <_printf_i+0x132>
 800601e:	680b      	ldr	r3, [r1, #0]
 8006020:	6826      	ldr	r6, [r4, #0]
 8006022:	1d1d      	adds	r5, r3, #4
 8006024:	6960      	ldr	r0, [r4, #20]
 8006026:	600d      	str	r5, [r1, #0]
 8006028:	0635      	lsls	r5, r6, #24
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	d501      	bpl.n	8006032 <_printf_i+0x1ce>
 800602e:	6018      	str	r0, [r3, #0]
 8006030:	e002      	b.n	8006038 <_printf_i+0x1d4>
 8006032:	0671      	lsls	r1, r6, #25
 8006034:	d5fb      	bpl.n	800602e <_printf_i+0x1ca>
 8006036:	8018      	strh	r0, [r3, #0]
 8006038:	2300      	movs	r3, #0
 800603a:	4616      	mov	r6, r2
 800603c:	6123      	str	r3, [r4, #16]
 800603e:	e7ba      	b.n	8005fb6 <_printf_i+0x152>
 8006040:	680b      	ldr	r3, [r1, #0]
 8006042:	1d1a      	adds	r2, r3, #4
 8006044:	600a      	str	r2, [r1, #0]
 8006046:	681e      	ldr	r6, [r3, #0]
 8006048:	2100      	movs	r1, #0
 800604a:	4630      	mov	r0, r6
 800604c:	6862      	ldr	r2, [r4, #4]
 800604e:	f000 fed9 	bl	8006e04 <memchr>
 8006052:	b108      	cbz	r0, 8006058 <_printf_i+0x1f4>
 8006054:	1b80      	subs	r0, r0, r6
 8006056:	6060      	str	r0, [r4, #4]
 8006058:	6863      	ldr	r3, [r4, #4]
 800605a:	6123      	str	r3, [r4, #16]
 800605c:	2300      	movs	r3, #0
 800605e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006062:	e7a8      	b.n	8005fb6 <_printf_i+0x152>
 8006064:	4632      	mov	r2, r6
 8006066:	4649      	mov	r1, r9
 8006068:	4640      	mov	r0, r8
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	47d0      	blx	sl
 800606e:	3001      	adds	r0, #1
 8006070:	d0ab      	beq.n	8005fca <_printf_i+0x166>
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	079b      	lsls	r3, r3, #30
 8006076:	d413      	bmi.n	80060a0 <_printf_i+0x23c>
 8006078:	68e0      	ldr	r0, [r4, #12]
 800607a:	9b03      	ldr	r3, [sp, #12]
 800607c:	4298      	cmp	r0, r3
 800607e:	bfb8      	it	lt
 8006080:	4618      	movlt	r0, r3
 8006082:	e7a4      	b.n	8005fce <_printf_i+0x16a>
 8006084:	2301      	movs	r3, #1
 8006086:	4632      	mov	r2, r6
 8006088:	4649      	mov	r1, r9
 800608a:	4640      	mov	r0, r8
 800608c:	47d0      	blx	sl
 800608e:	3001      	adds	r0, #1
 8006090:	d09b      	beq.n	8005fca <_printf_i+0x166>
 8006092:	3501      	adds	r5, #1
 8006094:	68e3      	ldr	r3, [r4, #12]
 8006096:	9903      	ldr	r1, [sp, #12]
 8006098:	1a5b      	subs	r3, r3, r1
 800609a:	42ab      	cmp	r3, r5
 800609c:	dcf2      	bgt.n	8006084 <_printf_i+0x220>
 800609e:	e7eb      	b.n	8006078 <_printf_i+0x214>
 80060a0:	2500      	movs	r5, #0
 80060a2:	f104 0619 	add.w	r6, r4, #25
 80060a6:	e7f5      	b.n	8006094 <_printf_i+0x230>
 80060a8:	080085c2 	.word	0x080085c2
 80060ac:	080085d3 	.word	0x080085d3

080060b0 <siprintf>:
 80060b0:	b40e      	push	{r1, r2, r3}
 80060b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060b6:	b500      	push	{lr}
 80060b8:	b09c      	sub	sp, #112	; 0x70
 80060ba:	ab1d      	add	r3, sp, #116	; 0x74
 80060bc:	9002      	str	r0, [sp, #8]
 80060be:	9006      	str	r0, [sp, #24]
 80060c0:	9107      	str	r1, [sp, #28]
 80060c2:	9104      	str	r1, [sp, #16]
 80060c4:	4808      	ldr	r0, [pc, #32]	; (80060e8 <siprintf+0x38>)
 80060c6:	4909      	ldr	r1, [pc, #36]	; (80060ec <siprintf+0x3c>)
 80060c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80060cc:	9105      	str	r1, [sp, #20]
 80060ce:	6800      	ldr	r0, [r0, #0]
 80060d0:	a902      	add	r1, sp, #8
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	f001 fb44 	bl	8007760 <_svfiprintf_r>
 80060d8:	2200      	movs	r2, #0
 80060da:	9b02      	ldr	r3, [sp, #8]
 80060dc:	701a      	strb	r2, [r3, #0]
 80060de:	b01c      	add	sp, #112	; 0x70
 80060e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060e4:	b003      	add	sp, #12
 80060e6:	4770      	bx	lr
 80060e8:	2000000c 	.word	0x2000000c
 80060ec:	ffff0208 	.word	0xffff0208

080060f0 <quorem>:
 80060f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f4:	6903      	ldr	r3, [r0, #16]
 80060f6:	690c      	ldr	r4, [r1, #16]
 80060f8:	4607      	mov	r7, r0
 80060fa:	42a3      	cmp	r3, r4
 80060fc:	f2c0 8083 	blt.w	8006206 <quorem+0x116>
 8006100:	3c01      	subs	r4, #1
 8006102:	f100 0514 	add.w	r5, r0, #20
 8006106:	f101 0814 	add.w	r8, r1, #20
 800610a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006114:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006118:	3301      	adds	r3, #1
 800611a:	429a      	cmp	r2, r3
 800611c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006120:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006124:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006128:	d332      	bcc.n	8006190 <quorem+0xa0>
 800612a:	f04f 0e00 	mov.w	lr, #0
 800612e:	4640      	mov	r0, r8
 8006130:	46ac      	mov	ip, r5
 8006132:	46f2      	mov	sl, lr
 8006134:	f850 2b04 	ldr.w	r2, [r0], #4
 8006138:	b293      	uxth	r3, r2
 800613a:	fb06 e303 	mla	r3, r6, r3, lr
 800613e:	0c12      	lsrs	r2, r2, #16
 8006140:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006144:	fb06 e202 	mla	r2, r6, r2, lr
 8006148:	b29b      	uxth	r3, r3
 800614a:	ebaa 0303 	sub.w	r3, sl, r3
 800614e:	f8dc a000 	ldr.w	sl, [ip]
 8006152:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006156:	fa1f fa8a 	uxth.w	sl, sl
 800615a:	4453      	add	r3, sl
 800615c:	fa1f fa82 	uxth.w	sl, r2
 8006160:	f8dc 2000 	ldr.w	r2, [ip]
 8006164:	4581      	cmp	r9, r0
 8006166:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800616a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800616e:	b29b      	uxth	r3, r3
 8006170:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006174:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006178:	f84c 3b04 	str.w	r3, [ip], #4
 800617c:	d2da      	bcs.n	8006134 <quorem+0x44>
 800617e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006182:	b92b      	cbnz	r3, 8006190 <quorem+0xa0>
 8006184:	9b01      	ldr	r3, [sp, #4]
 8006186:	3b04      	subs	r3, #4
 8006188:	429d      	cmp	r5, r3
 800618a:	461a      	mov	r2, r3
 800618c:	d32f      	bcc.n	80061ee <quorem+0xfe>
 800618e:	613c      	str	r4, [r7, #16]
 8006190:	4638      	mov	r0, r7
 8006192:	f001 f8cd 	bl	8007330 <__mcmp>
 8006196:	2800      	cmp	r0, #0
 8006198:	db25      	blt.n	80061e6 <quorem+0xf6>
 800619a:	4628      	mov	r0, r5
 800619c:	f04f 0c00 	mov.w	ip, #0
 80061a0:	3601      	adds	r6, #1
 80061a2:	f858 1b04 	ldr.w	r1, [r8], #4
 80061a6:	f8d0 e000 	ldr.w	lr, [r0]
 80061aa:	b28b      	uxth	r3, r1
 80061ac:	ebac 0303 	sub.w	r3, ip, r3
 80061b0:	fa1f f28e 	uxth.w	r2, lr
 80061b4:	4413      	add	r3, r2
 80061b6:	0c0a      	lsrs	r2, r1, #16
 80061b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80061bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061c6:	45c1      	cmp	r9, r8
 80061c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80061cc:	f840 3b04 	str.w	r3, [r0], #4
 80061d0:	d2e7      	bcs.n	80061a2 <quorem+0xb2>
 80061d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061da:	b922      	cbnz	r2, 80061e6 <quorem+0xf6>
 80061dc:	3b04      	subs	r3, #4
 80061de:	429d      	cmp	r5, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	d30a      	bcc.n	80061fa <quorem+0x10a>
 80061e4:	613c      	str	r4, [r7, #16]
 80061e6:	4630      	mov	r0, r6
 80061e8:	b003      	add	sp, #12
 80061ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ee:	6812      	ldr	r2, [r2, #0]
 80061f0:	3b04      	subs	r3, #4
 80061f2:	2a00      	cmp	r2, #0
 80061f4:	d1cb      	bne.n	800618e <quorem+0x9e>
 80061f6:	3c01      	subs	r4, #1
 80061f8:	e7c6      	b.n	8006188 <quorem+0x98>
 80061fa:	6812      	ldr	r2, [r2, #0]
 80061fc:	3b04      	subs	r3, #4
 80061fe:	2a00      	cmp	r2, #0
 8006200:	d1f0      	bne.n	80061e4 <quorem+0xf4>
 8006202:	3c01      	subs	r4, #1
 8006204:	e7eb      	b.n	80061de <quorem+0xee>
 8006206:	2000      	movs	r0, #0
 8006208:	e7ee      	b.n	80061e8 <quorem+0xf8>
 800620a:	0000      	movs	r0, r0
 800620c:	0000      	movs	r0, r0
	...

08006210 <_dtoa_r>:
 8006210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006214:	4616      	mov	r6, r2
 8006216:	461f      	mov	r7, r3
 8006218:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800621a:	b099      	sub	sp, #100	; 0x64
 800621c:	4605      	mov	r5, r0
 800621e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006222:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006226:	b974      	cbnz	r4, 8006246 <_dtoa_r+0x36>
 8006228:	2010      	movs	r0, #16
 800622a:	f000 fde3 	bl	8006df4 <malloc>
 800622e:	4602      	mov	r2, r0
 8006230:	6268      	str	r0, [r5, #36]	; 0x24
 8006232:	b920      	cbnz	r0, 800623e <_dtoa_r+0x2e>
 8006234:	21ea      	movs	r1, #234	; 0xea
 8006236:	4bae      	ldr	r3, [pc, #696]	; (80064f0 <_dtoa_r+0x2e0>)
 8006238:	48ae      	ldr	r0, [pc, #696]	; (80064f4 <_dtoa_r+0x2e4>)
 800623a:	f001 fba1 	bl	8007980 <__assert_func>
 800623e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006242:	6004      	str	r4, [r0, #0]
 8006244:	60c4      	str	r4, [r0, #12]
 8006246:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006248:	6819      	ldr	r1, [r3, #0]
 800624a:	b151      	cbz	r1, 8006262 <_dtoa_r+0x52>
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	2301      	movs	r3, #1
 8006250:	4093      	lsls	r3, r2
 8006252:	604a      	str	r2, [r1, #4]
 8006254:	608b      	str	r3, [r1, #8]
 8006256:	4628      	mov	r0, r5
 8006258:	f000 fe30 	bl	8006ebc <_Bfree>
 800625c:	2200      	movs	r2, #0
 800625e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	1e3b      	subs	r3, r7, #0
 8006264:	bfaf      	iteee	ge
 8006266:	2300      	movge	r3, #0
 8006268:	2201      	movlt	r2, #1
 800626a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800626e:	9305      	strlt	r3, [sp, #20]
 8006270:	bfa8      	it	ge
 8006272:	f8c8 3000 	strge.w	r3, [r8]
 8006276:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800627a:	4b9f      	ldr	r3, [pc, #636]	; (80064f8 <_dtoa_r+0x2e8>)
 800627c:	bfb8      	it	lt
 800627e:	f8c8 2000 	strlt.w	r2, [r8]
 8006282:	ea33 0309 	bics.w	r3, r3, r9
 8006286:	d119      	bne.n	80062bc <_dtoa_r+0xac>
 8006288:	f242 730f 	movw	r3, #9999	; 0x270f
 800628c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006294:	4333      	orrs	r3, r6
 8006296:	f000 8580 	beq.w	8006d9a <_dtoa_r+0xb8a>
 800629a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800629c:	b953      	cbnz	r3, 80062b4 <_dtoa_r+0xa4>
 800629e:	4b97      	ldr	r3, [pc, #604]	; (80064fc <_dtoa_r+0x2ec>)
 80062a0:	e022      	b.n	80062e8 <_dtoa_r+0xd8>
 80062a2:	4b97      	ldr	r3, [pc, #604]	; (8006500 <_dtoa_r+0x2f0>)
 80062a4:	9308      	str	r3, [sp, #32]
 80062a6:	3308      	adds	r3, #8
 80062a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	9808      	ldr	r0, [sp, #32]
 80062ae:	b019      	add	sp, #100	; 0x64
 80062b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b4:	4b91      	ldr	r3, [pc, #580]	; (80064fc <_dtoa_r+0x2ec>)
 80062b6:	9308      	str	r3, [sp, #32]
 80062b8:	3303      	adds	r3, #3
 80062ba:	e7f5      	b.n	80062a8 <_dtoa_r+0x98>
 80062bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80062c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80062c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062c8:	2200      	movs	r2, #0
 80062ca:	2300      	movs	r3, #0
 80062cc:	f7fa fb6c 	bl	80009a8 <__aeabi_dcmpeq>
 80062d0:	4680      	mov	r8, r0
 80062d2:	b158      	cbz	r0, 80062ec <_dtoa_r+0xdc>
 80062d4:	2301      	movs	r3, #1
 80062d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 8559 	beq.w	8006d94 <_dtoa_r+0xb84>
 80062e2:	4888      	ldr	r0, [pc, #544]	; (8006504 <_dtoa_r+0x2f4>)
 80062e4:	6018      	str	r0, [r3, #0]
 80062e6:	1e43      	subs	r3, r0, #1
 80062e8:	9308      	str	r3, [sp, #32]
 80062ea:	e7df      	b.n	80062ac <_dtoa_r+0x9c>
 80062ec:	ab16      	add	r3, sp, #88	; 0x58
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	ab17      	add	r3, sp, #92	; 0x5c
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	4628      	mov	r0, r5
 80062f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80062fa:	f001 f8c5 	bl	8007488 <__d2b>
 80062fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006302:	4682      	mov	sl, r0
 8006304:	2c00      	cmp	r4, #0
 8006306:	d07e      	beq.n	8006406 <_dtoa_r+0x1f6>
 8006308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800630c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800630e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006312:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006316:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800631a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800631e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006322:	2200      	movs	r2, #0
 8006324:	4b78      	ldr	r3, [pc, #480]	; (8006508 <_dtoa_r+0x2f8>)
 8006326:	f7f9 ff1f 	bl	8000168 <__aeabi_dsub>
 800632a:	a36b      	add	r3, pc, #428	; (adr r3, 80064d8 <_dtoa_r+0x2c8>)
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	f7fa f8d2 	bl	80004d8 <__aeabi_dmul>
 8006334:	a36a      	add	r3, pc, #424	; (adr r3, 80064e0 <_dtoa_r+0x2d0>)
 8006336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633a:	f7f9 ff17 	bl	800016c <__adddf3>
 800633e:	4606      	mov	r6, r0
 8006340:	4620      	mov	r0, r4
 8006342:	460f      	mov	r7, r1
 8006344:	f7fa f85e 	bl	8000404 <__aeabi_i2d>
 8006348:	a367      	add	r3, pc, #412	; (adr r3, 80064e8 <_dtoa_r+0x2d8>)
 800634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634e:	f7fa f8c3 	bl	80004d8 <__aeabi_dmul>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4630      	mov	r0, r6
 8006358:	4639      	mov	r1, r7
 800635a:	f7f9 ff07 	bl	800016c <__adddf3>
 800635e:	4606      	mov	r6, r0
 8006360:	460f      	mov	r7, r1
 8006362:	f7fa fb69 	bl	8000a38 <__aeabi_d2iz>
 8006366:	2200      	movs	r2, #0
 8006368:	4681      	mov	r9, r0
 800636a:	2300      	movs	r3, #0
 800636c:	4630      	mov	r0, r6
 800636e:	4639      	mov	r1, r7
 8006370:	f7fa fb24 	bl	80009bc <__aeabi_dcmplt>
 8006374:	b148      	cbz	r0, 800638a <_dtoa_r+0x17a>
 8006376:	4648      	mov	r0, r9
 8006378:	f7fa f844 	bl	8000404 <__aeabi_i2d>
 800637c:	4632      	mov	r2, r6
 800637e:	463b      	mov	r3, r7
 8006380:	f7fa fb12 	bl	80009a8 <__aeabi_dcmpeq>
 8006384:	b908      	cbnz	r0, 800638a <_dtoa_r+0x17a>
 8006386:	f109 39ff 	add.w	r9, r9, #4294967295
 800638a:	f1b9 0f16 	cmp.w	r9, #22
 800638e:	d857      	bhi.n	8006440 <_dtoa_r+0x230>
 8006390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006394:	4b5d      	ldr	r3, [pc, #372]	; (800650c <_dtoa_r+0x2fc>)
 8006396:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639e:	f7fa fb0d 	bl	80009bc <__aeabi_dcmplt>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d04e      	beq.n	8006444 <_dtoa_r+0x234>
 80063a6:	2300      	movs	r3, #0
 80063a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80063ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80063ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80063b0:	1b1c      	subs	r4, r3, r4
 80063b2:	1e63      	subs	r3, r4, #1
 80063b4:	9309      	str	r3, [sp, #36]	; 0x24
 80063b6:	bf49      	itett	mi
 80063b8:	f1c4 0301 	rsbmi	r3, r4, #1
 80063bc:	2300      	movpl	r3, #0
 80063be:	9306      	strmi	r3, [sp, #24]
 80063c0:	2300      	movmi	r3, #0
 80063c2:	bf54      	ite	pl
 80063c4:	9306      	strpl	r3, [sp, #24]
 80063c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80063c8:	f1b9 0f00 	cmp.w	r9, #0
 80063cc:	db3c      	blt.n	8006448 <_dtoa_r+0x238>
 80063ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80063d4:	444b      	add	r3, r9
 80063d6:	9309      	str	r3, [sp, #36]	; 0x24
 80063d8:	2300      	movs	r3, #0
 80063da:	930a      	str	r3, [sp, #40]	; 0x28
 80063dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063de:	2b09      	cmp	r3, #9
 80063e0:	d86c      	bhi.n	80064bc <_dtoa_r+0x2ac>
 80063e2:	2b05      	cmp	r3, #5
 80063e4:	bfc4      	itt	gt
 80063e6:	3b04      	subgt	r3, #4
 80063e8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80063ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063ec:	bfc8      	it	gt
 80063ee:	2400      	movgt	r4, #0
 80063f0:	f1a3 0302 	sub.w	r3, r3, #2
 80063f4:	bfd8      	it	le
 80063f6:	2401      	movle	r4, #1
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	f200 808b 	bhi.w	8006514 <_dtoa_r+0x304>
 80063fe:	e8df f003 	tbb	[pc, r3]
 8006402:	4f2d      	.short	0x4f2d
 8006404:	5b4d      	.short	0x5b4d
 8006406:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800640a:	441c      	add	r4, r3
 800640c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006410:	2b20      	cmp	r3, #32
 8006412:	bfc3      	ittte	gt
 8006414:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006418:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800641c:	fa09 f303 	lslgt.w	r3, r9, r3
 8006420:	f1c3 0320 	rsble	r3, r3, #32
 8006424:	bfc6      	itte	gt
 8006426:	fa26 f000 	lsrgt.w	r0, r6, r0
 800642a:	4318      	orrgt	r0, r3
 800642c:	fa06 f003 	lslle.w	r0, r6, r3
 8006430:	f7f9 ffd8 	bl	80003e4 <__aeabi_ui2d>
 8006434:	2301      	movs	r3, #1
 8006436:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800643a:	3c01      	subs	r4, #1
 800643c:	9313      	str	r3, [sp, #76]	; 0x4c
 800643e:	e770      	b.n	8006322 <_dtoa_r+0x112>
 8006440:	2301      	movs	r3, #1
 8006442:	e7b3      	b.n	80063ac <_dtoa_r+0x19c>
 8006444:	900f      	str	r0, [sp, #60]	; 0x3c
 8006446:	e7b2      	b.n	80063ae <_dtoa_r+0x19e>
 8006448:	9b06      	ldr	r3, [sp, #24]
 800644a:	eba3 0309 	sub.w	r3, r3, r9
 800644e:	9306      	str	r3, [sp, #24]
 8006450:	f1c9 0300 	rsb	r3, r9, #0
 8006454:	930a      	str	r3, [sp, #40]	; 0x28
 8006456:	2300      	movs	r3, #0
 8006458:	930e      	str	r3, [sp, #56]	; 0x38
 800645a:	e7bf      	b.n	80063dc <_dtoa_r+0x1cc>
 800645c:	2300      	movs	r3, #0
 800645e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006460:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006462:	2b00      	cmp	r3, #0
 8006464:	dc59      	bgt.n	800651a <_dtoa_r+0x30a>
 8006466:	f04f 0b01 	mov.w	fp, #1
 800646a:	465b      	mov	r3, fp
 800646c:	f8cd b008 	str.w	fp, [sp, #8]
 8006470:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006474:	2200      	movs	r2, #0
 8006476:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006478:	6042      	str	r2, [r0, #4]
 800647a:	2204      	movs	r2, #4
 800647c:	f102 0614 	add.w	r6, r2, #20
 8006480:	429e      	cmp	r6, r3
 8006482:	6841      	ldr	r1, [r0, #4]
 8006484:	d94f      	bls.n	8006526 <_dtoa_r+0x316>
 8006486:	4628      	mov	r0, r5
 8006488:	f000 fcd8 	bl	8006e3c <_Balloc>
 800648c:	9008      	str	r0, [sp, #32]
 800648e:	2800      	cmp	r0, #0
 8006490:	d14d      	bne.n	800652e <_dtoa_r+0x31e>
 8006492:	4602      	mov	r2, r0
 8006494:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006498:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <_dtoa_r+0x300>)
 800649a:	e6cd      	b.n	8006238 <_dtoa_r+0x28>
 800649c:	2301      	movs	r3, #1
 800649e:	e7de      	b.n	800645e <_dtoa_r+0x24e>
 80064a0:	2300      	movs	r3, #0
 80064a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80064a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064a6:	eb09 0b03 	add.w	fp, r9, r3
 80064aa:	f10b 0301 	add.w	r3, fp, #1
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	9302      	str	r3, [sp, #8]
 80064b2:	bfb8      	it	lt
 80064b4:	2301      	movlt	r3, #1
 80064b6:	e7dd      	b.n	8006474 <_dtoa_r+0x264>
 80064b8:	2301      	movs	r3, #1
 80064ba:	e7f2      	b.n	80064a2 <_dtoa_r+0x292>
 80064bc:	2401      	movs	r4, #1
 80064be:	2300      	movs	r3, #0
 80064c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80064c2:	9322      	str	r3, [sp, #136]	; 0x88
 80064c4:	f04f 3bff 	mov.w	fp, #4294967295
 80064c8:	2200      	movs	r2, #0
 80064ca:	2312      	movs	r3, #18
 80064cc:	f8cd b008 	str.w	fp, [sp, #8]
 80064d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80064d2:	e7cf      	b.n	8006474 <_dtoa_r+0x264>
 80064d4:	f3af 8000 	nop.w
 80064d8:	636f4361 	.word	0x636f4361
 80064dc:	3fd287a7 	.word	0x3fd287a7
 80064e0:	8b60c8b3 	.word	0x8b60c8b3
 80064e4:	3fc68a28 	.word	0x3fc68a28
 80064e8:	509f79fb 	.word	0x509f79fb
 80064ec:	3fd34413 	.word	0x3fd34413
 80064f0:	080085f1 	.word	0x080085f1
 80064f4:	08008608 	.word	0x08008608
 80064f8:	7ff00000 	.word	0x7ff00000
 80064fc:	080085ed 	.word	0x080085ed
 8006500:	080085e4 	.word	0x080085e4
 8006504:	080085c1 	.word	0x080085c1
 8006508:	3ff80000 	.word	0x3ff80000
 800650c:	08008700 	.word	0x08008700
 8006510:	08008667 	.word	0x08008667
 8006514:	2301      	movs	r3, #1
 8006516:	930b      	str	r3, [sp, #44]	; 0x2c
 8006518:	e7d4      	b.n	80064c4 <_dtoa_r+0x2b4>
 800651a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800651e:	465b      	mov	r3, fp
 8006520:	f8cd b008 	str.w	fp, [sp, #8]
 8006524:	e7a6      	b.n	8006474 <_dtoa_r+0x264>
 8006526:	3101      	adds	r1, #1
 8006528:	6041      	str	r1, [r0, #4]
 800652a:	0052      	lsls	r2, r2, #1
 800652c:	e7a6      	b.n	800647c <_dtoa_r+0x26c>
 800652e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006530:	9a08      	ldr	r2, [sp, #32]
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	9b02      	ldr	r3, [sp, #8]
 8006536:	2b0e      	cmp	r3, #14
 8006538:	f200 80a8 	bhi.w	800668c <_dtoa_r+0x47c>
 800653c:	2c00      	cmp	r4, #0
 800653e:	f000 80a5 	beq.w	800668c <_dtoa_r+0x47c>
 8006542:	f1b9 0f00 	cmp.w	r9, #0
 8006546:	dd34      	ble.n	80065b2 <_dtoa_r+0x3a2>
 8006548:	4a9a      	ldr	r2, [pc, #616]	; (80067b4 <_dtoa_r+0x5a4>)
 800654a:	f009 030f 	and.w	r3, r9, #15
 800654e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006552:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006556:	e9d3 3400 	ldrd	r3, r4, [r3]
 800655a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800655e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006562:	d016      	beq.n	8006592 <_dtoa_r+0x382>
 8006564:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006568:	4b93      	ldr	r3, [pc, #588]	; (80067b8 <_dtoa_r+0x5a8>)
 800656a:	2703      	movs	r7, #3
 800656c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006570:	f7fa f8dc 	bl	800072c <__aeabi_ddiv>
 8006574:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006578:	f004 040f 	and.w	r4, r4, #15
 800657c:	4e8e      	ldr	r6, [pc, #568]	; (80067b8 <_dtoa_r+0x5a8>)
 800657e:	b954      	cbnz	r4, 8006596 <_dtoa_r+0x386>
 8006580:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006588:	f7fa f8d0 	bl	800072c <__aeabi_ddiv>
 800658c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006590:	e029      	b.n	80065e6 <_dtoa_r+0x3d6>
 8006592:	2702      	movs	r7, #2
 8006594:	e7f2      	b.n	800657c <_dtoa_r+0x36c>
 8006596:	07e1      	lsls	r1, r4, #31
 8006598:	d508      	bpl.n	80065ac <_dtoa_r+0x39c>
 800659a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800659e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065a2:	f7f9 ff99 	bl	80004d8 <__aeabi_dmul>
 80065a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065aa:	3701      	adds	r7, #1
 80065ac:	1064      	asrs	r4, r4, #1
 80065ae:	3608      	adds	r6, #8
 80065b0:	e7e5      	b.n	800657e <_dtoa_r+0x36e>
 80065b2:	f000 80a5 	beq.w	8006700 <_dtoa_r+0x4f0>
 80065b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065ba:	f1c9 0400 	rsb	r4, r9, #0
 80065be:	4b7d      	ldr	r3, [pc, #500]	; (80067b4 <_dtoa_r+0x5a4>)
 80065c0:	f004 020f 	and.w	r2, r4, #15
 80065c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	f7f9 ff84 	bl	80004d8 <__aeabi_dmul>
 80065d0:	2702      	movs	r7, #2
 80065d2:	2300      	movs	r3, #0
 80065d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065d8:	4e77      	ldr	r6, [pc, #476]	; (80067b8 <_dtoa_r+0x5a8>)
 80065da:	1124      	asrs	r4, r4, #4
 80065dc:	2c00      	cmp	r4, #0
 80065de:	f040 8084 	bne.w	80066ea <_dtoa_r+0x4da>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1d2      	bne.n	800658c <_dtoa_r+0x37c>
 80065e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 808b 	beq.w	8006704 <_dtoa_r+0x4f4>
 80065ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80065f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80065f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065fa:	2200      	movs	r2, #0
 80065fc:	4b6f      	ldr	r3, [pc, #444]	; (80067bc <_dtoa_r+0x5ac>)
 80065fe:	f7fa f9dd 	bl	80009bc <__aeabi_dcmplt>
 8006602:	2800      	cmp	r0, #0
 8006604:	d07e      	beq.n	8006704 <_dtoa_r+0x4f4>
 8006606:	9b02      	ldr	r3, [sp, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d07b      	beq.n	8006704 <_dtoa_r+0x4f4>
 800660c:	f1bb 0f00 	cmp.w	fp, #0
 8006610:	dd38      	ble.n	8006684 <_dtoa_r+0x474>
 8006612:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006616:	2200      	movs	r2, #0
 8006618:	4b69      	ldr	r3, [pc, #420]	; (80067c0 <_dtoa_r+0x5b0>)
 800661a:	f7f9 ff5d 	bl	80004d8 <__aeabi_dmul>
 800661e:	465c      	mov	r4, fp
 8006620:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006624:	f109 38ff 	add.w	r8, r9, #4294967295
 8006628:	3701      	adds	r7, #1
 800662a:	4638      	mov	r0, r7
 800662c:	f7f9 feea 	bl	8000404 <__aeabi_i2d>
 8006630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006634:	f7f9 ff50 	bl	80004d8 <__aeabi_dmul>
 8006638:	2200      	movs	r2, #0
 800663a:	4b62      	ldr	r3, [pc, #392]	; (80067c4 <_dtoa_r+0x5b4>)
 800663c:	f7f9 fd96 	bl	800016c <__adddf3>
 8006640:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006644:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006648:	9611      	str	r6, [sp, #68]	; 0x44
 800664a:	2c00      	cmp	r4, #0
 800664c:	d15d      	bne.n	800670a <_dtoa_r+0x4fa>
 800664e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006652:	2200      	movs	r2, #0
 8006654:	4b5c      	ldr	r3, [pc, #368]	; (80067c8 <_dtoa_r+0x5b8>)
 8006656:	f7f9 fd87 	bl	8000168 <__aeabi_dsub>
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006662:	4633      	mov	r3, r6
 8006664:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006666:	f7fa f9c7 	bl	80009f8 <__aeabi_dcmpgt>
 800666a:	2800      	cmp	r0, #0
 800666c:	f040 829e 	bne.w	8006bac <_dtoa_r+0x99c>
 8006670:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006674:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006676:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800667a:	f7fa f99f 	bl	80009bc <__aeabi_dcmplt>
 800667e:	2800      	cmp	r0, #0
 8006680:	f040 8292 	bne.w	8006ba8 <_dtoa_r+0x998>
 8006684:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006688:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800668c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800668e:	2b00      	cmp	r3, #0
 8006690:	f2c0 8153 	blt.w	800693a <_dtoa_r+0x72a>
 8006694:	f1b9 0f0e 	cmp.w	r9, #14
 8006698:	f300 814f 	bgt.w	800693a <_dtoa_r+0x72a>
 800669c:	4b45      	ldr	r3, [pc, #276]	; (80067b4 <_dtoa_r+0x5a4>)
 800669e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80066a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80066aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f280 80db 	bge.w	8006868 <_dtoa_r+0x658>
 80066b2:	9b02      	ldr	r3, [sp, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f300 80d7 	bgt.w	8006868 <_dtoa_r+0x658>
 80066ba:	f040 8274 	bne.w	8006ba6 <_dtoa_r+0x996>
 80066be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066c2:	2200      	movs	r2, #0
 80066c4:	4b40      	ldr	r3, [pc, #256]	; (80067c8 <_dtoa_r+0x5b8>)
 80066c6:	f7f9 ff07 	bl	80004d8 <__aeabi_dmul>
 80066ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066ce:	f7fa f989 	bl	80009e4 <__aeabi_dcmpge>
 80066d2:	9c02      	ldr	r4, [sp, #8]
 80066d4:	4626      	mov	r6, r4
 80066d6:	2800      	cmp	r0, #0
 80066d8:	f040 824a 	bne.w	8006b70 <_dtoa_r+0x960>
 80066dc:	2331      	movs	r3, #49	; 0x31
 80066de:	9f08      	ldr	r7, [sp, #32]
 80066e0:	f109 0901 	add.w	r9, r9, #1
 80066e4:	f807 3b01 	strb.w	r3, [r7], #1
 80066e8:	e246      	b.n	8006b78 <_dtoa_r+0x968>
 80066ea:	07e2      	lsls	r2, r4, #31
 80066ec:	d505      	bpl.n	80066fa <_dtoa_r+0x4ea>
 80066ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066f2:	f7f9 fef1 	bl	80004d8 <__aeabi_dmul>
 80066f6:	2301      	movs	r3, #1
 80066f8:	3701      	adds	r7, #1
 80066fa:	1064      	asrs	r4, r4, #1
 80066fc:	3608      	adds	r6, #8
 80066fe:	e76d      	b.n	80065dc <_dtoa_r+0x3cc>
 8006700:	2702      	movs	r7, #2
 8006702:	e770      	b.n	80065e6 <_dtoa_r+0x3d6>
 8006704:	46c8      	mov	r8, r9
 8006706:	9c02      	ldr	r4, [sp, #8]
 8006708:	e78f      	b.n	800662a <_dtoa_r+0x41a>
 800670a:	9908      	ldr	r1, [sp, #32]
 800670c:	4b29      	ldr	r3, [pc, #164]	; (80067b4 <_dtoa_r+0x5a4>)
 800670e:	4421      	add	r1, r4
 8006710:	9112      	str	r1, [sp, #72]	; 0x48
 8006712:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006714:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006718:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800671c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006720:	2900      	cmp	r1, #0
 8006722:	d055      	beq.n	80067d0 <_dtoa_r+0x5c0>
 8006724:	2000      	movs	r0, #0
 8006726:	4929      	ldr	r1, [pc, #164]	; (80067cc <_dtoa_r+0x5bc>)
 8006728:	f7fa f800 	bl	800072c <__aeabi_ddiv>
 800672c:	463b      	mov	r3, r7
 800672e:	4632      	mov	r2, r6
 8006730:	f7f9 fd1a 	bl	8000168 <__aeabi_dsub>
 8006734:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006738:	9f08      	ldr	r7, [sp, #32]
 800673a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800673e:	f7fa f97b 	bl	8000a38 <__aeabi_d2iz>
 8006742:	4604      	mov	r4, r0
 8006744:	f7f9 fe5e 	bl	8000404 <__aeabi_i2d>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006750:	f7f9 fd0a 	bl	8000168 <__aeabi_dsub>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	3430      	adds	r4, #48	; 0x30
 800675a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800675e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006762:	f807 4b01 	strb.w	r4, [r7], #1
 8006766:	f7fa f929 	bl	80009bc <__aeabi_dcmplt>
 800676a:	2800      	cmp	r0, #0
 800676c:	d174      	bne.n	8006858 <_dtoa_r+0x648>
 800676e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006772:	2000      	movs	r0, #0
 8006774:	4911      	ldr	r1, [pc, #68]	; (80067bc <_dtoa_r+0x5ac>)
 8006776:	f7f9 fcf7 	bl	8000168 <__aeabi_dsub>
 800677a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800677e:	f7fa f91d 	bl	80009bc <__aeabi_dcmplt>
 8006782:	2800      	cmp	r0, #0
 8006784:	f040 80b6 	bne.w	80068f4 <_dtoa_r+0x6e4>
 8006788:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800678a:	429f      	cmp	r7, r3
 800678c:	f43f af7a 	beq.w	8006684 <_dtoa_r+0x474>
 8006790:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006794:	2200      	movs	r2, #0
 8006796:	4b0a      	ldr	r3, [pc, #40]	; (80067c0 <_dtoa_r+0x5b0>)
 8006798:	f7f9 fe9e 	bl	80004d8 <__aeabi_dmul>
 800679c:	2200      	movs	r2, #0
 800679e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067a6:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <_dtoa_r+0x5b0>)
 80067a8:	f7f9 fe96 	bl	80004d8 <__aeabi_dmul>
 80067ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067b0:	e7c3      	b.n	800673a <_dtoa_r+0x52a>
 80067b2:	bf00      	nop
 80067b4:	08008700 	.word	0x08008700
 80067b8:	080086d8 	.word	0x080086d8
 80067bc:	3ff00000 	.word	0x3ff00000
 80067c0:	40240000 	.word	0x40240000
 80067c4:	401c0000 	.word	0x401c0000
 80067c8:	40140000 	.word	0x40140000
 80067cc:	3fe00000 	.word	0x3fe00000
 80067d0:	4630      	mov	r0, r6
 80067d2:	4639      	mov	r1, r7
 80067d4:	f7f9 fe80 	bl	80004d8 <__aeabi_dmul>
 80067d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067de:	9c08      	ldr	r4, [sp, #32]
 80067e0:	9314      	str	r3, [sp, #80]	; 0x50
 80067e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067e6:	f7fa f927 	bl	8000a38 <__aeabi_d2iz>
 80067ea:	9015      	str	r0, [sp, #84]	; 0x54
 80067ec:	f7f9 fe0a 	bl	8000404 <__aeabi_i2d>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067f8:	f7f9 fcb6 	bl	8000168 <__aeabi_dsub>
 80067fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067fe:	4606      	mov	r6, r0
 8006800:	3330      	adds	r3, #48	; 0x30
 8006802:	f804 3b01 	strb.w	r3, [r4], #1
 8006806:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006808:	460f      	mov	r7, r1
 800680a:	429c      	cmp	r4, r3
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	d124      	bne.n	800685c <_dtoa_r+0x64c>
 8006812:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006816:	4bb3      	ldr	r3, [pc, #716]	; (8006ae4 <_dtoa_r+0x8d4>)
 8006818:	f7f9 fca8 	bl	800016c <__adddf3>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4630      	mov	r0, r6
 8006822:	4639      	mov	r1, r7
 8006824:	f7fa f8e8 	bl	80009f8 <__aeabi_dcmpgt>
 8006828:	2800      	cmp	r0, #0
 800682a:	d162      	bne.n	80068f2 <_dtoa_r+0x6e2>
 800682c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006830:	2000      	movs	r0, #0
 8006832:	49ac      	ldr	r1, [pc, #688]	; (8006ae4 <_dtoa_r+0x8d4>)
 8006834:	f7f9 fc98 	bl	8000168 <__aeabi_dsub>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4630      	mov	r0, r6
 800683e:	4639      	mov	r1, r7
 8006840:	f7fa f8bc 	bl	80009bc <__aeabi_dcmplt>
 8006844:	2800      	cmp	r0, #0
 8006846:	f43f af1d 	beq.w	8006684 <_dtoa_r+0x474>
 800684a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800684c:	1e7b      	subs	r3, r7, #1
 800684e:	9314      	str	r3, [sp, #80]	; 0x50
 8006850:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006854:	2b30      	cmp	r3, #48	; 0x30
 8006856:	d0f8      	beq.n	800684a <_dtoa_r+0x63a>
 8006858:	46c1      	mov	r9, r8
 800685a:	e03a      	b.n	80068d2 <_dtoa_r+0x6c2>
 800685c:	4ba2      	ldr	r3, [pc, #648]	; (8006ae8 <_dtoa_r+0x8d8>)
 800685e:	f7f9 fe3b 	bl	80004d8 <__aeabi_dmul>
 8006862:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006866:	e7bc      	b.n	80067e2 <_dtoa_r+0x5d2>
 8006868:	9f08      	ldr	r7, [sp, #32]
 800686a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800686e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006872:	f7f9 ff5b 	bl	800072c <__aeabi_ddiv>
 8006876:	f7fa f8df 	bl	8000a38 <__aeabi_d2iz>
 800687a:	4604      	mov	r4, r0
 800687c:	f7f9 fdc2 	bl	8000404 <__aeabi_i2d>
 8006880:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006884:	f7f9 fe28 	bl	80004d8 <__aeabi_dmul>
 8006888:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800688c:	460b      	mov	r3, r1
 800688e:	4602      	mov	r2, r0
 8006890:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006894:	f7f9 fc68 	bl	8000168 <__aeabi_dsub>
 8006898:	f807 6b01 	strb.w	r6, [r7], #1
 800689c:	9e08      	ldr	r6, [sp, #32]
 800689e:	9b02      	ldr	r3, [sp, #8]
 80068a0:	1bbe      	subs	r6, r7, r6
 80068a2:	42b3      	cmp	r3, r6
 80068a4:	d13a      	bne.n	800691c <_dtoa_r+0x70c>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	f7f9 fc5f 	bl	800016c <__adddf3>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068ba:	f7fa f89d 	bl	80009f8 <__aeabi_dcmpgt>
 80068be:	bb58      	cbnz	r0, 8006918 <_dtoa_r+0x708>
 80068c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068c8:	f7fa f86e 	bl	80009a8 <__aeabi_dcmpeq>
 80068cc:	b108      	cbz	r0, 80068d2 <_dtoa_r+0x6c2>
 80068ce:	07e1      	lsls	r1, r4, #31
 80068d0:	d422      	bmi.n	8006918 <_dtoa_r+0x708>
 80068d2:	4628      	mov	r0, r5
 80068d4:	4651      	mov	r1, sl
 80068d6:	f000 faf1 	bl	8006ebc <_Bfree>
 80068da:	2300      	movs	r3, #0
 80068dc:	703b      	strb	r3, [r7, #0]
 80068de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80068e0:	f109 0001 	add.w	r0, r9, #1
 80068e4:	6018      	str	r0, [r3, #0]
 80068e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f43f acdf 	beq.w	80062ac <_dtoa_r+0x9c>
 80068ee:	601f      	str	r7, [r3, #0]
 80068f0:	e4dc      	b.n	80062ac <_dtoa_r+0x9c>
 80068f2:	4627      	mov	r7, r4
 80068f4:	463b      	mov	r3, r7
 80068f6:	461f      	mov	r7, r3
 80068f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068fc:	2a39      	cmp	r2, #57	; 0x39
 80068fe:	d107      	bne.n	8006910 <_dtoa_r+0x700>
 8006900:	9a08      	ldr	r2, [sp, #32]
 8006902:	429a      	cmp	r2, r3
 8006904:	d1f7      	bne.n	80068f6 <_dtoa_r+0x6e6>
 8006906:	2230      	movs	r2, #48	; 0x30
 8006908:	9908      	ldr	r1, [sp, #32]
 800690a:	f108 0801 	add.w	r8, r8, #1
 800690e:	700a      	strb	r2, [r1, #0]
 8006910:	781a      	ldrb	r2, [r3, #0]
 8006912:	3201      	adds	r2, #1
 8006914:	701a      	strb	r2, [r3, #0]
 8006916:	e79f      	b.n	8006858 <_dtoa_r+0x648>
 8006918:	46c8      	mov	r8, r9
 800691a:	e7eb      	b.n	80068f4 <_dtoa_r+0x6e4>
 800691c:	2200      	movs	r2, #0
 800691e:	4b72      	ldr	r3, [pc, #456]	; (8006ae8 <_dtoa_r+0x8d8>)
 8006920:	f7f9 fdda 	bl	80004d8 <__aeabi_dmul>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800692c:	2200      	movs	r2, #0
 800692e:	2300      	movs	r3, #0
 8006930:	f7fa f83a 	bl	80009a8 <__aeabi_dcmpeq>
 8006934:	2800      	cmp	r0, #0
 8006936:	d098      	beq.n	800686a <_dtoa_r+0x65a>
 8006938:	e7cb      	b.n	80068d2 <_dtoa_r+0x6c2>
 800693a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800693c:	2a00      	cmp	r2, #0
 800693e:	f000 80cd 	beq.w	8006adc <_dtoa_r+0x8cc>
 8006942:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006944:	2a01      	cmp	r2, #1
 8006946:	f300 80af 	bgt.w	8006aa8 <_dtoa_r+0x898>
 800694a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800694c:	2a00      	cmp	r2, #0
 800694e:	f000 80a7 	beq.w	8006aa0 <_dtoa_r+0x890>
 8006952:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006956:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006958:	9f06      	ldr	r7, [sp, #24]
 800695a:	9a06      	ldr	r2, [sp, #24]
 800695c:	2101      	movs	r1, #1
 800695e:	441a      	add	r2, r3
 8006960:	9206      	str	r2, [sp, #24]
 8006962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006964:	4628      	mov	r0, r5
 8006966:	441a      	add	r2, r3
 8006968:	9209      	str	r2, [sp, #36]	; 0x24
 800696a:	f000 fb61 	bl	8007030 <__i2b>
 800696e:	4606      	mov	r6, r0
 8006970:	2f00      	cmp	r7, #0
 8006972:	dd0c      	ble.n	800698e <_dtoa_r+0x77e>
 8006974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006976:	2b00      	cmp	r3, #0
 8006978:	dd09      	ble.n	800698e <_dtoa_r+0x77e>
 800697a:	42bb      	cmp	r3, r7
 800697c:	bfa8      	it	ge
 800697e:	463b      	movge	r3, r7
 8006980:	9a06      	ldr	r2, [sp, #24]
 8006982:	1aff      	subs	r7, r7, r3
 8006984:	1ad2      	subs	r2, r2, r3
 8006986:	9206      	str	r2, [sp, #24]
 8006988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	9309      	str	r3, [sp, #36]	; 0x24
 800698e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006990:	b1f3      	cbz	r3, 80069d0 <_dtoa_r+0x7c0>
 8006992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 80a9 	beq.w	8006aec <_dtoa_r+0x8dc>
 800699a:	2c00      	cmp	r4, #0
 800699c:	dd10      	ble.n	80069c0 <_dtoa_r+0x7b0>
 800699e:	4631      	mov	r1, r6
 80069a0:	4622      	mov	r2, r4
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 fbfe 	bl	80071a4 <__pow5mult>
 80069a8:	4652      	mov	r2, sl
 80069aa:	4601      	mov	r1, r0
 80069ac:	4606      	mov	r6, r0
 80069ae:	4628      	mov	r0, r5
 80069b0:	f000 fb54 	bl	800705c <__multiply>
 80069b4:	4680      	mov	r8, r0
 80069b6:	4651      	mov	r1, sl
 80069b8:	4628      	mov	r0, r5
 80069ba:	f000 fa7f 	bl	8006ebc <_Bfree>
 80069be:	46c2      	mov	sl, r8
 80069c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c2:	1b1a      	subs	r2, r3, r4
 80069c4:	d004      	beq.n	80069d0 <_dtoa_r+0x7c0>
 80069c6:	4651      	mov	r1, sl
 80069c8:	4628      	mov	r0, r5
 80069ca:	f000 fbeb 	bl	80071a4 <__pow5mult>
 80069ce:	4682      	mov	sl, r0
 80069d0:	2101      	movs	r1, #1
 80069d2:	4628      	mov	r0, r5
 80069d4:	f000 fb2c 	bl	8007030 <__i2b>
 80069d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069da:	4604      	mov	r4, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f340 8087 	ble.w	8006af0 <_dtoa_r+0x8e0>
 80069e2:	461a      	mov	r2, r3
 80069e4:	4601      	mov	r1, r0
 80069e6:	4628      	mov	r0, r5
 80069e8:	f000 fbdc 	bl	80071a4 <__pow5mult>
 80069ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069ee:	4604      	mov	r4, r0
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	f340 8080 	ble.w	8006af6 <_dtoa_r+0x8e6>
 80069f6:	f04f 0800 	mov.w	r8, #0
 80069fa:	6923      	ldr	r3, [r4, #16]
 80069fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a00:	6918      	ldr	r0, [r3, #16]
 8006a02:	f000 fac7 	bl	8006f94 <__hi0bits>
 8006a06:	f1c0 0020 	rsb	r0, r0, #32
 8006a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a0c:	4418      	add	r0, r3
 8006a0e:	f010 001f 	ands.w	r0, r0, #31
 8006a12:	f000 8092 	beq.w	8006b3a <_dtoa_r+0x92a>
 8006a16:	f1c0 0320 	rsb	r3, r0, #32
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	f340 808a 	ble.w	8006b34 <_dtoa_r+0x924>
 8006a20:	f1c0 001c 	rsb	r0, r0, #28
 8006a24:	9b06      	ldr	r3, [sp, #24]
 8006a26:	4407      	add	r7, r0
 8006a28:	4403      	add	r3, r0
 8006a2a:	9306      	str	r3, [sp, #24]
 8006a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2e:	4403      	add	r3, r0
 8006a30:	9309      	str	r3, [sp, #36]	; 0x24
 8006a32:	9b06      	ldr	r3, [sp, #24]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	dd05      	ble.n	8006a44 <_dtoa_r+0x834>
 8006a38:	4651      	mov	r1, sl
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	f000 fc0b 	bl	8007258 <__lshift>
 8006a42:	4682      	mov	sl, r0
 8006a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	dd05      	ble.n	8006a56 <_dtoa_r+0x846>
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 fc02 	bl	8007258 <__lshift>
 8006a54:	4604      	mov	r4, r0
 8006a56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d070      	beq.n	8006b3e <_dtoa_r+0x92e>
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4650      	mov	r0, sl
 8006a60:	f000 fc66 	bl	8007330 <__mcmp>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	da6a      	bge.n	8006b3e <_dtoa_r+0x92e>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4651      	mov	r1, sl
 8006a6c:	220a      	movs	r2, #10
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f000 fa46 	bl	8006f00 <__multadd>
 8006a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a76:	4682      	mov	sl, r0
 8006a78:	f109 39ff 	add.w	r9, r9, #4294967295
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 8193 	beq.w	8006da8 <_dtoa_r+0xb98>
 8006a82:	4631      	mov	r1, r6
 8006a84:	2300      	movs	r3, #0
 8006a86:	220a      	movs	r2, #10
 8006a88:	4628      	mov	r0, r5
 8006a8a:	f000 fa39 	bl	8006f00 <__multadd>
 8006a8e:	f1bb 0f00 	cmp.w	fp, #0
 8006a92:	4606      	mov	r6, r0
 8006a94:	f300 8093 	bgt.w	8006bbe <_dtoa_r+0x9ae>
 8006a98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	dc57      	bgt.n	8006b4e <_dtoa_r+0x93e>
 8006a9e:	e08e      	b.n	8006bbe <_dtoa_r+0x9ae>
 8006aa0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006aa2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006aa6:	e756      	b.n	8006956 <_dtoa_r+0x746>
 8006aa8:	9b02      	ldr	r3, [sp, #8]
 8006aaa:	1e5c      	subs	r4, r3, #1
 8006aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aae:	42a3      	cmp	r3, r4
 8006ab0:	bfb7      	itett	lt
 8006ab2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ab4:	1b1c      	subge	r4, r3, r4
 8006ab6:	1ae2      	sublt	r2, r4, r3
 8006ab8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006aba:	bfbe      	ittt	lt
 8006abc:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006abe:	189b      	addlt	r3, r3, r2
 8006ac0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006ac2:	9b02      	ldr	r3, [sp, #8]
 8006ac4:	bfb8      	it	lt
 8006ac6:	2400      	movlt	r4, #0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bfbb      	ittet	lt
 8006acc:	9b06      	ldrlt	r3, [sp, #24]
 8006ace:	9a02      	ldrlt	r2, [sp, #8]
 8006ad0:	9f06      	ldrge	r7, [sp, #24]
 8006ad2:	1a9f      	sublt	r7, r3, r2
 8006ad4:	bfac      	ite	ge
 8006ad6:	9b02      	ldrge	r3, [sp, #8]
 8006ad8:	2300      	movlt	r3, #0
 8006ada:	e73e      	b.n	800695a <_dtoa_r+0x74a>
 8006adc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ade:	9f06      	ldr	r7, [sp, #24]
 8006ae0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006ae2:	e745      	b.n	8006970 <_dtoa_r+0x760>
 8006ae4:	3fe00000 	.word	0x3fe00000
 8006ae8:	40240000 	.word	0x40240000
 8006aec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006aee:	e76a      	b.n	80069c6 <_dtoa_r+0x7b6>
 8006af0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	dc19      	bgt.n	8006b2a <_dtoa_r+0x91a>
 8006af6:	9b04      	ldr	r3, [sp, #16]
 8006af8:	b9bb      	cbnz	r3, 8006b2a <_dtoa_r+0x91a>
 8006afa:	9b05      	ldr	r3, [sp, #20]
 8006afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b00:	b99b      	cbnz	r3, 8006b2a <_dtoa_r+0x91a>
 8006b02:	9b05      	ldr	r3, [sp, #20]
 8006b04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b08:	0d1b      	lsrs	r3, r3, #20
 8006b0a:	051b      	lsls	r3, r3, #20
 8006b0c:	b183      	cbz	r3, 8006b30 <_dtoa_r+0x920>
 8006b0e:	f04f 0801 	mov.w	r8, #1
 8006b12:	9b06      	ldr	r3, [sp, #24]
 8006b14:	3301      	adds	r3, #1
 8006b16:	9306      	str	r3, [sp, #24]
 8006b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f47f af6a 	bne.w	80069fa <_dtoa_r+0x7ea>
 8006b26:	2001      	movs	r0, #1
 8006b28:	e76f      	b.n	8006a0a <_dtoa_r+0x7fa>
 8006b2a:	f04f 0800 	mov.w	r8, #0
 8006b2e:	e7f6      	b.n	8006b1e <_dtoa_r+0x90e>
 8006b30:	4698      	mov	r8, r3
 8006b32:	e7f4      	b.n	8006b1e <_dtoa_r+0x90e>
 8006b34:	f43f af7d 	beq.w	8006a32 <_dtoa_r+0x822>
 8006b38:	4618      	mov	r0, r3
 8006b3a:	301c      	adds	r0, #28
 8006b3c:	e772      	b.n	8006a24 <_dtoa_r+0x814>
 8006b3e:	9b02      	ldr	r3, [sp, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	dc36      	bgt.n	8006bb2 <_dtoa_r+0x9a2>
 8006b44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	dd33      	ble.n	8006bb2 <_dtoa_r+0x9a2>
 8006b4a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006b4e:	f1bb 0f00 	cmp.w	fp, #0
 8006b52:	d10d      	bne.n	8006b70 <_dtoa_r+0x960>
 8006b54:	4621      	mov	r1, r4
 8006b56:	465b      	mov	r3, fp
 8006b58:	2205      	movs	r2, #5
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f000 f9d0 	bl	8006f00 <__multadd>
 8006b60:	4601      	mov	r1, r0
 8006b62:	4604      	mov	r4, r0
 8006b64:	4650      	mov	r0, sl
 8006b66:	f000 fbe3 	bl	8007330 <__mcmp>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	f73f adb6 	bgt.w	80066dc <_dtoa_r+0x4cc>
 8006b70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b72:	9f08      	ldr	r7, [sp, #32]
 8006b74:	ea6f 0903 	mvn.w	r9, r3
 8006b78:	f04f 0800 	mov.w	r8, #0
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f000 f99c 	bl	8006ebc <_Bfree>
 8006b84:	2e00      	cmp	r6, #0
 8006b86:	f43f aea4 	beq.w	80068d2 <_dtoa_r+0x6c2>
 8006b8a:	f1b8 0f00 	cmp.w	r8, #0
 8006b8e:	d005      	beq.n	8006b9c <_dtoa_r+0x98c>
 8006b90:	45b0      	cmp	r8, r6
 8006b92:	d003      	beq.n	8006b9c <_dtoa_r+0x98c>
 8006b94:	4641      	mov	r1, r8
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 f990 	bl	8006ebc <_Bfree>
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f000 f98c 	bl	8006ebc <_Bfree>
 8006ba4:	e695      	b.n	80068d2 <_dtoa_r+0x6c2>
 8006ba6:	2400      	movs	r4, #0
 8006ba8:	4626      	mov	r6, r4
 8006baa:	e7e1      	b.n	8006b70 <_dtoa_r+0x960>
 8006bac:	46c1      	mov	r9, r8
 8006bae:	4626      	mov	r6, r4
 8006bb0:	e594      	b.n	80066dc <_dtoa_r+0x4cc>
 8006bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 80fc 	beq.w	8006db6 <_dtoa_r+0xba6>
 8006bbe:	2f00      	cmp	r7, #0
 8006bc0:	dd05      	ble.n	8006bce <_dtoa_r+0x9be>
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	463a      	mov	r2, r7
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f000 fb46 	bl	8007258 <__lshift>
 8006bcc:	4606      	mov	r6, r0
 8006bce:	f1b8 0f00 	cmp.w	r8, #0
 8006bd2:	d05c      	beq.n	8006c8e <_dtoa_r+0xa7e>
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	6871      	ldr	r1, [r6, #4]
 8006bd8:	f000 f930 	bl	8006e3c <_Balloc>
 8006bdc:	4607      	mov	r7, r0
 8006bde:	b928      	cbnz	r0, 8006bec <_dtoa_r+0x9dc>
 8006be0:	4602      	mov	r2, r0
 8006be2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006be6:	4b7e      	ldr	r3, [pc, #504]	; (8006de0 <_dtoa_r+0xbd0>)
 8006be8:	f7ff bb26 	b.w	8006238 <_dtoa_r+0x28>
 8006bec:	6932      	ldr	r2, [r6, #16]
 8006bee:	f106 010c 	add.w	r1, r6, #12
 8006bf2:	3202      	adds	r2, #2
 8006bf4:	0092      	lsls	r2, r2, #2
 8006bf6:	300c      	adds	r0, #12
 8006bf8:	f000 f912 	bl	8006e20 <memcpy>
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	4639      	mov	r1, r7
 8006c00:	4628      	mov	r0, r5
 8006c02:	f000 fb29 	bl	8007258 <__lshift>
 8006c06:	46b0      	mov	r8, r6
 8006c08:	4606      	mov	r6, r0
 8006c0a:	9b08      	ldr	r3, [sp, #32]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	9302      	str	r3, [sp, #8]
 8006c10:	9b08      	ldr	r3, [sp, #32]
 8006c12:	445b      	add	r3, fp
 8006c14:	930a      	str	r3, [sp, #40]	; 0x28
 8006c16:	9b04      	ldr	r3, [sp, #16]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c1e:	9b02      	ldr	r3, [sp, #8]
 8006c20:	4621      	mov	r1, r4
 8006c22:	4650      	mov	r0, sl
 8006c24:	f103 3bff 	add.w	fp, r3, #4294967295
 8006c28:	f7ff fa62 	bl	80060f0 <quorem>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	4641      	mov	r1, r8
 8006c30:	3330      	adds	r3, #48	; 0x30
 8006c32:	9004      	str	r0, [sp, #16]
 8006c34:	4650      	mov	r0, sl
 8006c36:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c38:	f000 fb7a 	bl	8007330 <__mcmp>
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	9006      	str	r0, [sp, #24]
 8006c40:	4621      	mov	r1, r4
 8006c42:	4628      	mov	r0, r5
 8006c44:	f000 fb90 	bl	8007368 <__mdiff>
 8006c48:	68c2      	ldr	r2, [r0, #12]
 8006c4a:	4607      	mov	r7, r0
 8006c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c4e:	bb02      	cbnz	r2, 8006c92 <_dtoa_r+0xa82>
 8006c50:	4601      	mov	r1, r0
 8006c52:	4650      	mov	r0, sl
 8006c54:	f000 fb6c 	bl	8007330 <__mcmp>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c5c:	4639      	mov	r1, r7
 8006c5e:	4628      	mov	r0, r5
 8006c60:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006c64:	f000 f92a 	bl	8006ebc <_Bfree>
 8006c68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c6c:	9f02      	ldr	r7, [sp, #8]
 8006c6e:	ea43 0102 	orr.w	r1, r3, r2
 8006c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c74:	430b      	orrs	r3, r1
 8006c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c78:	d10d      	bne.n	8006c96 <_dtoa_r+0xa86>
 8006c7a:	2b39      	cmp	r3, #57	; 0x39
 8006c7c:	d027      	beq.n	8006cce <_dtoa_r+0xabe>
 8006c7e:	9a06      	ldr	r2, [sp, #24]
 8006c80:	2a00      	cmp	r2, #0
 8006c82:	dd01      	ble.n	8006c88 <_dtoa_r+0xa78>
 8006c84:	9b04      	ldr	r3, [sp, #16]
 8006c86:	3331      	adds	r3, #49	; 0x31
 8006c88:	f88b 3000 	strb.w	r3, [fp]
 8006c8c:	e776      	b.n	8006b7c <_dtoa_r+0x96c>
 8006c8e:	4630      	mov	r0, r6
 8006c90:	e7b9      	b.n	8006c06 <_dtoa_r+0x9f6>
 8006c92:	2201      	movs	r2, #1
 8006c94:	e7e2      	b.n	8006c5c <_dtoa_r+0xa4c>
 8006c96:	9906      	ldr	r1, [sp, #24]
 8006c98:	2900      	cmp	r1, #0
 8006c9a:	db04      	blt.n	8006ca6 <_dtoa_r+0xa96>
 8006c9c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006c9e:	4301      	orrs	r1, r0
 8006ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ca2:	4301      	orrs	r1, r0
 8006ca4:	d120      	bne.n	8006ce8 <_dtoa_r+0xad8>
 8006ca6:	2a00      	cmp	r2, #0
 8006ca8:	ddee      	ble.n	8006c88 <_dtoa_r+0xa78>
 8006caa:	4651      	mov	r1, sl
 8006cac:	2201      	movs	r2, #1
 8006cae:	4628      	mov	r0, r5
 8006cb0:	9302      	str	r3, [sp, #8]
 8006cb2:	f000 fad1 	bl	8007258 <__lshift>
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	4682      	mov	sl, r0
 8006cba:	f000 fb39 	bl	8007330 <__mcmp>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	9b02      	ldr	r3, [sp, #8]
 8006cc2:	dc02      	bgt.n	8006cca <_dtoa_r+0xaba>
 8006cc4:	d1e0      	bne.n	8006c88 <_dtoa_r+0xa78>
 8006cc6:	07da      	lsls	r2, r3, #31
 8006cc8:	d5de      	bpl.n	8006c88 <_dtoa_r+0xa78>
 8006cca:	2b39      	cmp	r3, #57	; 0x39
 8006ccc:	d1da      	bne.n	8006c84 <_dtoa_r+0xa74>
 8006cce:	2339      	movs	r3, #57	; 0x39
 8006cd0:	f88b 3000 	strb.w	r3, [fp]
 8006cd4:	463b      	mov	r3, r7
 8006cd6:	461f      	mov	r7, r3
 8006cd8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	2a39      	cmp	r2, #57	; 0x39
 8006ce0:	d050      	beq.n	8006d84 <_dtoa_r+0xb74>
 8006ce2:	3201      	adds	r2, #1
 8006ce4:	701a      	strb	r2, [r3, #0]
 8006ce6:	e749      	b.n	8006b7c <_dtoa_r+0x96c>
 8006ce8:	2a00      	cmp	r2, #0
 8006cea:	dd03      	ble.n	8006cf4 <_dtoa_r+0xae4>
 8006cec:	2b39      	cmp	r3, #57	; 0x39
 8006cee:	d0ee      	beq.n	8006cce <_dtoa_r+0xabe>
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	e7c9      	b.n	8006c88 <_dtoa_r+0xa78>
 8006cf4:	9a02      	ldr	r2, [sp, #8]
 8006cf6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006cf8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006cfc:	428a      	cmp	r2, r1
 8006cfe:	d02a      	beq.n	8006d56 <_dtoa_r+0xb46>
 8006d00:	4651      	mov	r1, sl
 8006d02:	2300      	movs	r3, #0
 8006d04:	220a      	movs	r2, #10
 8006d06:	4628      	mov	r0, r5
 8006d08:	f000 f8fa 	bl	8006f00 <__multadd>
 8006d0c:	45b0      	cmp	r8, r6
 8006d0e:	4682      	mov	sl, r0
 8006d10:	f04f 0300 	mov.w	r3, #0
 8006d14:	f04f 020a 	mov.w	r2, #10
 8006d18:	4641      	mov	r1, r8
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	d107      	bne.n	8006d2e <_dtoa_r+0xb1e>
 8006d1e:	f000 f8ef 	bl	8006f00 <__multadd>
 8006d22:	4680      	mov	r8, r0
 8006d24:	4606      	mov	r6, r0
 8006d26:	9b02      	ldr	r3, [sp, #8]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	9302      	str	r3, [sp, #8]
 8006d2c:	e777      	b.n	8006c1e <_dtoa_r+0xa0e>
 8006d2e:	f000 f8e7 	bl	8006f00 <__multadd>
 8006d32:	4631      	mov	r1, r6
 8006d34:	4680      	mov	r8, r0
 8006d36:	2300      	movs	r3, #0
 8006d38:	220a      	movs	r2, #10
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	f000 f8e0 	bl	8006f00 <__multadd>
 8006d40:	4606      	mov	r6, r0
 8006d42:	e7f0      	b.n	8006d26 <_dtoa_r+0xb16>
 8006d44:	f1bb 0f00 	cmp.w	fp, #0
 8006d48:	bfcc      	ite	gt
 8006d4a:	465f      	movgt	r7, fp
 8006d4c:	2701      	movle	r7, #1
 8006d4e:	f04f 0800 	mov.w	r8, #0
 8006d52:	9a08      	ldr	r2, [sp, #32]
 8006d54:	4417      	add	r7, r2
 8006d56:	4651      	mov	r1, sl
 8006d58:	2201      	movs	r2, #1
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	9302      	str	r3, [sp, #8]
 8006d5e:	f000 fa7b 	bl	8007258 <__lshift>
 8006d62:	4621      	mov	r1, r4
 8006d64:	4682      	mov	sl, r0
 8006d66:	f000 fae3 	bl	8007330 <__mcmp>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	dcb2      	bgt.n	8006cd4 <_dtoa_r+0xac4>
 8006d6e:	d102      	bne.n	8006d76 <_dtoa_r+0xb66>
 8006d70:	9b02      	ldr	r3, [sp, #8]
 8006d72:	07db      	lsls	r3, r3, #31
 8006d74:	d4ae      	bmi.n	8006cd4 <_dtoa_r+0xac4>
 8006d76:	463b      	mov	r3, r7
 8006d78:	461f      	mov	r7, r3
 8006d7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d7e:	2a30      	cmp	r2, #48	; 0x30
 8006d80:	d0fa      	beq.n	8006d78 <_dtoa_r+0xb68>
 8006d82:	e6fb      	b.n	8006b7c <_dtoa_r+0x96c>
 8006d84:	9a08      	ldr	r2, [sp, #32]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d1a5      	bne.n	8006cd6 <_dtoa_r+0xac6>
 8006d8a:	2331      	movs	r3, #49	; 0x31
 8006d8c:	f109 0901 	add.w	r9, r9, #1
 8006d90:	7013      	strb	r3, [r2, #0]
 8006d92:	e6f3      	b.n	8006b7c <_dtoa_r+0x96c>
 8006d94:	4b13      	ldr	r3, [pc, #76]	; (8006de4 <_dtoa_r+0xbd4>)
 8006d96:	f7ff baa7 	b.w	80062e8 <_dtoa_r+0xd8>
 8006d9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f47f aa80 	bne.w	80062a2 <_dtoa_r+0x92>
 8006da2:	4b11      	ldr	r3, [pc, #68]	; (8006de8 <_dtoa_r+0xbd8>)
 8006da4:	f7ff baa0 	b.w	80062e8 <_dtoa_r+0xd8>
 8006da8:	f1bb 0f00 	cmp.w	fp, #0
 8006dac:	dc03      	bgt.n	8006db6 <_dtoa_r+0xba6>
 8006dae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	f73f aecc 	bgt.w	8006b4e <_dtoa_r+0x93e>
 8006db6:	9f08      	ldr	r7, [sp, #32]
 8006db8:	4621      	mov	r1, r4
 8006dba:	4650      	mov	r0, sl
 8006dbc:	f7ff f998 	bl	80060f0 <quorem>
 8006dc0:	9a08      	ldr	r2, [sp, #32]
 8006dc2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006dc6:	f807 3b01 	strb.w	r3, [r7], #1
 8006dca:	1aba      	subs	r2, r7, r2
 8006dcc:	4593      	cmp	fp, r2
 8006dce:	ddb9      	ble.n	8006d44 <_dtoa_r+0xb34>
 8006dd0:	4651      	mov	r1, sl
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	220a      	movs	r2, #10
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f000 f892 	bl	8006f00 <__multadd>
 8006ddc:	4682      	mov	sl, r0
 8006dde:	e7eb      	b.n	8006db8 <_dtoa_r+0xba8>
 8006de0:	08008667 	.word	0x08008667
 8006de4:	080085c0 	.word	0x080085c0
 8006de8:	080085e4 	.word	0x080085e4

08006dec <_localeconv_r>:
 8006dec:	4800      	ldr	r0, [pc, #0]	; (8006df0 <_localeconv_r+0x4>)
 8006dee:	4770      	bx	lr
 8006df0:	20000160 	.word	0x20000160

08006df4 <malloc>:
 8006df4:	4b02      	ldr	r3, [pc, #8]	; (8006e00 <malloc+0xc>)
 8006df6:	4601      	mov	r1, r0
 8006df8:	6818      	ldr	r0, [r3, #0]
 8006dfa:	f000 bbfb 	b.w	80075f4 <_malloc_r>
 8006dfe:	bf00      	nop
 8006e00:	2000000c 	.word	0x2000000c

08006e04 <memchr>:
 8006e04:	4603      	mov	r3, r0
 8006e06:	b510      	push	{r4, lr}
 8006e08:	b2c9      	uxtb	r1, r1
 8006e0a:	4402      	add	r2, r0
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	4618      	mov	r0, r3
 8006e10:	d101      	bne.n	8006e16 <memchr+0x12>
 8006e12:	2000      	movs	r0, #0
 8006e14:	e003      	b.n	8006e1e <memchr+0x1a>
 8006e16:	7804      	ldrb	r4, [r0, #0]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	428c      	cmp	r4, r1
 8006e1c:	d1f6      	bne.n	8006e0c <memchr+0x8>
 8006e1e:	bd10      	pop	{r4, pc}

08006e20 <memcpy>:
 8006e20:	440a      	add	r2, r1
 8006e22:	4291      	cmp	r1, r2
 8006e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e28:	d100      	bne.n	8006e2c <memcpy+0xc>
 8006e2a:	4770      	bx	lr
 8006e2c:	b510      	push	{r4, lr}
 8006e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e32:	4291      	cmp	r1, r2
 8006e34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e38:	d1f9      	bne.n	8006e2e <memcpy+0xe>
 8006e3a:	bd10      	pop	{r4, pc}

08006e3c <_Balloc>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e40:	4604      	mov	r4, r0
 8006e42:	460d      	mov	r5, r1
 8006e44:	b976      	cbnz	r6, 8006e64 <_Balloc+0x28>
 8006e46:	2010      	movs	r0, #16
 8006e48:	f7ff ffd4 	bl	8006df4 <malloc>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	6260      	str	r0, [r4, #36]	; 0x24
 8006e50:	b920      	cbnz	r0, 8006e5c <_Balloc+0x20>
 8006e52:	2166      	movs	r1, #102	; 0x66
 8006e54:	4b17      	ldr	r3, [pc, #92]	; (8006eb4 <_Balloc+0x78>)
 8006e56:	4818      	ldr	r0, [pc, #96]	; (8006eb8 <_Balloc+0x7c>)
 8006e58:	f000 fd92 	bl	8007980 <__assert_func>
 8006e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e60:	6006      	str	r6, [r0, #0]
 8006e62:	60c6      	str	r6, [r0, #12]
 8006e64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e66:	68f3      	ldr	r3, [r6, #12]
 8006e68:	b183      	cbz	r3, 8006e8c <_Balloc+0x50>
 8006e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e72:	b9b8      	cbnz	r0, 8006ea4 <_Balloc+0x68>
 8006e74:	2101      	movs	r1, #1
 8006e76:	fa01 f605 	lsl.w	r6, r1, r5
 8006e7a:	1d72      	adds	r2, r6, #5
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	0092      	lsls	r2, r2, #2
 8006e80:	f000 fb5e 	bl	8007540 <_calloc_r>
 8006e84:	b160      	cbz	r0, 8006ea0 <_Balloc+0x64>
 8006e86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e8a:	e00e      	b.n	8006eaa <_Balloc+0x6e>
 8006e8c:	2221      	movs	r2, #33	; 0x21
 8006e8e:	2104      	movs	r1, #4
 8006e90:	4620      	mov	r0, r4
 8006e92:	f000 fb55 	bl	8007540 <_calloc_r>
 8006e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e98:	60f0      	str	r0, [r6, #12]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1e4      	bne.n	8006e6a <_Balloc+0x2e>
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	6802      	ldr	r2, [r0, #0]
 8006ea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006eb0:	e7f7      	b.n	8006ea2 <_Balloc+0x66>
 8006eb2:	bf00      	nop
 8006eb4:	080085f1 	.word	0x080085f1
 8006eb8:	08008678 	.word	0x08008678

08006ebc <_Bfree>:
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	b976      	cbnz	r6, 8006ee4 <_Bfree+0x28>
 8006ec6:	2010      	movs	r0, #16
 8006ec8:	f7ff ff94 	bl	8006df4 <malloc>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	6268      	str	r0, [r5, #36]	; 0x24
 8006ed0:	b920      	cbnz	r0, 8006edc <_Bfree+0x20>
 8006ed2:	218a      	movs	r1, #138	; 0x8a
 8006ed4:	4b08      	ldr	r3, [pc, #32]	; (8006ef8 <_Bfree+0x3c>)
 8006ed6:	4809      	ldr	r0, [pc, #36]	; (8006efc <_Bfree+0x40>)
 8006ed8:	f000 fd52 	bl	8007980 <__assert_func>
 8006edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ee0:	6006      	str	r6, [r0, #0]
 8006ee2:	60c6      	str	r6, [r0, #12]
 8006ee4:	b13c      	cbz	r4, 8006ef6 <_Bfree+0x3a>
 8006ee6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ee8:	6862      	ldr	r2, [r4, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ef0:	6021      	str	r1, [r4, #0]
 8006ef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	080085f1 	.word	0x080085f1
 8006efc:	08008678 	.word	0x08008678

08006f00 <__multadd>:
 8006f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f04:	4698      	mov	r8, r3
 8006f06:	460c      	mov	r4, r1
 8006f08:	2300      	movs	r3, #0
 8006f0a:	690e      	ldr	r6, [r1, #16]
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	f101 0014 	add.w	r0, r1, #20
 8006f12:	6805      	ldr	r5, [r0, #0]
 8006f14:	3301      	adds	r3, #1
 8006f16:	b2a9      	uxth	r1, r5
 8006f18:	fb02 8101 	mla	r1, r2, r1, r8
 8006f1c:	0c2d      	lsrs	r5, r5, #16
 8006f1e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006f22:	fb02 c505 	mla	r5, r2, r5, ip
 8006f26:	b289      	uxth	r1, r1
 8006f28:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006f2c:	429e      	cmp	r6, r3
 8006f2e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006f32:	f840 1b04 	str.w	r1, [r0], #4
 8006f36:	dcec      	bgt.n	8006f12 <__multadd+0x12>
 8006f38:	f1b8 0f00 	cmp.w	r8, #0
 8006f3c:	d022      	beq.n	8006f84 <__multadd+0x84>
 8006f3e:	68a3      	ldr	r3, [r4, #8]
 8006f40:	42b3      	cmp	r3, r6
 8006f42:	dc19      	bgt.n	8006f78 <__multadd+0x78>
 8006f44:	6861      	ldr	r1, [r4, #4]
 8006f46:	4638      	mov	r0, r7
 8006f48:	3101      	adds	r1, #1
 8006f4a:	f7ff ff77 	bl	8006e3c <_Balloc>
 8006f4e:	4605      	mov	r5, r0
 8006f50:	b928      	cbnz	r0, 8006f5e <__multadd+0x5e>
 8006f52:	4602      	mov	r2, r0
 8006f54:	21b5      	movs	r1, #181	; 0xb5
 8006f56:	4b0d      	ldr	r3, [pc, #52]	; (8006f8c <__multadd+0x8c>)
 8006f58:	480d      	ldr	r0, [pc, #52]	; (8006f90 <__multadd+0x90>)
 8006f5a:	f000 fd11 	bl	8007980 <__assert_func>
 8006f5e:	6922      	ldr	r2, [r4, #16]
 8006f60:	f104 010c 	add.w	r1, r4, #12
 8006f64:	3202      	adds	r2, #2
 8006f66:	0092      	lsls	r2, r2, #2
 8006f68:	300c      	adds	r0, #12
 8006f6a:	f7ff ff59 	bl	8006e20 <memcpy>
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4638      	mov	r0, r7
 8006f72:	f7ff ffa3 	bl	8006ebc <_Bfree>
 8006f76:	462c      	mov	r4, r5
 8006f78:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006f82:	6126      	str	r6, [r4, #16]
 8006f84:	4620      	mov	r0, r4
 8006f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f8a:	bf00      	nop
 8006f8c:	08008667 	.word	0x08008667
 8006f90:	08008678 	.word	0x08008678

08006f94 <__hi0bits>:
 8006f94:	0c02      	lsrs	r2, r0, #16
 8006f96:	0412      	lsls	r2, r2, #16
 8006f98:	4603      	mov	r3, r0
 8006f9a:	b9ca      	cbnz	r2, 8006fd0 <__hi0bits+0x3c>
 8006f9c:	0403      	lsls	r3, r0, #16
 8006f9e:	2010      	movs	r0, #16
 8006fa0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006fa4:	bf04      	itt	eq
 8006fa6:	021b      	lsleq	r3, r3, #8
 8006fa8:	3008      	addeq	r0, #8
 8006faa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006fae:	bf04      	itt	eq
 8006fb0:	011b      	lsleq	r3, r3, #4
 8006fb2:	3004      	addeq	r0, #4
 8006fb4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006fb8:	bf04      	itt	eq
 8006fba:	009b      	lsleq	r3, r3, #2
 8006fbc:	3002      	addeq	r0, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	db05      	blt.n	8006fce <__hi0bits+0x3a>
 8006fc2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006fc6:	f100 0001 	add.w	r0, r0, #1
 8006fca:	bf08      	it	eq
 8006fcc:	2020      	moveq	r0, #32
 8006fce:	4770      	bx	lr
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	e7e5      	b.n	8006fa0 <__hi0bits+0xc>

08006fd4 <__lo0bits>:
 8006fd4:	6803      	ldr	r3, [r0, #0]
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	f013 0007 	ands.w	r0, r3, #7
 8006fdc:	d00b      	beq.n	8006ff6 <__lo0bits+0x22>
 8006fde:	07d9      	lsls	r1, r3, #31
 8006fe0:	d422      	bmi.n	8007028 <__lo0bits+0x54>
 8006fe2:	0798      	lsls	r0, r3, #30
 8006fe4:	bf49      	itett	mi
 8006fe6:	085b      	lsrmi	r3, r3, #1
 8006fe8:	089b      	lsrpl	r3, r3, #2
 8006fea:	2001      	movmi	r0, #1
 8006fec:	6013      	strmi	r3, [r2, #0]
 8006fee:	bf5c      	itt	pl
 8006ff0:	2002      	movpl	r0, #2
 8006ff2:	6013      	strpl	r3, [r2, #0]
 8006ff4:	4770      	bx	lr
 8006ff6:	b299      	uxth	r1, r3
 8006ff8:	b909      	cbnz	r1, 8006ffe <__lo0bits+0x2a>
 8006ffa:	2010      	movs	r0, #16
 8006ffc:	0c1b      	lsrs	r3, r3, #16
 8006ffe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007002:	bf04      	itt	eq
 8007004:	0a1b      	lsreq	r3, r3, #8
 8007006:	3008      	addeq	r0, #8
 8007008:	0719      	lsls	r1, r3, #28
 800700a:	bf04      	itt	eq
 800700c:	091b      	lsreq	r3, r3, #4
 800700e:	3004      	addeq	r0, #4
 8007010:	0799      	lsls	r1, r3, #30
 8007012:	bf04      	itt	eq
 8007014:	089b      	lsreq	r3, r3, #2
 8007016:	3002      	addeq	r0, #2
 8007018:	07d9      	lsls	r1, r3, #31
 800701a:	d403      	bmi.n	8007024 <__lo0bits+0x50>
 800701c:	085b      	lsrs	r3, r3, #1
 800701e:	f100 0001 	add.w	r0, r0, #1
 8007022:	d003      	beq.n	800702c <__lo0bits+0x58>
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	4770      	bx	lr
 8007028:	2000      	movs	r0, #0
 800702a:	4770      	bx	lr
 800702c:	2020      	movs	r0, #32
 800702e:	4770      	bx	lr

08007030 <__i2b>:
 8007030:	b510      	push	{r4, lr}
 8007032:	460c      	mov	r4, r1
 8007034:	2101      	movs	r1, #1
 8007036:	f7ff ff01 	bl	8006e3c <_Balloc>
 800703a:	4602      	mov	r2, r0
 800703c:	b928      	cbnz	r0, 800704a <__i2b+0x1a>
 800703e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007042:	4b04      	ldr	r3, [pc, #16]	; (8007054 <__i2b+0x24>)
 8007044:	4804      	ldr	r0, [pc, #16]	; (8007058 <__i2b+0x28>)
 8007046:	f000 fc9b 	bl	8007980 <__assert_func>
 800704a:	2301      	movs	r3, #1
 800704c:	6144      	str	r4, [r0, #20]
 800704e:	6103      	str	r3, [r0, #16]
 8007050:	bd10      	pop	{r4, pc}
 8007052:	bf00      	nop
 8007054:	08008667 	.word	0x08008667
 8007058:	08008678 	.word	0x08008678

0800705c <__multiply>:
 800705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007060:	4614      	mov	r4, r2
 8007062:	690a      	ldr	r2, [r1, #16]
 8007064:	6923      	ldr	r3, [r4, #16]
 8007066:	460d      	mov	r5, r1
 8007068:	429a      	cmp	r2, r3
 800706a:	bfbe      	ittt	lt
 800706c:	460b      	movlt	r3, r1
 800706e:	4625      	movlt	r5, r4
 8007070:	461c      	movlt	r4, r3
 8007072:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007076:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800707a:	68ab      	ldr	r3, [r5, #8]
 800707c:	6869      	ldr	r1, [r5, #4]
 800707e:	eb0a 0709 	add.w	r7, sl, r9
 8007082:	42bb      	cmp	r3, r7
 8007084:	b085      	sub	sp, #20
 8007086:	bfb8      	it	lt
 8007088:	3101      	addlt	r1, #1
 800708a:	f7ff fed7 	bl	8006e3c <_Balloc>
 800708e:	b930      	cbnz	r0, 800709e <__multiply+0x42>
 8007090:	4602      	mov	r2, r0
 8007092:	f240 115d 	movw	r1, #349	; 0x15d
 8007096:	4b41      	ldr	r3, [pc, #260]	; (800719c <__multiply+0x140>)
 8007098:	4841      	ldr	r0, [pc, #260]	; (80071a0 <__multiply+0x144>)
 800709a:	f000 fc71 	bl	8007980 <__assert_func>
 800709e:	f100 0614 	add.w	r6, r0, #20
 80070a2:	4633      	mov	r3, r6
 80070a4:	2200      	movs	r2, #0
 80070a6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80070aa:	4543      	cmp	r3, r8
 80070ac:	d31e      	bcc.n	80070ec <__multiply+0x90>
 80070ae:	f105 0c14 	add.w	ip, r5, #20
 80070b2:	f104 0314 	add.w	r3, r4, #20
 80070b6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80070ba:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80070be:	9202      	str	r2, [sp, #8]
 80070c0:	ebac 0205 	sub.w	r2, ip, r5
 80070c4:	3a15      	subs	r2, #21
 80070c6:	f022 0203 	bic.w	r2, r2, #3
 80070ca:	3204      	adds	r2, #4
 80070cc:	f105 0115 	add.w	r1, r5, #21
 80070d0:	458c      	cmp	ip, r1
 80070d2:	bf38      	it	cc
 80070d4:	2204      	movcc	r2, #4
 80070d6:	9201      	str	r2, [sp, #4]
 80070d8:	9a02      	ldr	r2, [sp, #8]
 80070da:	9303      	str	r3, [sp, #12]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d808      	bhi.n	80070f2 <__multiply+0x96>
 80070e0:	2f00      	cmp	r7, #0
 80070e2:	dc55      	bgt.n	8007190 <__multiply+0x134>
 80070e4:	6107      	str	r7, [r0, #16]
 80070e6:	b005      	add	sp, #20
 80070e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ec:	f843 2b04 	str.w	r2, [r3], #4
 80070f0:	e7db      	b.n	80070aa <__multiply+0x4e>
 80070f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80070f6:	f1ba 0f00 	cmp.w	sl, #0
 80070fa:	d020      	beq.n	800713e <__multiply+0xe2>
 80070fc:	46b1      	mov	r9, r6
 80070fe:	2200      	movs	r2, #0
 8007100:	f105 0e14 	add.w	lr, r5, #20
 8007104:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007108:	f8d9 b000 	ldr.w	fp, [r9]
 800710c:	b2a1      	uxth	r1, r4
 800710e:	fa1f fb8b 	uxth.w	fp, fp
 8007112:	fb0a b101 	mla	r1, sl, r1, fp
 8007116:	4411      	add	r1, r2
 8007118:	f8d9 2000 	ldr.w	r2, [r9]
 800711c:	0c24      	lsrs	r4, r4, #16
 800711e:	0c12      	lsrs	r2, r2, #16
 8007120:	fb0a 2404 	mla	r4, sl, r4, r2
 8007124:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007128:	b289      	uxth	r1, r1
 800712a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800712e:	45f4      	cmp	ip, lr
 8007130:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007134:	f849 1b04 	str.w	r1, [r9], #4
 8007138:	d8e4      	bhi.n	8007104 <__multiply+0xa8>
 800713a:	9901      	ldr	r1, [sp, #4]
 800713c:	5072      	str	r2, [r6, r1]
 800713e:	9a03      	ldr	r2, [sp, #12]
 8007140:	3304      	adds	r3, #4
 8007142:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007146:	f1b9 0f00 	cmp.w	r9, #0
 800714a:	d01f      	beq.n	800718c <__multiply+0x130>
 800714c:	46b6      	mov	lr, r6
 800714e:	f04f 0a00 	mov.w	sl, #0
 8007152:	6834      	ldr	r4, [r6, #0]
 8007154:	f105 0114 	add.w	r1, r5, #20
 8007158:	880a      	ldrh	r2, [r1, #0]
 800715a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800715e:	b2a4      	uxth	r4, r4
 8007160:	fb09 b202 	mla	r2, r9, r2, fp
 8007164:	4492      	add	sl, r2
 8007166:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800716a:	f84e 4b04 	str.w	r4, [lr], #4
 800716e:	f851 4b04 	ldr.w	r4, [r1], #4
 8007172:	f8be 2000 	ldrh.w	r2, [lr]
 8007176:	0c24      	lsrs	r4, r4, #16
 8007178:	fb09 2404 	mla	r4, r9, r4, r2
 800717c:	458c      	cmp	ip, r1
 800717e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007182:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007186:	d8e7      	bhi.n	8007158 <__multiply+0xfc>
 8007188:	9a01      	ldr	r2, [sp, #4]
 800718a:	50b4      	str	r4, [r6, r2]
 800718c:	3604      	adds	r6, #4
 800718e:	e7a3      	b.n	80070d8 <__multiply+0x7c>
 8007190:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1a5      	bne.n	80070e4 <__multiply+0x88>
 8007198:	3f01      	subs	r7, #1
 800719a:	e7a1      	b.n	80070e0 <__multiply+0x84>
 800719c:	08008667 	.word	0x08008667
 80071a0:	08008678 	.word	0x08008678

080071a4 <__pow5mult>:
 80071a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a8:	4615      	mov	r5, r2
 80071aa:	f012 0203 	ands.w	r2, r2, #3
 80071ae:	4606      	mov	r6, r0
 80071b0:	460f      	mov	r7, r1
 80071b2:	d007      	beq.n	80071c4 <__pow5mult+0x20>
 80071b4:	4c25      	ldr	r4, [pc, #148]	; (800724c <__pow5mult+0xa8>)
 80071b6:	3a01      	subs	r2, #1
 80071b8:	2300      	movs	r3, #0
 80071ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071be:	f7ff fe9f 	bl	8006f00 <__multadd>
 80071c2:	4607      	mov	r7, r0
 80071c4:	10ad      	asrs	r5, r5, #2
 80071c6:	d03d      	beq.n	8007244 <__pow5mult+0xa0>
 80071c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071ca:	b97c      	cbnz	r4, 80071ec <__pow5mult+0x48>
 80071cc:	2010      	movs	r0, #16
 80071ce:	f7ff fe11 	bl	8006df4 <malloc>
 80071d2:	4602      	mov	r2, r0
 80071d4:	6270      	str	r0, [r6, #36]	; 0x24
 80071d6:	b928      	cbnz	r0, 80071e4 <__pow5mult+0x40>
 80071d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80071dc:	4b1c      	ldr	r3, [pc, #112]	; (8007250 <__pow5mult+0xac>)
 80071de:	481d      	ldr	r0, [pc, #116]	; (8007254 <__pow5mult+0xb0>)
 80071e0:	f000 fbce 	bl	8007980 <__assert_func>
 80071e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071e8:	6004      	str	r4, [r0, #0]
 80071ea:	60c4      	str	r4, [r0, #12]
 80071ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80071f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071f4:	b94c      	cbnz	r4, 800720a <__pow5mult+0x66>
 80071f6:	f240 2171 	movw	r1, #625	; 0x271
 80071fa:	4630      	mov	r0, r6
 80071fc:	f7ff ff18 	bl	8007030 <__i2b>
 8007200:	2300      	movs	r3, #0
 8007202:	4604      	mov	r4, r0
 8007204:	f8c8 0008 	str.w	r0, [r8, #8]
 8007208:	6003      	str	r3, [r0, #0]
 800720a:	f04f 0900 	mov.w	r9, #0
 800720e:	07eb      	lsls	r3, r5, #31
 8007210:	d50a      	bpl.n	8007228 <__pow5mult+0x84>
 8007212:	4639      	mov	r1, r7
 8007214:	4622      	mov	r2, r4
 8007216:	4630      	mov	r0, r6
 8007218:	f7ff ff20 	bl	800705c <__multiply>
 800721c:	4680      	mov	r8, r0
 800721e:	4639      	mov	r1, r7
 8007220:	4630      	mov	r0, r6
 8007222:	f7ff fe4b 	bl	8006ebc <_Bfree>
 8007226:	4647      	mov	r7, r8
 8007228:	106d      	asrs	r5, r5, #1
 800722a:	d00b      	beq.n	8007244 <__pow5mult+0xa0>
 800722c:	6820      	ldr	r0, [r4, #0]
 800722e:	b938      	cbnz	r0, 8007240 <__pow5mult+0x9c>
 8007230:	4622      	mov	r2, r4
 8007232:	4621      	mov	r1, r4
 8007234:	4630      	mov	r0, r6
 8007236:	f7ff ff11 	bl	800705c <__multiply>
 800723a:	6020      	str	r0, [r4, #0]
 800723c:	f8c0 9000 	str.w	r9, [r0]
 8007240:	4604      	mov	r4, r0
 8007242:	e7e4      	b.n	800720e <__pow5mult+0x6a>
 8007244:	4638      	mov	r0, r7
 8007246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800724a:	bf00      	nop
 800724c:	080087c8 	.word	0x080087c8
 8007250:	080085f1 	.word	0x080085f1
 8007254:	08008678 	.word	0x08008678

08007258 <__lshift>:
 8007258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800725c:	460c      	mov	r4, r1
 800725e:	4607      	mov	r7, r0
 8007260:	4691      	mov	r9, r2
 8007262:	6923      	ldr	r3, [r4, #16]
 8007264:	6849      	ldr	r1, [r1, #4]
 8007266:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800726a:	68a3      	ldr	r3, [r4, #8]
 800726c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007270:	f108 0601 	add.w	r6, r8, #1
 8007274:	42b3      	cmp	r3, r6
 8007276:	db0b      	blt.n	8007290 <__lshift+0x38>
 8007278:	4638      	mov	r0, r7
 800727a:	f7ff fddf 	bl	8006e3c <_Balloc>
 800727e:	4605      	mov	r5, r0
 8007280:	b948      	cbnz	r0, 8007296 <__lshift+0x3e>
 8007282:	4602      	mov	r2, r0
 8007284:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007288:	4b27      	ldr	r3, [pc, #156]	; (8007328 <__lshift+0xd0>)
 800728a:	4828      	ldr	r0, [pc, #160]	; (800732c <__lshift+0xd4>)
 800728c:	f000 fb78 	bl	8007980 <__assert_func>
 8007290:	3101      	adds	r1, #1
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	e7ee      	b.n	8007274 <__lshift+0x1c>
 8007296:	2300      	movs	r3, #0
 8007298:	f100 0114 	add.w	r1, r0, #20
 800729c:	f100 0210 	add.w	r2, r0, #16
 80072a0:	4618      	mov	r0, r3
 80072a2:	4553      	cmp	r3, sl
 80072a4:	db33      	blt.n	800730e <__lshift+0xb6>
 80072a6:	6920      	ldr	r0, [r4, #16]
 80072a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072ac:	f104 0314 	add.w	r3, r4, #20
 80072b0:	f019 091f 	ands.w	r9, r9, #31
 80072b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80072bc:	d02b      	beq.n	8007316 <__lshift+0xbe>
 80072be:	468a      	mov	sl, r1
 80072c0:	2200      	movs	r2, #0
 80072c2:	f1c9 0e20 	rsb	lr, r9, #32
 80072c6:	6818      	ldr	r0, [r3, #0]
 80072c8:	fa00 f009 	lsl.w	r0, r0, r9
 80072cc:	4302      	orrs	r2, r0
 80072ce:	f84a 2b04 	str.w	r2, [sl], #4
 80072d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072d6:	459c      	cmp	ip, r3
 80072d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80072dc:	d8f3      	bhi.n	80072c6 <__lshift+0x6e>
 80072de:	ebac 0304 	sub.w	r3, ip, r4
 80072e2:	3b15      	subs	r3, #21
 80072e4:	f023 0303 	bic.w	r3, r3, #3
 80072e8:	3304      	adds	r3, #4
 80072ea:	f104 0015 	add.w	r0, r4, #21
 80072ee:	4584      	cmp	ip, r0
 80072f0:	bf38      	it	cc
 80072f2:	2304      	movcc	r3, #4
 80072f4:	50ca      	str	r2, [r1, r3]
 80072f6:	b10a      	cbz	r2, 80072fc <__lshift+0xa4>
 80072f8:	f108 0602 	add.w	r6, r8, #2
 80072fc:	3e01      	subs	r6, #1
 80072fe:	4638      	mov	r0, r7
 8007300:	4621      	mov	r1, r4
 8007302:	612e      	str	r6, [r5, #16]
 8007304:	f7ff fdda 	bl	8006ebc <_Bfree>
 8007308:	4628      	mov	r0, r5
 800730a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007312:	3301      	adds	r3, #1
 8007314:	e7c5      	b.n	80072a2 <__lshift+0x4a>
 8007316:	3904      	subs	r1, #4
 8007318:	f853 2b04 	ldr.w	r2, [r3], #4
 800731c:	459c      	cmp	ip, r3
 800731e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007322:	d8f9      	bhi.n	8007318 <__lshift+0xc0>
 8007324:	e7ea      	b.n	80072fc <__lshift+0xa4>
 8007326:	bf00      	nop
 8007328:	08008667 	.word	0x08008667
 800732c:	08008678 	.word	0x08008678

08007330 <__mcmp>:
 8007330:	4603      	mov	r3, r0
 8007332:	690a      	ldr	r2, [r1, #16]
 8007334:	6900      	ldr	r0, [r0, #16]
 8007336:	b530      	push	{r4, r5, lr}
 8007338:	1a80      	subs	r0, r0, r2
 800733a:	d10d      	bne.n	8007358 <__mcmp+0x28>
 800733c:	3314      	adds	r3, #20
 800733e:	3114      	adds	r1, #20
 8007340:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007344:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007348:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800734c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007350:	4295      	cmp	r5, r2
 8007352:	d002      	beq.n	800735a <__mcmp+0x2a>
 8007354:	d304      	bcc.n	8007360 <__mcmp+0x30>
 8007356:	2001      	movs	r0, #1
 8007358:	bd30      	pop	{r4, r5, pc}
 800735a:	42a3      	cmp	r3, r4
 800735c:	d3f4      	bcc.n	8007348 <__mcmp+0x18>
 800735e:	e7fb      	b.n	8007358 <__mcmp+0x28>
 8007360:	f04f 30ff 	mov.w	r0, #4294967295
 8007364:	e7f8      	b.n	8007358 <__mcmp+0x28>
	...

08007368 <__mdiff>:
 8007368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	460c      	mov	r4, r1
 800736e:	4606      	mov	r6, r0
 8007370:	4611      	mov	r1, r2
 8007372:	4620      	mov	r0, r4
 8007374:	4692      	mov	sl, r2
 8007376:	f7ff ffdb 	bl	8007330 <__mcmp>
 800737a:	1e05      	subs	r5, r0, #0
 800737c:	d111      	bne.n	80073a2 <__mdiff+0x3a>
 800737e:	4629      	mov	r1, r5
 8007380:	4630      	mov	r0, r6
 8007382:	f7ff fd5b 	bl	8006e3c <_Balloc>
 8007386:	4602      	mov	r2, r0
 8007388:	b928      	cbnz	r0, 8007396 <__mdiff+0x2e>
 800738a:	f240 2132 	movw	r1, #562	; 0x232
 800738e:	4b3c      	ldr	r3, [pc, #240]	; (8007480 <__mdiff+0x118>)
 8007390:	483c      	ldr	r0, [pc, #240]	; (8007484 <__mdiff+0x11c>)
 8007392:	f000 faf5 	bl	8007980 <__assert_func>
 8007396:	2301      	movs	r3, #1
 8007398:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800739c:	4610      	mov	r0, r2
 800739e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a2:	bfa4      	itt	ge
 80073a4:	4653      	movge	r3, sl
 80073a6:	46a2      	movge	sl, r4
 80073a8:	4630      	mov	r0, r6
 80073aa:	f8da 1004 	ldr.w	r1, [sl, #4]
 80073ae:	bfa6      	itte	ge
 80073b0:	461c      	movge	r4, r3
 80073b2:	2500      	movge	r5, #0
 80073b4:	2501      	movlt	r5, #1
 80073b6:	f7ff fd41 	bl	8006e3c <_Balloc>
 80073ba:	4602      	mov	r2, r0
 80073bc:	b918      	cbnz	r0, 80073c6 <__mdiff+0x5e>
 80073be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80073c2:	4b2f      	ldr	r3, [pc, #188]	; (8007480 <__mdiff+0x118>)
 80073c4:	e7e4      	b.n	8007390 <__mdiff+0x28>
 80073c6:	f100 0814 	add.w	r8, r0, #20
 80073ca:	f8da 7010 	ldr.w	r7, [sl, #16]
 80073ce:	60c5      	str	r5, [r0, #12]
 80073d0:	f04f 0c00 	mov.w	ip, #0
 80073d4:	f10a 0514 	add.w	r5, sl, #20
 80073d8:	f10a 0010 	add.w	r0, sl, #16
 80073dc:	46c2      	mov	sl, r8
 80073de:	6926      	ldr	r6, [r4, #16]
 80073e0:	f104 0914 	add.w	r9, r4, #20
 80073e4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80073e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80073ec:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80073f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80073f4:	fa1f f18b 	uxth.w	r1, fp
 80073f8:	4461      	add	r1, ip
 80073fa:	fa1f fc83 	uxth.w	ip, r3
 80073fe:	0c1b      	lsrs	r3, r3, #16
 8007400:	eba1 010c 	sub.w	r1, r1, ip
 8007404:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007408:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800740c:	b289      	uxth	r1, r1
 800740e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007412:	454e      	cmp	r6, r9
 8007414:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007418:	f84a 3b04 	str.w	r3, [sl], #4
 800741c:	d8e6      	bhi.n	80073ec <__mdiff+0x84>
 800741e:	1b33      	subs	r3, r6, r4
 8007420:	3b15      	subs	r3, #21
 8007422:	f023 0303 	bic.w	r3, r3, #3
 8007426:	3415      	adds	r4, #21
 8007428:	3304      	adds	r3, #4
 800742a:	42a6      	cmp	r6, r4
 800742c:	bf38      	it	cc
 800742e:	2304      	movcc	r3, #4
 8007430:	441d      	add	r5, r3
 8007432:	4443      	add	r3, r8
 8007434:	461e      	mov	r6, r3
 8007436:	462c      	mov	r4, r5
 8007438:	4574      	cmp	r4, lr
 800743a:	d30e      	bcc.n	800745a <__mdiff+0xf2>
 800743c:	f10e 0103 	add.w	r1, lr, #3
 8007440:	1b49      	subs	r1, r1, r5
 8007442:	f021 0103 	bic.w	r1, r1, #3
 8007446:	3d03      	subs	r5, #3
 8007448:	45ae      	cmp	lr, r5
 800744a:	bf38      	it	cc
 800744c:	2100      	movcc	r1, #0
 800744e:	4419      	add	r1, r3
 8007450:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007454:	b18b      	cbz	r3, 800747a <__mdiff+0x112>
 8007456:	6117      	str	r7, [r2, #16]
 8007458:	e7a0      	b.n	800739c <__mdiff+0x34>
 800745a:	f854 8b04 	ldr.w	r8, [r4], #4
 800745e:	fa1f f188 	uxth.w	r1, r8
 8007462:	4461      	add	r1, ip
 8007464:	1408      	asrs	r0, r1, #16
 8007466:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800746a:	b289      	uxth	r1, r1
 800746c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007470:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007474:	f846 1b04 	str.w	r1, [r6], #4
 8007478:	e7de      	b.n	8007438 <__mdiff+0xd0>
 800747a:	3f01      	subs	r7, #1
 800747c:	e7e8      	b.n	8007450 <__mdiff+0xe8>
 800747e:	bf00      	nop
 8007480:	08008667 	.word	0x08008667
 8007484:	08008678 	.word	0x08008678

08007488 <__d2b>:
 8007488:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800748c:	2101      	movs	r1, #1
 800748e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007492:	4690      	mov	r8, r2
 8007494:	461d      	mov	r5, r3
 8007496:	f7ff fcd1 	bl	8006e3c <_Balloc>
 800749a:	4604      	mov	r4, r0
 800749c:	b930      	cbnz	r0, 80074ac <__d2b+0x24>
 800749e:	4602      	mov	r2, r0
 80074a0:	f240 310a 	movw	r1, #778	; 0x30a
 80074a4:	4b24      	ldr	r3, [pc, #144]	; (8007538 <__d2b+0xb0>)
 80074a6:	4825      	ldr	r0, [pc, #148]	; (800753c <__d2b+0xb4>)
 80074a8:	f000 fa6a 	bl	8007980 <__assert_func>
 80074ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80074b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80074b4:	bb2d      	cbnz	r5, 8007502 <__d2b+0x7a>
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	f1b8 0300 	subs.w	r3, r8, #0
 80074bc:	d026      	beq.n	800750c <__d2b+0x84>
 80074be:	4668      	mov	r0, sp
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	f7ff fd87 	bl	8006fd4 <__lo0bits>
 80074c6:	9900      	ldr	r1, [sp, #0]
 80074c8:	b1f0      	cbz	r0, 8007508 <__d2b+0x80>
 80074ca:	9a01      	ldr	r2, [sp, #4]
 80074cc:	f1c0 0320 	rsb	r3, r0, #32
 80074d0:	fa02 f303 	lsl.w	r3, r2, r3
 80074d4:	430b      	orrs	r3, r1
 80074d6:	40c2      	lsrs	r2, r0
 80074d8:	6163      	str	r3, [r4, #20]
 80074da:	9201      	str	r2, [sp, #4]
 80074dc:	9b01      	ldr	r3, [sp, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	bf14      	ite	ne
 80074e2:	2102      	movne	r1, #2
 80074e4:	2101      	moveq	r1, #1
 80074e6:	61a3      	str	r3, [r4, #24]
 80074e8:	6121      	str	r1, [r4, #16]
 80074ea:	b1c5      	cbz	r5, 800751e <__d2b+0x96>
 80074ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80074f0:	4405      	add	r5, r0
 80074f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074f6:	603d      	str	r5, [r7, #0]
 80074f8:	6030      	str	r0, [r6, #0]
 80074fa:	4620      	mov	r0, r4
 80074fc:	b002      	add	sp, #8
 80074fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007506:	e7d6      	b.n	80074b6 <__d2b+0x2e>
 8007508:	6161      	str	r1, [r4, #20]
 800750a:	e7e7      	b.n	80074dc <__d2b+0x54>
 800750c:	a801      	add	r0, sp, #4
 800750e:	f7ff fd61 	bl	8006fd4 <__lo0bits>
 8007512:	2101      	movs	r1, #1
 8007514:	9b01      	ldr	r3, [sp, #4]
 8007516:	6121      	str	r1, [r4, #16]
 8007518:	6163      	str	r3, [r4, #20]
 800751a:	3020      	adds	r0, #32
 800751c:	e7e5      	b.n	80074ea <__d2b+0x62>
 800751e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007522:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007526:	6038      	str	r0, [r7, #0]
 8007528:	6918      	ldr	r0, [r3, #16]
 800752a:	f7ff fd33 	bl	8006f94 <__hi0bits>
 800752e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007532:	6031      	str	r1, [r6, #0]
 8007534:	e7e1      	b.n	80074fa <__d2b+0x72>
 8007536:	bf00      	nop
 8007538:	08008667 	.word	0x08008667
 800753c:	08008678 	.word	0x08008678

08007540 <_calloc_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	fb02 f501 	mul.w	r5, r2, r1
 8007546:	4629      	mov	r1, r5
 8007548:	f000 f854 	bl	80075f4 <_malloc_r>
 800754c:	4604      	mov	r4, r0
 800754e:	b118      	cbz	r0, 8007558 <_calloc_r+0x18>
 8007550:	462a      	mov	r2, r5
 8007552:	2100      	movs	r1, #0
 8007554:	f7fe f944 	bl	80057e0 <memset>
 8007558:	4620      	mov	r0, r4
 800755a:	bd38      	pop	{r3, r4, r5, pc}

0800755c <_free_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4605      	mov	r5, r0
 8007560:	2900      	cmp	r1, #0
 8007562:	d043      	beq.n	80075ec <_free_r+0x90>
 8007564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007568:	1f0c      	subs	r4, r1, #4
 800756a:	2b00      	cmp	r3, #0
 800756c:	bfb8      	it	lt
 800756e:	18e4      	addlt	r4, r4, r3
 8007570:	f000 fa62 	bl	8007a38 <__malloc_lock>
 8007574:	4a1e      	ldr	r2, [pc, #120]	; (80075f0 <_free_r+0x94>)
 8007576:	6813      	ldr	r3, [r2, #0]
 8007578:	4610      	mov	r0, r2
 800757a:	b933      	cbnz	r3, 800758a <_free_r+0x2e>
 800757c:	6063      	str	r3, [r4, #4]
 800757e:	6014      	str	r4, [r2, #0]
 8007580:	4628      	mov	r0, r5
 8007582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007586:	f000 ba5d 	b.w	8007a44 <__malloc_unlock>
 800758a:	42a3      	cmp	r3, r4
 800758c:	d90a      	bls.n	80075a4 <_free_r+0x48>
 800758e:	6821      	ldr	r1, [r4, #0]
 8007590:	1862      	adds	r2, r4, r1
 8007592:	4293      	cmp	r3, r2
 8007594:	bf01      	itttt	eq
 8007596:	681a      	ldreq	r2, [r3, #0]
 8007598:	685b      	ldreq	r3, [r3, #4]
 800759a:	1852      	addeq	r2, r2, r1
 800759c:	6022      	streq	r2, [r4, #0]
 800759e:	6063      	str	r3, [r4, #4]
 80075a0:	6004      	str	r4, [r0, #0]
 80075a2:	e7ed      	b.n	8007580 <_free_r+0x24>
 80075a4:	461a      	mov	r2, r3
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	b10b      	cbz	r3, 80075ae <_free_r+0x52>
 80075aa:	42a3      	cmp	r3, r4
 80075ac:	d9fa      	bls.n	80075a4 <_free_r+0x48>
 80075ae:	6811      	ldr	r1, [r2, #0]
 80075b0:	1850      	adds	r0, r2, r1
 80075b2:	42a0      	cmp	r0, r4
 80075b4:	d10b      	bne.n	80075ce <_free_r+0x72>
 80075b6:	6820      	ldr	r0, [r4, #0]
 80075b8:	4401      	add	r1, r0
 80075ba:	1850      	adds	r0, r2, r1
 80075bc:	4283      	cmp	r3, r0
 80075be:	6011      	str	r1, [r2, #0]
 80075c0:	d1de      	bne.n	8007580 <_free_r+0x24>
 80075c2:	6818      	ldr	r0, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	4401      	add	r1, r0
 80075c8:	6011      	str	r1, [r2, #0]
 80075ca:	6053      	str	r3, [r2, #4]
 80075cc:	e7d8      	b.n	8007580 <_free_r+0x24>
 80075ce:	d902      	bls.n	80075d6 <_free_r+0x7a>
 80075d0:	230c      	movs	r3, #12
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	e7d4      	b.n	8007580 <_free_r+0x24>
 80075d6:	6820      	ldr	r0, [r4, #0]
 80075d8:	1821      	adds	r1, r4, r0
 80075da:	428b      	cmp	r3, r1
 80075dc:	bf01      	itttt	eq
 80075de:	6819      	ldreq	r1, [r3, #0]
 80075e0:	685b      	ldreq	r3, [r3, #4]
 80075e2:	1809      	addeq	r1, r1, r0
 80075e4:	6021      	streq	r1, [r4, #0]
 80075e6:	6063      	str	r3, [r4, #4]
 80075e8:	6054      	str	r4, [r2, #4]
 80075ea:	e7c9      	b.n	8007580 <_free_r+0x24>
 80075ec:	bd38      	pop	{r3, r4, r5, pc}
 80075ee:	bf00      	nop
 80075f0:	200001fc 	.word	0x200001fc

080075f4 <_malloc_r>:
 80075f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f6:	1ccd      	adds	r5, r1, #3
 80075f8:	f025 0503 	bic.w	r5, r5, #3
 80075fc:	3508      	adds	r5, #8
 80075fe:	2d0c      	cmp	r5, #12
 8007600:	bf38      	it	cc
 8007602:	250c      	movcc	r5, #12
 8007604:	2d00      	cmp	r5, #0
 8007606:	4606      	mov	r6, r0
 8007608:	db01      	blt.n	800760e <_malloc_r+0x1a>
 800760a:	42a9      	cmp	r1, r5
 800760c:	d903      	bls.n	8007616 <_malloc_r+0x22>
 800760e:	230c      	movs	r3, #12
 8007610:	6033      	str	r3, [r6, #0]
 8007612:	2000      	movs	r0, #0
 8007614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007616:	f000 fa0f 	bl	8007a38 <__malloc_lock>
 800761a:	4921      	ldr	r1, [pc, #132]	; (80076a0 <_malloc_r+0xac>)
 800761c:	680a      	ldr	r2, [r1, #0]
 800761e:	4614      	mov	r4, r2
 8007620:	b99c      	cbnz	r4, 800764a <_malloc_r+0x56>
 8007622:	4f20      	ldr	r7, [pc, #128]	; (80076a4 <_malloc_r+0xb0>)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	b923      	cbnz	r3, 8007632 <_malloc_r+0x3e>
 8007628:	4621      	mov	r1, r4
 800762a:	4630      	mov	r0, r6
 800762c:	f000 f998 	bl	8007960 <_sbrk_r>
 8007630:	6038      	str	r0, [r7, #0]
 8007632:	4629      	mov	r1, r5
 8007634:	4630      	mov	r0, r6
 8007636:	f000 f993 	bl	8007960 <_sbrk_r>
 800763a:	1c43      	adds	r3, r0, #1
 800763c:	d123      	bne.n	8007686 <_malloc_r+0x92>
 800763e:	230c      	movs	r3, #12
 8007640:	4630      	mov	r0, r6
 8007642:	6033      	str	r3, [r6, #0]
 8007644:	f000 f9fe 	bl	8007a44 <__malloc_unlock>
 8007648:	e7e3      	b.n	8007612 <_malloc_r+0x1e>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	1b5b      	subs	r3, r3, r5
 800764e:	d417      	bmi.n	8007680 <_malloc_r+0x8c>
 8007650:	2b0b      	cmp	r3, #11
 8007652:	d903      	bls.n	800765c <_malloc_r+0x68>
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	441c      	add	r4, r3
 8007658:	6025      	str	r5, [r4, #0]
 800765a:	e004      	b.n	8007666 <_malloc_r+0x72>
 800765c:	6863      	ldr	r3, [r4, #4]
 800765e:	42a2      	cmp	r2, r4
 8007660:	bf0c      	ite	eq
 8007662:	600b      	streq	r3, [r1, #0]
 8007664:	6053      	strne	r3, [r2, #4]
 8007666:	4630      	mov	r0, r6
 8007668:	f000 f9ec 	bl	8007a44 <__malloc_unlock>
 800766c:	f104 000b 	add.w	r0, r4, #11
 8007670:	1d23      	adds	r3, r4, #4
 8007672:	f020 0007 	bic.w	r0, r0, #7
 8007676:	1ac2      	subs	r2, r0, r3
 8007678:	d0cc      	beq.n	8007614 <_malloc_r+0x20>
 800767a:	1a1b      	subs	r3, r3, r0
 800767c:	50a3      	str	r3, [r4, r2]
 800767e:	e7c9      	b.n	8007614 <_malloc_r+0x20>
 8007680:	4622      	mov	r2, r4
 8007682:	6864      	ldr	r4, [r4, #4]
 8007684:	e7cc      	b.n	8007620 <_malloc_r+0x2c>
 8007686:	1cc4      	adds	r4, r0, #3
 8007688:	f024 0403 	bic.w	r4, r4, #3
 800768c:	42a0      	cmp	r0, r4
 800768e:	d0e3      	beq.n	8007658 <_malloc_r+0x64>
 8007690:	1a21      	subs	r1, r4, r0
 8007692:	4630      	mov	r0, r6
 8007694:	f000 f964 	bl	8007960 <_sbrk_r>
 8007698:	3001      	adds	r0, #1
 800769a:	d1dd      	bne.n	8007658 <_malloc_r+0x64>
 800769c:	e7cf      	b.n	800763e <_malloc_r+0x4a>
 800769e:	bf00      	nop
 80076a0:	200001fc 	.word	0x200001fc
 80076a4:	20000200 	.word	0x20000200

080076a8 <__ssputs_r>:
 80076a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ac:	688e      	ldr	r6, [r1, #8]
 80076ae:	4682      	mov	sl, r0
 80076b0:	429e      	cmp	r6, r3
 80076b2:	460c      	mov	r4, r1
 80076b4:	4690      	mov	r8, r2
 80076b6:	461f      	mov	r7, r3
 80076b8:	d838      	bhi.n	800772c <__ssputs_r+0x84>
 80076ba:	898a      	ldrh	r2, [r1, #12]
 80076bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076c0:	d032      	beq.n	8007728 <__ssputs_r+0x80>
 80076c2:	6825      	ldr	r5, [r4, #0]
 80076c4:	6909      	ldr	r1, [r1, #16]
 80076c6:	3301      	adds	r3, #1
 80076c8:	eba5 0901 	sub.w	r9, r5, r1
 80076cc:	6965      	ldr	r5, [r4, #20]
 80076ce:	444b      	add	r3, r9
 80076d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076d8:	106d      	asrs	r5, r5, #1
 80076da:	429d      	cmp	r5, r3
 80076dc:	bf38      	it	cc
 80076de:	461d      	movcc	r5, r3
 80076e0:	0553      	lsls	r3, r2, #21
 80076e2:	d531      	bpl.n	8007748 <__ssputs_r+0xa0>
 80076e4:	4629      	mov	r1, r5
 80076e6:	f7ff ff85 	bl	80075f4 <_malloc_r>
 80076ea:	4606      	mov	r6, r0
 80076ec:	b950      	cbnz	r0, 8007704 <__ssputs_r+0x5c>
 80076ee:	230c      	movs	r3, #12
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295
 80076f4:	f8ca 3000 	str.w	r3, [sl]
 80076f8:	89a3      	ldrh	r3, [r4, #12]
 80076fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076fe:	81a3      	strh	r3, [r4, #12]
 8007700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007704:	464a      	mov	r2, r9
 8007706:	6921      	ldr	r1, [r4, #16]
 8007708:	f7ff fb8a 	bl	8006e20 <memcpy>
 800770c:	89a3      	ldrh	r3, [r4, #12]
 800770e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007716:	81a3      	strh	r3, [r4, #12]
 8007718:	6126      	str	r6, [r4, #16]
 800771a:	444e      	add	r6, r9
 800771c:	6026      	str	r6, [r4, #0]
 800771e:	463e      	mov	r6, r7
 8007720:	6165      	str	r5, [r4, #20]
 8007722:	eba5 0509 	sub.w	r5, r5, r9
 8007726:	60a5      	str	r5, [r4, #8]
 8007728:	42be      	cmp	r6, r7
 800772a:	d900      	bls.n	800772e <__ssputs_r+0x86>
 800772c:	463e      	mov	r6, r7
 800772e:	4632      	mov	r2, r6
 8007730:	4641      	mov	r1, r8
 8007732:	6820      	ldr	r0, [r4, #0]
 8007734:	f000 f966 	bl	8007a04 <memmove>
 8007738:	68a3      	ldr	r3, [r4, #8]
 800773a:	6822      	ldr	r2, [r4, #0]
 800773c:	1b9b      	subs	r3, r3, r6
 800773e:	4432      	add	r2, r6
 8007740:	2000      	movs	r0, #0
 8007742:	60a3      	str	r3, [r4, #8]
 8007744:	6022      	str	r2, [r4, #0]
 8007746:	e7db      	b.n	8007700 <__ssputs_r+0x58>
 8007748:	462a      	mov	r2, r5
 800774a:	f000 f981 	bl	8007a50 <_realloc_r>
 800774e:	4606      	mov	r6, r0
 8007750:	2800      	cmp	r0, #0
 8007752:	d1e1      	bne.n	8007718 <__ssputs_r+0x70>
 8007754:	4650      	mov	r0, sl
 8007756:	6921      	ldr	r1, [r4, #16]
 8007758:	f7ff ff00 	bl	800755c <_free_r>
 800775c:	e7c7      	b.n	80076ee <__ssputs_r+0x46>
	...

08007760 <_svfiprintf_r>:
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	4698      	mov	r8, r3
 8007766:	898b      	ldrh	r3, [r1, #12]
 8007768:	4607      	mov	r7, r0
 800776a:	061b      	lsls	r3, r3, #24
 800776c:	460d      	mov	r5, r1
 800776e:	4614      	mov	r4, r2
 8007770:	b09d      	sub	sp, #116	; 0x74
 8007772:	d50e      	bpl.n	8007792 <_svfiprintf_r+0x32>
 8007774:	690b      	ldr	r3, [r1, #16]
 8007776:	b963      	cbnz	r3, 8007792 <_svfiprintf_r+0x32>
 8007778:	2140      	movs	r1, #64	; 0x40
 800777a:	f7ff ff3b 	bl	80075f4 <_malloc_r>
 800777e:	6028      	str	r0, [r5, #0]
 8007780:	6128      	str	r0, [r5, #16]
 8007782:	b920      	cbnz	r0, 800778e <_svfiprintf_r+0x2e>
 8007784:	230c      	movs	r3, #12
 8007786:	603b      	str	r3, [r7, #0]
 8007788:	f04f 30ff 	mov.w	r0, #4294967295
 800778c:	e0d1      	b.n	8007932 <_svfiprintf_r+0x1d2>
 800778e:	2340      	movs	r3, #64	; 0x40
 8007790:	616b      	str	r3, [r5, #20]
 8007792:	2300      	movs	r3, #0
 8007794:	9309      	str	r3, [sp, #36]	; 0x24
 8007796:	2320      	movs	r3, #32
 8007798:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800779c:	2330      	movs	r3, #48	; 0x30
 800779e:	f04f 0901 	mov.w	r9, #1
 80077a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80077a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800794c <_svfiprintf_r+0x1ec>
 80077aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077ae:	4623      	mov	r3, r4
 80077b0:	469a      	mov	sl, r3
 80077b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077b6:	b10a      	cbz	r2, 80077bc <_svfiprintf_r+0x5c>
 80077b8:	2a25      	cmp	r2, #37	; 0x25
 80077ba:	d1f9      	bne.n	80077b0 <_svfiprintf_r+0x50>
 80077bc:	ebba 0b04 	subs.w	fp, sl, r4
 80077c0:	d00b      	beq.n	80077da <_svfiprintf_r+0x7a>
 80077c2:	465b      	mov	r3, fp
 80077c4:	4622      	mov	r2, r4
 80077c6:	4629      	mov	r1, r5
 80077c8:	4638      	mov	r0, r7
 80077ca:	f7ff ff6d 	bl	80076a8 <__ssputs_r>
 80077ce:	3001      	adds	r0, #1
 80077d0:	f000 80aa 	beq.w	8007928 <_svfiprintf_r+0x1c8>
 80077d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077d6:	445a      	add	r2, fp
 80077d8:	9209      	str	r2, [sp, #36]	; 0x24
 80077da:	f89a 3000 	ldrb.w	r3, [sl]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 80a2 	beq.w	8007928 <_svfiprintf_r+0x1c8>
 80077e4:	2300      	movs	r3, #0
 80077e6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077ee:	f10a 0a01 	add.w	sl, sl, #1
 80077f2:	9304      	str	r3, [sp, #16]
 80077f4:	9307      	str	r3, [sp, #28]
 80077f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077fa:	931a      	str	r3, [sp, #104]	; 0x68
 80077fc:	4654      	mov	r4, sl
 80077fe:	2205      	movs	r2, #5
 8007800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007804:	4851      	ldr	r0, [pc, #324]	; (800794c <_svfiprintf_r+0x1ec>)
 8007806:	f7ff fafd 	bl	8006e04 <memchr>
 800780a:	9a04      	ldr	r2, [sp, #16]
 800780c:	b9d8      	cbnz	r0, 8007846 <_svfiprintf_r+0xe6>
 800780e:	06d0      	lsls	r0, r2, #27
 8007810:	bf44      	itt	mi
 8007812:	2320      	movmi	r3, #32
 8007814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007818:	0711      	lsls	r1, r2, #28
 800781a:	bf44      	itt	mi
 800781c:	232b      	movmi	r3, #43	; 0x2b
 800781e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007822:	f89a 3000 	ldrb.w	r3, [sl]
 8007826:	2b2a      	cmp	r3, #42	; 0x2a
 8007828:	d015      	beq.n	8007856 <_svfiprintf_r+0xf6>
 800782a:	4654      	mov	r4, sl
 800782c:	2000      	movs	r0, #0
 800782e:	f04f 0c0a 	mov.w	ip, #10
 8007832:	9a07      	ldr	r2, [sp, #28]
 8007834:	4621      	mov	r1, r4
 8007836:	f811 3b01 	ldrb.w	r3, [r1], #1
 800783a:	3b30      	subs	r3, #48	; 0x30
 800783c:	2b09      	cmp	r3, #9
 800783e:	d94e      	bls.n	80078de <_svfiprintf_r+0x17e>
 8007840:	b1b0      	cbz	r0, 8007870 <_svfiprintf_r+0x110>
 8007842:	9207      	str	r2, [sp, #28]
 8007844:	e014      	b.n	8007870 <_svfiprintf_r+0x110>
 8007846:	eba0 0308 	sub.w	r3, r0, r8
 800784a:	fa09 f303 	lsl.w	r3, r9, r3
 800784e:	4313      	orrs	r3, r2
 8007850:	46a2      	mov	sl, r4
 8007852:	9304      	str	r3, [sp, #16]
 8007854:	e7d2      	b.n	80077fc <_svfiprintf_r+0x9c>
 8007856:	9b03      	ldr	r3, [sp, #12]
 8007858:	1d19      	adds	r1, r3, #4
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	9103      	str	r1, [sp, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	bfbb      	ittet	lt
 8007862:	425b      	neglt	r3, r3
 8007864:	f042 0202 	orrlt.w	r2, r2, #2
 8007868:	9307      	strge	r3, [sp, #28]
 800786a:	9307      	strlt	r3, [sp, #28]
 800786c:	bfb8      	it	lt
 800786e:	9204      	strlt	r2, [sp, #16]
 8007870:	7823      	ldrb	r3, [r4, #0]
 8007872:	2b2e      	cmp	r3, #46	; 0x2e
 8007874:	d10c      	bne.n	8007890 <_svfiprintf_r+0x130>
 8007876:	7863      	ldrb	r3, [r4, #1]
 8007878:	2b2a      	cmp	r3, #42	; 0x2a
 800787a:	d135      	bne.n	80078e8 <_svfiprintf_r+0x188>
 800787c:	9b03      	ldr	r3, [sp, #12]
 800787e:	3402      	adds	r4, #2
 8007880:	1d1a      	adds	r2, r3, #4
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	9203      	str	r2, [sp, #12]
 8007886:	2b00      	cmp	r3, #0
 8007888:	bfb8      	it	lt
 800788a:	f04f 33ff 	movlt.w	r3, #4294967295
 800788e:	9305      	str	r3, [sp, #20]
 8007890:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800795c <_svfiprintf_r+0x1fc>
 8007894:	2203      	movs	r2, #3
 8007896:	4650      	mov	r0, sl
 8007898:	7821      	ldrb	r1, [r4, #0]
 800789a:	f7ff fab3 	bl	8006e04 <memchr>
 800789e:	b140      	cbz	r0, 80078b2 <_svfiprintf_r+0x152>
 80078a0:	2340      	movs	r3, #64	; 0x40
 80078a2:	eba0 000a 	sub.w	r0, r0, sl
 80078a6:	fa03 f000 	lsl.w	r0, r3, r0
 80078aa:	9b04      	ldr	r3, [sp, #16]
 80078ac:	3401      	adds	r4, #1
 80078ae:	4303      	orrs	r3, r0
 80078b0:	9304      	str	r3, [sp, #16]
 80078b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b6:	2206      	movs	r2, #6
 80078b8:	4825      	ldr	r0, [pc, #148]	; (8007950 <_svfiprintf_r+0x1f0>)
 80078ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078be:	f7ff faa1 	bl	8006e04 <memchr>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d038      	beq.n	8007938 <_svfiprintf_r+0x1d8>
 80078c6:	4b23      	ldr	r3, [pc, #140]	; (8007954 <_svfiprintf_r+0x1f4>)
 80078c8:	bb1b      	cbnz	r3, 8007912 <_svfiprintf_r+0x1b2>
 80078ca:	9b03      	ldr	r3, [sp, #12]
 80078cc:	3307      	adds	r3, #7
 80078ce:	f023 0307 	bic.w	r3, r3, #7
 80078d2:	3308      	adds	r3, #8
 80078d4:	9303      	str	r3, [sp, #12]
 80078d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d8:	4433      	add	r3, r6
 80078da:	9309      	str	r3, [sp, #36]	; 0x24
 80078dc:	e767      	b.n	80077ae <_svfiprintf_r+0x4e>
 80078de:	460c      	mov	r4, r1
 80078e0:	2001      	movs	r0, #1
 80078e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80078e6:	e7a5      	b.n	8007834 <_svfiprintf_r+0xd4>
 80078e8:	2300      	movs	r3, #0
 80078ea:	f04f 0c0a 	mov.w	ip, #10
 80078ee:	4619      	mov	r1, r3
 80078f0:	3401      	adds	r4, #1
 80078f2:	9305      	str	r3, [sp, #20]
 80078f4:	4620      	mov	r0, r4
 80078f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078fa:	3a30      	subs	r2, #48	; 0x30
 80078fc:	2a09      	cmp	r2, #9
 80078fe:	d903      	bls.n	8007908 <_svfiprintf_r+0x1a8>
 8007900:	2b00      	cmp	r3, #0
 8007902:	d0c5      	beq.n	8007890 <_svfiprintf_r+0x130>
 8007904:	9105      	str	r1, [sp, #20]
 8007906:	e7c3      	b.n	8007890 <_svfiprintf_r+0x130>
 8007908:	4604      	mov	r4, r0
 800790a:	2301      	movs	r3, #1
 800790c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007910:	e7f0      	b.n	80078f4 <_svfiprintf_r+0x194>
 8007912:	ab03      	add	r3, sp, #12
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	462a      	mov	r2, r5
 8007918:	4638      	mov	r0, r7
 800791a:	4b0f      	ldr	r3, [pc, #60]	; (8007958 <_svfiprintf_r+0x1f8>)
 800791c:	a904      	add	r1, sp, #16
 800791e:	f7fe f805 	bl	800592c <_printf_float>
 8007922:	1c42      	adds	r2, r0, #1
 8007924:	4606      	mov	r6, r0
 8007926:	d1d6      	bne.n	80078d6 <_svfiprintf_r+0x176>
 8007928:	89ab      	ldrh	r3, [r5, #12]
 800792a:	065b      	lsls	r3, r3, #25
 800792c:	f53f af2c 	bmi.w	8007788 <_svfiprintf_r+0x28>
 8007930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007932:	b01d      	add	sp, #116	; 0x74
 8007934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007938:	ab03      	add	r3, sp, #12
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	462a      	mov	r2, r5
 800793e:	4638      	mov	r0, r7
 8007940:	4b05      	ldr	r3, [pc, #20]	; (8007958 <_svfiprintf_r+0x1f8>)
 8007942:	a904      	add	r1, sp, #16
 8007944:	f7fe fa8e 	bl	8005e64 <_printf_i>
 8007948:	e7eb      	b.n	8007922 <_svfiprintf_r+0x1c2>
 800794a:	bf00      	nop
 800794c:	080087d4 	.word	0x080087d4
 8007950:	080087de 	.word	0x080087de
 8007954:	0800592d 	.word	0x0800592d
 8007958:	080076a9 	.word	0x080076a9
 800795c:	080087da 	.word	0x080087da

08007960 <_sbrk_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	2300      	movs	r3, #0
 8007964:	4d05      	ldr	r5, [pc, #20]	; (800797c <_sbrk_r+0x1c>)
 8007966:	4604      	mov	r4, r0
 8007968:	4608      	mov	r0, r1
 800796a:	602b      	str	r3, [r5, #0]
 800796c:	f7f9 fff0 	bl	8001950 <_sbrk>
 8007970:	1c43      	adds	r3, r0, #1
 8007972:	d102      	bne.n	800797a <_sbrk_r+0x1a>
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	b103      	cbz	r3, 800797a <_sbrk_r+0x1a>
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	bd38      	pop	{r3, r4, r5, pc}
 800797c:	2000037c 	.word	0x2000037c

08007980 <__assert_func>:
 8007980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007982:	4614      	mov	r4, r2
 8007984:	461a      	mov	r2, r3
 8007986:	4b09      	ldr	r3, [pc, #36]	; (80079ac <__assert_func+0x2c>)
 8007988:	4605      	mov	r5, r0
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68d8      	ldr	r0, [r3, #12]
 800798e:	b14c      	cbz	r4, 80079a4 <__assert_func+0x24>
 8007990:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <__assert_func+0x30>)
 8007992:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007996:	9100      	str	r1, [sp, #0]
 8007998:	462b      	mov	r3, r5
 800799a:	4906      	ldr	r1, [pc, #24]	; (80079b4 <__assert_func+0x34>)
 800799c:	f000 f80e 	bl	80079bc <fiprintf>
 80079a0:	f000 faa2 	bl	8007ee8 <abort>
 80079a4:	4b04      	ldr	r3, [pc, #16]	; (80079b8 <__assert_func+0x38>)
 80079a6:	461c      	mov	r4, r3
 80079a8:	e7f3      	b.n	8007992 <__assert_func+0x12>
 80079aa:	bf00      	nop
 80079ac:	2000000c 	.word	0x2000000c
 80079b0:	080087e5 	.word	0x080087e5
 80079b4:	080087f2 	.word	0x080087f2
 80079b8:	08008820 	.word	0x08008820

080079bc <fiprintf>:
 80079bc:	b40e      	push	{r1, r2, r3}
 80079be:	b503      	push	{r0, r1, lr}
 80079c0:	4601      	mov	r1, r0
 80079c2:	ab03      	add	r3, sp, #12
 80079c4:	4805      	ldr	r0, [pc, #20]	; (80079dc <fiprintf+0x20>)
 80079c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ca:	6800      	ldr	r0, [r0, #0]
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	f000 f88d 	bl	8007aec <_vfiprintf_r>
 80079d2:	b002      	add	sp, #8
 80079d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079d8:	b003      	add	sp, #12
 80079da:	4770      	bx	lr
 80079dc:	2000000c 	.word	0x2000000c

080079e0 <__ascii_mbtowc>:
 80079e0:	b082      	sub	sp, #8
 80079e2:	b901      	cbnz	r1, 80079e6 <__ascii_mbtowc+0x6>
 80079e4:	a901      	add	r1, sp, #4
 80079e6:	b142      	cbz	r2, 80079fa <__ascii_mbtowc+0x1a>
 80079e8:	b14b      	cbz	r3, 80079fe <__ascii_mbtowc+0x1e>
 80079ea:	7813      	ldrb	r3, [r2, #0]
 80079ec:	600b      	str	r3, [r1, #0]
 80079ee:	7812      	ldrb	r2, [r2, #0]
 80079f0:	1e10      	subs	r0, r2, #0
 80079f2:	bf18      	it	ne
 80079f4:	2001      	movne	r0, #1
 80079f6:	b002      	add	sp, #8
 80079f8:	4770      	bx	lr
 80079fa:	4610      	mov	r0, r2
 80079fc:	e7fb      	b.n	80079f6 <__ascii_mbtowc+0x16>
 80079fe:	f06f 0001 	mvn.w	r0, #1
 8007a02:	e7f8      	b.n	80079f6 <__ascii_mbtowc+0x16>

08007a04 <memmove>:
 8007a04:	4288      	cmp	r0, r1
 8007a06:	b510      	push	{r4, lr}
 8007a08:	eb01 0402 	add.w	r4, r1, r2
 8007a0c:	d902      	bls.n	8007a14 <memmove+0x10>
 8007a0e:	4284      	cmp	r4, r0
 8007a10:	4623      	mov	r3, r4
 8007a12:	d807      	bhi.n	8007a24 <memmove+0x20>
 8007a14:	1e43      	subs	r3, r0, #1
 8007a16:	42a1      	cmp	r1, r4
 8007a18:	d008      	beq.n	8007a2c <memmove+0x28>
 8007a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a22:	e7f8      	b.n	8007a16 <memmove+0x12>
 8007a24:	4601      	mov	r1, r0
 8007a26:	4402      	add	r2, r0
 8007a28:	428a      	cmp	r2, r1
 8007a2a:	d100      	bne.n	8007a2e <memmove+0x2a>
 8007a2c:	bd10      	pop	{r4, pc}
 8007a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a36:	e7f7      	b.n	8007a28 <memmove+0x24>

08007a38 <__malloc_lock>:
 8007a38:	4801      	ldr	r0, [pc, #4]	; (8007a40 <__malloc_lock+0x8>)
 8007a3a:	f000 bc15 	b.w	8008268 <__retarget_lock_acquire_recursive>
 8007a3e:	bf00      	nop
 8007a40:	20000384 	.word	0x20000384

08007a44 <__malloc_unlock>:
 8007a44:	4801      	ldr	r0, [pc, #4]	; (8007a4c <__malloc_unlock+0x8>)
 8007a46:	f000 bc10 	b.w	800826a <__retarget_lock_release_recursive>
 8007a4a:	bf00      	nop
 8007a4c:	20000384 	.word	0x20000384

08007a50 <_realloc_r>:
 8007a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a52:	4607      	mov	r7, r0
 8007a54:	4614      	mov	r4, r2
 8007a56:	460e      	mov	r6, r1
 8007a58:	b921      	cbnz	r1, 8007a64 <_realloc_r+0x14>
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007a60:	f7ff bdc8 	b.w	80075f4 <_malloc_r>
 8007a64:	b922      	cbnz	r2, 8007a70 <_realloc_r+0x20>
 8007a66:	f7ff fd79 	bl	800755c <_free_r>
 8007a6a:	4625      	mov	r5, r4
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a70:	f000 fc60 	bl	8008334 <_malloc_usable_size_r>
 8007a74:	42a0      	cmp	r0, r4
 8007a76:	d20f      	bcs.n	8007a98 <_realloc_r+0x48>
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	f7ff fdba 	bl	80075f4 <_malloc_r>
 8007a80:	4605      	mov	r5, r0
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d0f2      	beq.n	8007a6c <_realloc_r+0x1c>
 8007a86:	4631      	mov	r1, r6
 8007a88:	4622      	mov	r2, r4
 8007a8a:	f7ff f9c9 	bl	8006e20 <memcpy>
 8007a8e:	4631      	mov	r1, r6
 8007a90:	4638      	mov	r0, r7
 8007a92:	f7ff fd63 	bl	800755c <_free_r>
 8007a96:	e7e9      	b.n	8007a6c <_realloc_r+0x1c>
 8007a98:	4635      	mov	r5, r6
 8007a9a:	e7e7      	b.n	8007a6c <_realloc_r+0x1c>

08007a9c <__sfputc_r>:
 8007a9c:	6893      	ldr	r3, [r2, #8]
 8007a9e:	b410      	push	{r4}
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	6093      	str	r3, [r2, #8]
 8007aa6:	da07      	bge.n	8007ab8 <__sfputc_r+0x1c>
 8007aa8:	6994      	ldr	r4, [r2, #24]
 8007aaa:	42a3      	cmp	r3, r4
 8007aac:	db01      	blt.n	8007ab2 <__sfputc_r+0x16>
 8007aae:	290a      	cmp	r1, #10
 8007ab0:	d102      	bne.n	8007ab8 <__sfputc_r+0x1c>
 8007ab2:	bc10      	pop	{r4}
 8007ab4:	f000 b94a 	b.w	8007d4c <__swbuf_r>
 8007ab8:	6813      	ldr	r3, [r2, #0]
 8007aba:	1c58      	adds	r0, r3, #1
 8007abc:	6010      	str	r0, [r2, #0]
 8007abe:	7019      	strb	r1, [r3, #0]
 8007ac0:	4608      	mov	r0, r1
 8007ac2:	bc10      	pop	{r4}
 8007ac4:	4770      	bx	lr

08007ac6 <__sfputs_r>:
 8007ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac8:	4606      	mov	r6, r0
 8007aca:	460f      	mov	r7, r1
 8007acc:	4614      	mov	r4, r2
 8007ace:	18d5      	adds	r5, r2, r3
 8007ad0:	42ac      	cmp	r4, r5
 8007ad2:	d101      	bne.n	8007ad8 <__sfputs_r+0x12>
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	e007      	b.n	8007ae8 <__sfputs_r+0x22>
 8007ad8:	463a      	mov	r2, r7
 8007ada:	4630      	mov	r0, r6
 8007adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae0:	f7ff ffdc 	bl	8007a9c <__sfputc_r>
 8007ae4:	1c43      	adds	r3, r0, #1
 8007ae6:	d1f3      	bne.n	8007ad0 <__sfputs_r+0xa>
 8007ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007aec <_vfiprintf_r>:
 8007aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af0:	460d      	mov	r5, r1
 8007af2:	4614      	mov	r4, r2
 8007af4:	4698      	mov	r8, r3
 8007af6:	4606      	mov	r6, r0
 8007af8:	b09d      	sub	sp, #116	; 0x74
 8007afa:	b118      	cbz	r0, 8007b04 <_vfiprintf_r+0x18>
 8007afc:	6983      	ldr	r3, [r0, #24]
 8007afe:	b90b      	cbnz	r3, 8007b04 <_vfiprintf_r+0x18>
 8007b00:	f000 fb14 	bl	800812c <__sinit>
 8007b04:	4b89      	ldr	r3, [pc, #548]	; (8007d2c <_vfiprintf_r+0x240>)
 8007b06:	429d      	cmp	r5, r3
 8007b08:	d11b      	bne.n	8007b42 <_vfiprintf_r+0x56>
 8007b0a:	6875      	ldr	r5, [r6, #4]
 8007b0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b0e:	07d9      	lsls	r1, r3, #31
 8007b10:	d405      	bmi.n	8007b1e <_vfiprintf_r+0x32>
 8007b12:	89ab      	ldrh	r3, [r5, #12]
 8007b14:	059a      	lsls	r2, r3, #22
 8007b16:	d402      	bmi.n	8007b1e <_vfiprintf_r+0x32>
 8007b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b1a:	f000 fba5 	bl	8008268 <__retarget_lock_acquire_recursive>
 8007b1e:	89ab      	ldrh	r3, [r5, #12]
 8007b20:	071b      	lsls	r3, r3, #28
 8007b22:	d501      	bpl.n	8007b28 <_vfiprintf_r+0x3c>
 8007b24:	692b      	ldr	r3, [r5, #16]
 8007b26:	b9eb      	cbnz	r3, 8007b64 <_vfiprintf_r+0x78>
 8007b28:	4629      	mov	r1, r5
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f000 f96e 	bl	8007e0c <__swsetup_r>
 8007b30:	b1c0      	cbz	r0, 8007b64 <_vfiprintf_r+0x78>
 8007b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b34:	07dc      	lsls	r4, r3, #31
 8007b36:	d50e      	bpl.n	8007b56 <_vfiprintf_r+0x6a>
 8007b38:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3c:	b01d      	add	sp, #116	; 0x74
 8007b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b42:	4b7b      	ldr	r3, [pc, #492]	; (8007d30 <_vfiprintf_r+0x244>)
 8007b44:	429d      	cmp	r5, r3
 8007b46:	d101      	bne.n	8007b4c <_vfiprintf_r+0x60>
 8007b48:	68b5      	ldr	r5, [r6, #8]
 8007b4a:	e7df      	b.n	8007b0c <_vfiprintf_r+0x20>
 8007b4c:	4b79      	ldr	r3, [pc, #484]	; (8007d34 <_vfiprintf_r+0x248>)
 8007b4e:	429d      	cmp	r5, r3
 8007b50:	bf08      	it	eq
 8007b52:	68f5      	ldreq	r5, [r6, #12]
 8007b54:	e7da      	b.n	8007b0c <_vfiprintf_r+0x20>
 8007b56:	89ab      	ldrh	r3, [r5, #12]
 8007b58:	0598      	lsls	r0, r3, #22
 8007b5a:	d4ed      	bmi.n	8007b38 <_vfiprintf_r+0x4c>
 8007b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b5e:	f000 fb84 	bl	800826a <__retarget_lock_release_recursive>
 8007b62:	e7e9      	b.n	8007b38 <_vfiprintf_r+0x4c>
 8007b64:	2300      	movs	r3, #0
 8007b66:	9309      	str	r3, [sp, #36]	; 0x24
 8007b68:	2320      	movs	r3, #32
 8007b6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b6e:	2330      	movs	r3, #48	; 0x30
 8007b70:	f04f 0901 	mov.w	r9, #1
 8007b74:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b78:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007d38 <_vfiprintf_r+0x24c>
 8007b7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b80:	4623      	mov	r3, r4
 8007b82:	469a      	mov	sl, r3
 8007b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b88:	b10a      	cbz	r2, 8007b8e <_vfiprintf_r+0xa2>
 8007b8a:	2a25      	cmp	r2, #37	; 0x25
 8007b8c:	d1f9      	bne.n	8007b82 <_vfiprintf_r+0x96>
 8007b8e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b92:	d00b      	beq.n	8007bac <_vfiprintf_r+0xc0>
 8007b94:	465b      	mov	r3, fp
 8007b96:	4622      	mov	r2, r4
 8007b98:	4629      	mov	r1, r5
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f7ff ff93 	bl	8007ac6 <__sfputs_r>
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	f000 80aa 	beq.w	8007cfa <_vfiprintf_r+0x20e>
 8007ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ba8:	445a      	add	r2, fp
 8007baa:	9209      	str	r2, [sp, #36]	; 0x24
 8007bac:	f89a 3000 	ldrb.w	r3, [sl]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 80a2 	beq.w	8007cfa <_vfiprintf_r+0x20e>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bc0:	f10a 0a01 	add.w	sl, sl, #1
 8007bc4:	9304      	str	r3, [sp, #16]
 8007bc6:	9307      	str	r3, [sp, #28]
 8007bc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bcc:	931a      	str	r3, [sp, #104]	; 0x68
 8007bce:	4654      	mov	r4, sl
 8007bd0:	2205      	movs	r2, #5
 8007bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd6:	4858      	ldr	r0, [pc, #352]	; (8007d38 <_vfiprintf_r+0x24c>)
 8007bd8:	f7ff f914 	bl	8006e04 <memchr>
 8007bdc:	9a04      	ldr	r2, [sp, #16]
 8007bde:	b9d8      	cbnz	r0, 8007c18 <_vfiprintf_r+0x12c>
 8007be0:	06d1      	lsls	r1, r2, #27
 8007be2:	bf44      	itt	mi
 8007be4:	2320      	movmi	r3, #32
 8007be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bea:	0713      	lsls	r3, r2, #28
 8007bec:	bf44      	itt	mi
 8007bee:	232b      	movmi	r3, #43	; 0x2b
 8007bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8007bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bfa:	d015      	beq.n	8007c28 <_vfiprintf_r+0x13c>
 8007bfc:	4654      	mov	r4, sl
 8007bfe:	2000      	movs	r0, #0
 8007c00:	f04f 0c0a 	mov.w	ip, #10
 8007c04:	9a07      	ldr	r2, [sp, #28]
 8007c06:	4621      	mov	r1, r4
 8007c08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c0c:	3b30      	subs	r3, #48	; 0x30
 8007c0e:	2b09      	cmp	r3, #9
 8007c10:	d94e      	bls.n	8007cb0 <_vfiprintf_r+0x1c4>
 8007c12:	b1b0      	cbz	r0, 8007c42 <_vfiprintf_r+0x156>
 8007c14:	9207      	str	r2, [sp, #28]
 8007c16:	e014      	b.n	8007c42 <_vfiprintf_r+0x156>
 8007c18:	eba0 0308 	sub.w	r3, r0, r8
 8007c1c:	fa09 f303 	lsl.w	r3, r9, r3
 8007c20:	4313      	orrs	r3, r2
 8007c22:	46a2      	mov	sl, r4
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	e7d2      	b.n	8007bce <_vfiprintf_r+0xe2>
 8007c28:	9b03      	ldr	r3, [sp, #12]
 8007c2a:	1d19      	adds	r1, r3, #4
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	9103      	str	r1, [sp, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	bfbb      	ittet	lt
 8007c34:	425b      	neglt	r3, r3
 8007c36:	f042 0202 	orrlt.w	r2, r2, #2
 8007c3a:	9307      	strge	r3, [sp, #28]
 8007c3c:	9307      	strlt	r3, [sp, #28]
 8007c3e:	bfb8      	it	lt
 8007c40:	9204      	strlt	r2, [sp, #16]
 8007c42:	7823      	ldrb	r3, [r4, #0]
 8007c44:	2b2e      	cmp	r3, #46	; 0x2e
 8007c46:	d10c      	bne.n	8007c62 <_vfiprintf_r+0x176>
 8007c48:	7863      	ldrb	r3, [r4, #1]
 8007c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c4c:	d135      	bne.n	8007cba <_vfiprintf_r+0x1ce>
 8007c4e:	9b03      	ldr	r3, [sp, #12]
 8007c50:	3402      	adds	r4, #2
 8007c52:	1d1a      	adds	r2, r3, #4
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	9203      	str	r2, [sp, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	bfb8      	it	lt
 8007c5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c60:	9305      	str	r3, [sp, #20]
 8007c62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d48 <_vfiprintf_r+0x25c>
 8007c66:	2203      	movs	r2, #3
 8007c68:	4650      	mov	r0, sl
 8007c6a:	7821      	ldrb	r1, [r4, #0]
 8007c6c:	f7ff f8ca 	bl	8006e04 <memchr>
 8007c70:	b140      	cbz	r0, 8007c84 <_vfiprintf_r+0x198>
 8007c72:	2340      	movs	r3, #64	; 0x40
 8007c74:	eba0 000a 	sub.w	r0, r0, sl
 8007c78:	fa03 f000 	lsl.w	r0, r3, r0
 8007c7c:	9b04      	ldr	r3, [sp, #16]
 8007c7e:	3401      	adds	r4, #1
 8007c80:	4303      	orrs	r3, r0
 8007c82:	9304      	str	r3, [sp, #16]
 8007c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c88:	2206      	movs	r2, #6
 8007c8a:	482c      	ldr	r0, [pc, #176]	; (8007d3c <_vfiprintf_r+0x250>)
 8007c8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c90:	f7ff f8b8 	bl	8006e04 <memchr>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d03f      	beq.n	8007d18 <_vfiprintf_r+0x22c>
 8007c98:	4b29      	ldr	r3, [pc, #164]	; (8007d40 <_vfiprintf_r+0x254>)
 8007c9a:	bb1b      	cbnz	r3, 8007ce4 <_vfiprintf_r+0x1f8>
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	3307      	adds	r3, #7
 8007ca0:	f023 0307 	bic.w	r3, r3, #7
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	9303      	str	r3, [sp, #12]
 8007ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007caa:	443b      	add	r3, r7
 8007cac:	9309      	str	r3, [sp, #36]	; 0x24
 8007cae:	e767      	b.n	8007b80 <_vfiprintf_r+0x94>
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	2001      	movs	r0, #1
 8007cb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cb8:	e7a5      	b.n	8007c06 <_vfiprintf_r+0x11a>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f04f 0c0a 	mov.w	ip, #10
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	3401      	adds	r4, #1
 8007cc4:	9305      	str	r3, [sp, #20]
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ccc:	3a30      	subs	r2, #48	; 0x30
 8007cce:	2a09      	cmp	r2, #9
 8007cd0:	d903      	bls.n	8007cda <_vfiprintf_r+0x1ee>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0c5      	beq.n	8007c62 <_vfiprintf_r+0x176>
 8007cd6:	9105      	str	r1, [sp, #20]
 8007cd8:	e7c3      	b.n	8007c62 <_vfiprintf_r+0x176>
 8007cda:	4604      	mov	r4, r0
 8007cdc:	2301      	movs	r3, #1
 8007cde:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ce2:	e7f0      	b.n	8007cc6 <_vfiprintf_r+0x1da>
 8007ce4:	ab03      	add	r3, sp, #12
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	462a      	mov	r2, r5
 8007cea:	4630      	mov	r0, r6
 8007cec:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <_vfiprintf_r+0x258>)
 8007cee:	a904      	add	r1, sp, #16
 8007cf0:	f7fd fe1c 	bl	800592c <_printf_float>
 8007cf4:	4607      	mov	r7, r0
 8007cf6:	1c78      	adds	r0, r7, #1
 8007cf8:	d1d6      	bne.n	8007ca8 <_vfiprintf_r+0x1bc>
 8007cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cfc:	07d9      	lsls	r1, r3, #31
 8007cfe:	d405      	bmi.n	8007d0c <_vfiprintf_r+0x220>
 8007d00:	89ab      	ldrh	r3, [r5, #12]
 8007d02:	059a      	lsls	r2, r3, #22
 8007d04:	d402      	bmi.n	8007d0c <_vfiprintf_r+0x220>
 8007d06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d08:	f000 faaf 	bl	800826a <__retarget_lock_release_recursive>
 8007d0c:	89ab      	ldrh	r3, [r5, #12]
 8007d0e:	065b      	lsls	r3, r3, #25
 8007d10:	f53f af12 	bmi.w	8007b38 <_vfiprintf_r+0x4c>
 8007d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d16:	e711      	b.n	8007b3c <_vfiprintf_r+0x50>
 8007d18:	ab03      	add	r3, sp, #12
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	462a      	mov	r2, r5
 8007d1e:	4630      	mov	r0, r6
 8007d20:	4b08      	ldr	r3, [pc, #32]	; (8007d44 <_vfiprintf_r+0x258>)
 8007d22:	a904      	add	r1, sp, #16
 8007d24:	f7fe f89e 	bl	8005e64 <_printf_i>
 8007d28:	e7e4      	b.n	8007cf4 <_vfiprintf_r+0x208>
 8007d2a:	bf00      	nop
 8007d2c:	0800894c 	.word	0x0800894c
 8007d30:	0800896c 	.word	0x0800896c
 8007d34:	0800892c 	.word	0x0800892c
 8007d38:	080087d4 	.word	0x080087d4
 8007d3c:	080087de 	.word	0x080087de
 8007d40:	0800592d 	.word	0x0800592d
 8007d44:	08007ac7 	.word	0x08007ac7
 8007d48:	080087da 	.word	0x080087da

08007d4c <__swbuf_r>:
 8007d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4e:	460e      	mov	r6, r1
 8007d50:	4614      	mov	r4, r2
 8007d52:	4605      	mov	r5, r0
 8007d54:	b118      	cbz	r0, 8007d5e <__swbuf_r+0x12>
 8007d56:	6983      	ldr	r3, [r0, #24]
 8007d58:	b90b      	cbnz	r3, 8007d5e <__swbuf_r+0x12>
 8007d5a:	f000 f9e7 	bl	800812c <__sinit>
 8007d5e:	4b21      	ldr	r3, [pc, #132]	; (8007de4 <__swbuf_r+0x98>)
 8007d60:	429c      	cmp	r4, r3
 8007d62:	d12b      	bne.n	8007dbc <__swbuf_r+0x70>
 8007d64:	686c      	ldr	r4, [r5, #4]
 8007d66:	69a3      	ldr	r3, [r4, #24]
 8007d68:	60a3      	str	r3, [r4, #8]
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	071a      	lsls	r2, r3, #28
 8007d6e:	d52f      	bpl.n	8007dd0 <__swbuf_r+0x84>
 8007d70:	6923      	ldr	r3, [r4, #16]
 8007d72:	b36b      	cbz	r3, 8007dd0 <__swbuf_r+0x84>
 8007d74:	6923      	ldr	r3, [r4, #16]
 8007d76:	6820      	ldr	r0, [r4, #0]
 8007d78:	b2f6      	uxtb	r6, r6
 8007d7a:	1ac0      	subs	r0, r0, r3
 8007d7c:	6963      	ldr	r3, [r4, #20]
 8007d7e:	4637      	mov	r7, r6
 8007d80:	4283      	cmp	r3, r0
 8007d82:	dc04      	bgt.n	8007d8e <__swbuf_r+0x42>
 8007d84:	4621      	mov	r1, r4
 8007d86:	4628      	mov	r0, r5
 8007d88:	f000 f93c 	bl	8008004 <_fflush_r>
 8007d8c:	bb30      	cbnz	r0, 8007ddc <__swbuf_r+0x90>
 8007d8e:	68a3      	ldr	r3, [r4, #8]
 8007d90:	3001      	adds	r0, #1
 8007d92:	3b01      	subs	r3, #1
 8007d94:	60a3      	str	r3, [r4, #8]
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	1c5a      	adds	r2, r3, #1
 8007d9a:	6022      	str	r2, [r4, #0]
 8007d9c:	701e      	strb	r6, [r3, #0]
 8007d9e:	6963      	ldr	r3, [r4, #20]
 8007da0:	4283      	cmp	r3, r0
 8007da2:	d004      	beq.n	8007dae <__swbuf_r+0x62>
 8007da4:	89a3      	ldrh	r3, [r4, #12]
 8007da6:	07db      	lsls	r3, r3, #31
 8007da8:	d506      	bpl.n	8007db8 <__swbuf_r+0x6c>
 8007daa:	2e0a      	cmp	r6, #10
 8007dac:	d104      	bne.n	8007db8 <__swbuf_r+0x6c>
 8007dae:	4621      	mov	r1, r4
 8007db0:	4628      	mov	r0, r5
 8007db2:	f000 f927 	bl	8008004 <_fflush_r>
 8007db6:	b988      	cbnz	r0, 8007ddc <__swbuf_r+0x90>
 8007db8:	4638      	mov	r0, r7
 8007dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dbc:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <__swbuf_r+0x9c>)
 8007dbe:	429c      	cmp	r4, r3
 8007dc0:	d101      	bne.n	8007dc6 <__swbuf_r+0x7a>
 8007dc2:	68ac      	ldr	r4, [r5, #8]
 8007dc4:	e7cf      	b.n	8007d66 <__swbuf_r+0x1a>
 8007dc6:	4b09      	ldr	r3, [pc, #36]	; (8007dec <__swbuf_r+0xa0>)
 8007dc8:	429c      	cmp	r4, r3
 8007dca:	bf08      	it	eq
 8007dcc:	68ec      	ldreq	r4, [r5, #12]
 8007dce:	e7ca      	b.n	8007d66 <__swbuf_r+0x1a>
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f000 f81a 	bl	8007e0c <__swsetup_r>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d0cb      	beq.n	8007d74 <__swbuf_r+0x28>
 8007ddc:	f04f 37ff 	mov.w	r7, #4294967295
 8007de0:	e7ea      	b.n	8007db8 <__swbuf_r+0x6c>
 8007de2:	bf00      	nop
 8007de4:	0800894c 	.word	0x0800894c
 8007de8:	0800896c 	.word	0x0800896c
 8007dec:	0800892c 	.word	0x0800892c

08007df0 <__ascii_wctomb>:
 8007df0:	4603      	mov	r3, r0
 8007df2:	4608      	mov	r0, r1
 8007df4:	b141      	cbz	r1, 8007e08 <__ascii_wctomb+0x18>
 8007df6:	2aff      	cmp	r2, #255	; 0xff
 8007df8:	d904      	bls.n	8007e04 <__ascii_wctomb+0x14>
 8007dfa:	228a      	movs	r2, #138	; 0x8a
 8007dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	4770      	bx	lr
 8007e04:	2001      	movs	r0, #1
 8007e06:	700a      	strb	r2, [r1, #0]
 8007e08:	4770      	bx	lr
	...

08007e0c <__swsetup_r>:
 8007e0c:	4b32      	ldr	r3, [pc, #200]	; (8007ed8 <__swsetup_r+0xcc>)
 8007e0e:	b570      	push	{r4, r5, r6, lr}
 8007e10:	681d      	ldr	r5, [r3, #0]
 8007e12:	4606      	mov	r6, r0
 8007e14:	460c      	mov	r4, r1
 8007e16:	b125      	cbz	r5, 8007e22 <__swsetup_r+0x16>
 8007e18:	69ab      	ldr	r3, [r5, #24]
 8007e1a:	b913      	cbnz	r3, 8007e22 <__swsetup_r+0x16>
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f000 f985 	bl	800812c <__sinit>
 8007e22:	4b2e      	ldr	r3, [pc, #184]	; (8007edc <__swsetup_r+0xd0>)
 8007e24:	429c      	cmp	r4, r3
 8007e26:	d10f      	bne.n	8007e48 <__swsetup_r+0x3c>
 8007e28:	686c      	ldr	r4, [r5, #4]
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e30:	0719      	lsls	r1, r3, #28
 8007e32:	d42c      	bmi.n	8007e8e <__swsetup_r+0x82>
 8007e34:	06dd      	lsls	r5, r3, #27
 8007e36:	d411      	bmi.n	8007e5c <__swsetup_r+0x50>
 8007e38:	2309      	movs	r3, #9
 8007e3a:	6033      	str	r3, [r6, #0]
 8007e3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e40:	f04f 30ff 	mov.w	r0, #4294967295
 8007e44:	81a3      	strh	r3, [r4, #12]
 8007e46:	e03e      	b.n	8007ec6 <__swsetup_r+0xba>
 8007e48:	4b25      	ldr	r3, [pc, #148]	; (8007ee0 <__swsetup_r+0xd4>)
 8007e4a:	429c      	cmp	r4, r3
 8007e4c:	d101      	bne.n	8007e52 <__swsetup_r+0x46>
 8007e4e:	68ac      	ldr	r4, [r5, #8]
 8007e50:	e7eb      	b.n	8007e2a <__swsetup_r+0x1e>
 8007e52:	4b24      	ldr	r3, [pc, #144]	; (8007ee4 <__swsetup_r+0xd8>)
 8007e54:	429c      	cmp	r4, r3
 8007e56:	bf08      	it	eq
 8007e58:	68ec      	ldreq	r4, [r5, #12]
 8007e5a:	e7e6      	b.n	8007e2a <__swsetup_r+0x1e>
 8007e5c:	0758      	lsls	r0, r3, #29
 8007e5e:	d512      	bpl.n	8007e86 <__swsetup_r+0x7a>
 8007e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e62:	b141      	cbz	r1, 8007e76 <__swsetup_r+0x6a>
 8007e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e68:	4299      	cmp	r1, r3
 8007e6a:	d002      	beq.n	8007e72 <__swsetup_r+0x66>
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	f7ff fb75 	bl	800755c <_free_r>
 8007e72:	2300      	movs	r3, #0
 8007e74:	6363      	str	r3, [r4, #52]	; 0x34
 8007e76:	89a3      	ldrh	r3, [r4, #12]
 8007e78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e7c:	81a3      	strh	r3, [r4, #12]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	6063      	str	r3, [r4, #4]
 8007e82:	6923      	ldr	r3, [r4, #16]
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	89a3      	ldrh	r3, [r4, #12]
 8007e88:	f043 0308 	orr.w	r3, r3, #8
 8007e8c:	81a3      	strh	r3, [r4, #12]
 8007e8e:	6923      	ldr	r3, [r4, #16]
 8007e90:	b94b      	cbnz	r3, 8007ea6 <__swsetup_r+0x9a>
 8007e92:	89a3      	ldrh	r3, [r4, #12]
 8007e94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e9c:	d003      	beq.n	8007ea6 <__swsetup_r+0x9a>
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f000 fa07 	bl	80082b4 <__smakebuf_r>
 8007ea6:	89a0      	ldrh	r0, [r4, #12]
 8007ea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007eac:	f010 0301 	ands.w	r3, r0, #1
 8007eb0:	d00a      	beq.n	8007ec8 <__swsetup_r+0xbc>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	60a3      	str	r3, [r4, #8]
 8007eb6:	6963      	ldr	r3, [r4, #20]
 8007eb8:	425b      	negs	r3, r3
 8007eba:	61a3      	str	r3, [r4, #24]
 8007ebc:	6923      	ldr	r3, [r4, #16]
 8007ebe:	b943      	cbnz	r3, 8007ed2 <__swsetup_r+0xc6>
 8007ec0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ec4:	d1ba      	bne.n	8007e3c <__swsetup_r+0x30>
 8007ec6:	bd70      	pop	{r4, r5, r6, pc}
 8007ec8:	0781      	lsls	r1, r0, #30
 8007eca:	bf58      	it	pl
 8007ecc:	6963      	ldrpl	r3, [r4, #20]
 8007ece:	60a3      	str	r3, [r4, #8]
 8007ed0:	e7f4      	b.n	8007ebc <__swsetup_r+0xb0>
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	e7f7      	b.n	8007ec6 <__swsetup_r+0xba>
 8007ed6:	bf00      	nop
 8007ed8:	2000000c 	.word	0x2000000c
 8007edc:	0800894c 	.word	0x0800894c
 8007ee0:	0800896c 	.word	0x0800896c
 8007ee4:	0800892c 	.word	0x0800892c

08007ee8 <abort>:
 8007ee8:	2006      	movs	r0, #6
 8007eea:	b508      	push	{r3, lr}
 8007eec:	f000 fa52 	bl	8008394 <raise>
 8007ef0:	2001      	movs	r0, #1
 8007ef2:	f7f9 fcba 	bl	800186a <_exit>
	...

08007ef8 <__sflush_r>:
 8007ef8:	898a      	ldrh	r2, [r1, #12]
 8007efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efe:	4605      	mov	r5, r0
 8007f00:	0710      	lsls	r0, r2, #28
 8007f02:	460c      	mov	r4, r1
 8007f04:	d458      	bmi.n	8007fb8 <__sflush_r+0xc0>
 8007f06:	684b      	ldr	r3, [r1, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	dc05      	bgt.n	8007f18 <__sflush_r+0x20>
 8007f0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	dc02      	bgt.n	8007f18 <__sflush_r+0x20>
 8007f12:	2000      	movs	r0, #0
 8007f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f1a:	2e00      	cmp	r6, #0
 8007f1c:	d0f9      	beq.n	8007f12 <__sflush_r+0x1a>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f24:	682f      	ldr	r7, [r5, #0]
 8007f26:	602b      	str	r3, [r5, #0]
 8007f28:	d032      	beq.n	8007f90 <__sflush_r+0x98>
 8007f2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f2c:	89a3      	ldrh	r3, [r4, #12]
 8007f2e:	075a      	lsls	r2, r3, #29
 8007f30:	d505      	bpl.n	8007f3e <__sflush_r+0x46>
 8007f32:	6863      	ldr	r3, [r4, #4]
 8007f34:	1ac0      	subs	r0, r0, r3
 8007f36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f38:	b10b      	cbz	r3, 8007f3e <__sflush_r+0x46>
 8007f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f3c:	1ac0      	subs	r0, r0, r3
 8007f3e:	2300      	movs	r3, #0
 8007f40:	4602      	mov	r2, r0
 8007f42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f44:	4628      	mov	r0, r5
 8007f46:	6a21      	ldr	r1, [r4, #32]
 8007f48:	47b0      	blx	r6
 8007f4a:	1c43      	adds	r3, r0, #1
 8007f4c:	89a3      	ldrh	r3, [r4, #12]
 8007f4e:	d106      	bne.n	8007f5e <__sflush_r+0x66>
 8007f50:	6829      	ldr	r1, [r5, #0]
 8007f52:	291d      	cmp	r1, #29
 8007f54:	d82c      	bhi.n	8007fb0 <__sflush_r+0xb8>
 8007f56:	4a2a      	ldr	r2, [pc, #168]	; (8008000 <__sflush_r+0x108>)
 8007f58:	40ca      	lsrs	r2, r1
 8007f5a:	07d6      	lsls	r6, r2, #31
 8007f5c:	d528      	bpl.n	8007fb0 <__sflush_r+0xb8>
 8007f5e:	2200      	movs	r2, #0
 8007f60:	6062      	str	r2, [r4, #4]
 8007f62:	6922      	ldr	r2, [r4, #16]
 8007f64:	04d9      	lsls	r1, r3, #19
 8007f66:	6022      	str	r2, [r4, #0]
 8007f68:	d504      	bpl.n	8007f74 <__sflush_r+0x7c>
 8007f6a:	1c42      	adds	r2, r0, #1
 8007f6c:	d101      	bne.n	8007f72 <__sflush_r+0x7a>
 8007f6e:	682b      	ldr	r3, [r5, #0]
 8007f70:	b903      	cbnz	r3, 8007f74 <__sflush_r+0x7c>
 8007f72:	6560      	str	r0, [r4, #84]	; 0x54
 8007f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f76:	602f      	str	r7, [r5, #0]
 8007f78:	2900      	cmp	r1, #0
 8007f7a:	d0ca      	beq.n	8007f12 <__sflush_r+0x1a>
 8007f7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f80:	4299      	cmp	r1, r3
 8007f82:	d002      	beq.n	8007f8a <__sflush_r+0x92>
 8007f84:	4628      	mov	r0, r5
 8007f86:	f7ff fae9 	bl	800755c <_free_r>
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	6360      	str	r0, [r4, #52]	; 0x34
 8007f8e:	e7c1      	b.n	8007f14 <__sflush_r+0x1c>
 8007f90:	6a21      	ldr	r1, [r4, #32]
 8007f92:	2301      	movs	r3, #1
 8007f94:	4628      	mov	r0, r5
 8007f96:	47b0      	blx	r6
 8007f98:	1c41      	adds	r1, r0, #1
 8007f9a:	d1c7      	bne.n	8007f2c <__sflush_r+0x34>
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0c4      	beq.n	8007f2c <__sflush_r+0x34>
 8007fa2:	2b1d      	cmp	r3, #29
 8007fa4:	d001      	beq.n	8007faa <__sflush_r+0xb2>
 8007fa6:	2b16      	cmp	r3, #22
 8007fa8:	d101      	bne.n	8007fae <__sflush_r+0xb6>
 8007faa:	602f      	str	r7, [r5, #0]
 8007fac:	e7b1      	b.n	8007f12 <__sflush_r+0x1a>
 8007fae:	89a3      	ldrh	r3, [r4, #12]
 8007fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fb4:	81a3      	strh	r3, [r4, #12]
 8007fb6:	e7ad      	b.n	8007f14 <__sflush_r+0x1c>
 8007fb8:	690f      	ldr	r7, [r1, #16]
 8007fba:	2f00      	cmp	r7, #0
 8007fbc:	d0a9      	beq.n	8007f12 <__sflush_r+0x1a>
 8007fbe:	0793      	lsls	r3, r2, #30
 8007fc0:	bf18      	it	ne
 8007fc2:	2300      	movne	r3, #0
 8007fc4:	680e      	ldr	r6, [r1, #0]
 8007fc6:	bf08      	it	eq
 8007fc8:	694b      	ldreq	r3, [r1, #20]
 8007fca:	eba6 0807 	sub.w	r8, r6, r7
 8007fce:	600f      	str	r7, [r1, #0]
 8007fd0:	608b      	str	r3, [r1, #8]
 8007fd2:	f1b8 0f00 	cmp.w	r8, #0
 8007fd6:	dd9c      	ble.n	8007f12 <__sflush_r+0x1a>
 8007fd8:	4643      	mov	r3, r8
 8007fda:	463a      	mov	r2, r7
 8007fdc:	4628      	mov	r0, r5
 8007fde:	6a21      	ldr	r1, [r4, #32]
 8007fe0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fe2:	47b0      	blx	r6
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	dc06      	bgt.n	8007ff6 <__sflush_r+0xfe>
 8007fe8:	89a3      	ldrh	r3, [r4, #12]
 8007fea:	f04f 30ff 	mov.w	r0, #4294967295
 8007fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ff2:	81a3      	strh	r3, [r4, #12]
 8007ff4:	e78e      	b.n	8007f14 <__sflush_r+0x1c>
 8007ff6:	4407      	add	r7, r0
 8007ff8:	eba8 0800 	sub.w	r8, r8, r0
 8007ffc:	e7e9      	b.n	8007fd2 <__sflush_r+0xda>
 8007ffe:	bf00      	nop
 8008000:	20400001 	.word	0x20400001

08008004 <_fflush_r>:
 8008004:	b538      	push	{r3, r4, r5, lr}
 8008006:	690b      	ldr	r3, [r1, #16]
 8008008:	4605      	mov	r5, r0
 800800a:	460c      	mov	r4, r1
 800800c:	b913      	cbnz	r3, 8008014 <_fflush_r+0x10>
 800800e:	2500      	movs	r5, #0
 8008010:	4628      	mov	r0, r5
 8008012:	bd38      	pop	{r3, r4, r5, pc}
 8008014:	b118      	cbz	r0, 800801e <_fflush_r+0x1a>
 8008016:	6983      	ldr	r3, [r0, #24]
 8008018:	b90b      	cbnz	r3, 800801e <_fflush_r+0x1a>
 800801a:	f000 f887 	bl	800812c <__sinit>
 800801e:	4b14      	ldr	r3, [pc, #80]	; (8008070 <_fflush_r+0x6c>)
 8008020:	429c      	cmp	r4, r3
 8008022:	d11b      	bne.n	800805c <_fflush_r+0x58>
 8008024:	686c      	ldr	r4, [r5, #4]
 8008026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d0ef      	beq.n	800800e <_fflush_r+0xa>
 800802e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008030:	07d0      	lsls	r0, r2, #31
 8008032:	d404      	bmi.n	800803e <_fflush_r+0x3a>
 8008034:	0599      	lsls	r1, r3, #22
 8008036:	d402      	bmi.n	800803e <_fflush_r+0x3a>
 8008038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800803a:	f000 f915 	bl	8008268 <__retarget_lock_acquire_recursive>
 800803e:	4628      	mov	r0, r5
 8008040:	4621      	mov	r1, r4
 8008042:	f7ff ff59 	bl	8007ef8 <__sflush_r>
 8008046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008048:	4605      	mov	r5, r0
 800804a:	07da      	lsls	r2, r3, #31
 800804c:	d4e0      	bmi.n	8008010 <_fflush_r+0xc>
 800804e:	89a3      	ldrh	r3, [r4, #12]
 8008050:	059b      	lsls	r3, r3, #22
 8008052:	d4dd      	bmi.n	8008010 <_fflush_r+0xc>
 8008054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008056:	f000 f908 	bl	800826a <__retarget_lock_release_recursive>
 800805a:	e7d9      	b.n	8008010 <_fflush_r+0xc>
 800805c:	4b05      	ldr	r3, [pc, #20]	; (8008074 <_fflush_r+0x70>)
 800805e:	429c      	cmp	r4, r3
 8008060:	d101      	bne.n	8008066 <_fflush_r+0x62>
 8008062:	68ac      	ldr	r4, [r5, #8]
 8008064:	e7df      	b.n	8008026 <_fflush_r+0x22>
 8008066:	4b04      	ldr	r3, [pc, #16]	; (8008078 <_fflush_r+0x74>)
 8008068:	429c      	cmp	r4, r3
 800806a:	bf08      	it	eq
 800806c:	68ec      	ldreq	r4, [r5, #12]
 800806e:	e7da      	b.n	8008026 <_fflush_r+0x22>
 8008070:	0800894c 	.word	0x0800894c
 8008074:	0800896c 	.word	0x0800896c
 8008078:	0800892c 	.word	0x0800892c

0800807c <std>:
 800807c:	2300      	movs	r3, #0
 800807e:	b510      	push	{r4, lr}
 8008080:	4604      	mov	r4, r0
 8008082:	e9c0 3300 	strd	r3, r3, [r0]
 8008086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800808a:	6083      	str	r3, [r0, #8]
 800808c:	8181      	strh	r1, [r0, #12]
 800808e:	6643      	str	r3, [r0, #100]	; 0x64
 8008090:	81c2      	strh	r2, [r0, #14]
 8008092:	6183      	str	r3, [r0, #24]
 8008094:	4619      	mov	r1, r3
 8008096:	2208      	movs	r2, #8
 8008098:	305c      	adds	r0, #92	; 0x5c
 800809a:	f7fd fba1 	bl	80057e0 <memset>
 800809e:	4b05      	ldr	r3, [pc, #20]	; (80080b4 <std+0x38>)
 80080a0:	6224      	str	r4, [r4, #32]
 80080a2:	6263      	str	r3, [r4, #36]	; 0x24
 80080a4:	4b04      	ldr	r3, [pc, #16]	; (80080b8 <std+0x3c>)
 80080a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80080a8:	4b04      	ldr	r3, [pc, #16]	; (80080bc <std+0x40>)
 80080aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080ac:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <std+0x44>)
 80080ae:	6323      	str	r3, [r4, #48]	; 0x30
 80080b0:	bd10      	pop	{r4, pc}
 80080b2:	bf00      	nop
 80080b4:	080083cd 	.word	0x080083cd
 80080b8:	080083ef 	.word	0x080083ef
 80080bc:	08008427 	.word	0x08008427
 80080c0:	0800844b 	.word	0x0800844b

080080c4 <_cleanup_r>:
 80080c4:	4901      	ldr	r1, [pc, #4]	; (80080cc <_cleanup_r+0x8>)
 80080c6:	f000 b8af 	b.w	8008228 <_fwalk_reent>
 80080ca:	bf00      	nop
 80080cc:	08008005 	.word	0x08008005

080080d0 <__sfmoreglue>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	2568      	movs	r5, #104	; 0x68
 80080d4:	1e4a      	subs	r2, r1, #1
 80080d6:	4355      	muls	r5, r2
 80080d8:	460e      	mov	r6, r1
 80080da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080de:	f7ff fa89 	bl	80075f4 <_malloc_r>
 80080e2:	4604      	mov	r4, r0
 80080e4:	b140      	cbz	r0, 80080f8 <__sfmoreglue+0x28>
 80080e6:	2100      	movs	r1, #0
 80080e8:	e9c0 1600 	strd	r1, r6, [r0]
 80080ec:	300c      	adds	r0, #12
 80080ee:	60a0      	str	r0, [r4, #8]
 80080f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080f4:	f7fd fb74 	bl	80057e0 <memset>
 80080f8:	4620      	mov	r0, r4
 80080fa:	bd70      	pop	{r4, r5, r6, pc}

080080fc <__sfp_lock_acquire>:
 80080fc:	4801      	ldr	r0, [pc, #4]	; (8008104 <__sfp_lock_acquire+0x8>)
 80080fe:	f000 b8b3 	b.w	8008268 <__retarget_lock_acquire_recursive>
 8008102:	bf00      	nop
 8008104:	20000388 	.word	0x20000388

08008108 <__sfp_lock_release>:
 8008108:	4801      	ldr	r0, [pc, #4]	; (8008110 <__sfp_lock_release+0x8>)
 800810a:	f000 b8ae 	b.w	800826a <__retarget_lock_release_recursive>
 800810e:	bf00      	nop
 8008110:	20000388 	.word	0x20000388

08008114 <__sinit_lock_acquire>:
 8008114:	4801      	ldr	r0, [pc, #4]	; (800811c <__sinit_lock_acquire+0x8>)
 8008116:	f000 b8a7 	b.w	8008268 <__retarget_lock_acquire_recursive>
 800811a:	bf00      	nop
 800811c:	20000383 	.word	0x20000383

08008120 <__sinit_lock_release>:
 8008120:	4801      	ldr	r0, [pc, #4]	; (8008128 <__sinit_lock_release+0x8>)
 8008122:	f000 b8a2 	b.w	800826a <__retarget_lock_release_recursive>
 8008126:	bf00      	nop
 8008128:	20000383 	.word	0x20000383

0800812c <__sinit>:
 800812c:	b510      	push	{r4, lr}
 800812e:	4604      	mov	r4, r0
 8008130:	f7ff fff0 	bl	8008114 <__sinit_lock_acquire>
 8008134:	69a3      	ldr	r3, [r4, #24]
 8008136:	b11b      	cbz	r3, 8008140 <__sinit+0x14>
 8008138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800813c:	f7ff bff0 	b.w	8008120 <__sinit_lock_release>
 8008140:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008144:	6523      	str	r3, [r4, #80]	; 0x50
 8008146:	4b13      	ldr	r3, [pc, #76]	; (8008194 <__sinit+0x68>)
 8008148:	4a13      	ldr	r2, [pc, #76]	; (8008198 <__sinit+0x6c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	62a2      	str	r2, [r4, #40]	; 0x28
 800814e:	42a3      	cmp	r3, r4
 8008150:	bf08      	it	eq
 8008152:	2301      	moveq	r3, #1
 8008154:	4620      	mov	r0, r4
 8008156:	bf08      	it	eq
 8008158:	61a3      	streq	r3, [r4, #24]
 800815a:	f000 f81f 	bl	800819c <__sfp>
 800815e:	6060      	str	r0, [r4, #4]
 8008160:	4620      	mov	r0, r4
 8008162:	f000 f81b 	bl	800819c <__sfp>
 8008166:	60a0      	str	r0, [r4, #8]
 8008168:	4620      	mov	r0, r4
 800816a:	f000 f817 	bl	800819c <__sfp>
 800816e:	2200      	movs	r2, #0
 8008170:	2104      	movs	r1, #4
 8008172:	60e0      	str	r0, [r4, #12]
 8008174:	6860      	ldr	r0, [r4, #4]
 8008176:	f7ff ff81 	bl	800807c <std>
 800817a:	2201      	movs	r2, #1
 800817c:	2109      	movs	r1, #9
 800817e:	68a0      	ldr	r0, [r4, #8]
 8008180:	f7ff ff7c 	bl	800807c <std>
 8008184:	2202      	movs	r2, #2
 8008186:	2112      	movs	r1, #18
 8008188:	68e0      	ldr	r0, [r4, #12]
 800818a:	f7ff ff77 	bl	800807c <std>
 800818e:	2301      	movs	r3, #1
 8008190:	61a3      	str	r3, [r4, #24]
 8008192:	e7d1      	b.n	8008138 <__sinit+0xc>
 8008194:	080085ac 	.word	0x080085ac
 8008198:	080080c5 	.word	0x080080c5

0800819c <__sfp>:
 800819c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819e:	4607      	mov	r7, r0
 80081a0:	f7ff ffac 	bl	80080fc <__sfp_lock_acquire>
 80081a4:	4b1e      	ldr	r3, [pc, #120]	; (8008220 <__sfp+0x84>)
 80081a6:	681e      	ldr	r6, [r3, #0]
 80081a8:	69b3      	ldr	r3, [r6, #24]
 80081aa:	b913      	cbnz	r3, 80081b2 <__sfp+0x16>
 80081ac:	4630      	mov	r0, r6
 80081ae:	f7ff ffbd 	bl	800812c <__sinit>
 80081b2:	3648      	adds	r6, #72	; 0x48
 80081b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081b8:	3b01      	subs	r3, #1
 80081ba:	d503      	bpl.n	80081c4 <__sfp+0x28>
 80081bc:	6833      	ldr	r3, [r6, #0]
 80081be:	b30b      	cbz	r3, 8008204 <__sfp+0x68>
 80081c0:	6836      	ldr	r6, [r6, #0]
 80081c2:	e7f7      	b.n	80081b4 <__sfp+0x18>
 80081c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081c8:	b9d5      	cbnz	r5, 8008200 <__sfp+0x64>
 80081ca:	4b16      	ldr	r3, [pc, #88]	; (8008224 <__sfp+0x88>)
 80081cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081d0:	60e3      	str	r3, [r4, #12]
 80081d2:	6665      	str	r5, [r4, #100]	; 0x64
 80081d4:	f000 f847 	bl	8008266 <__retarget_lock_init_recursive>
 80081d8:	f7ff ff96 	bl	8008108 <__sfp_lock_release>
 80081dc:	2208      	movs	r2, #8
 80081de:	4629      	mov	r1, r5
 80081e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80081e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80081e8:	6025      	str	r5, [r4, #0]
 80081ea:	61a5      	str	r5, [r4, #24]
 80081ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081f0:	f7fd faf6 	bl	80057e0 <memset>
 80081f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081fc:	4620      	mov	r0, r4
 80081fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008200:	3468      	adds	r4, #104	; 0x68
 8008202:	e7d9      	b.n	80081b8 <__sfp+0x1c>
 8008204:	2104      	movs	r1, #4
 8008206:	4638      	mov	r0, r7
 8008208:	f7ff ff62 	bl	80080d0 <__sfmoreglue>
 800820c:	4604      	mov	r4, r0
 800820e:	6030      	str	r0, [r6, #0]
 8008210:	2800      	cmp	r0, #0
 8008212:	d1d5      	bne.n	80081c0 <__sfp+0x24>
 8008214:	f7ff ff78 	bl	8008108 <__sfp_lock_release>
 8008218:	230c      	movs	r3, #12
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	e7ee      	b.n	80081fc <__sfp+0x60>
 800821e:	bf00      	nop
 8008220:	080085ac 	.word	0x080085ac
 8008224:	ffff0001 	.word	0xffff0001

08008228 <_fwalk_reent>:
 8008228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800822c:	4606      	mov	r6, r0
 800822e:	4688      	mov	r8, r1
 8008230:	2700      	movs	r7, #0
 8008232:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008236:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800823a:	f1b9 0901 	subs.w	r9, r9, #1
 800823e:	d505      	bpl.n	800824c <_fwalk_reent+0x24>
 8008240:	6824      	ldr	r4, [r4, #0]
 8008242:	2c00      	cmp	r4, #0
 8008244:	d1f7      	bne.n	8008236 <_fwalk_reent+0xe>
 8008246:	4638      	mov	r0, r7
 8008248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800824c:	89ab      	ldrh	r3, [r5, #12]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d907      	bls.n	8008262 <_fwalk_reent+0x3a>
 8008252:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008256:	3301      	adds	r3, #1
 8008258:	d003      	beq.n	8008262 <_fwalk_reent+0x3a>
 800825a:	4629      	mov	r1, r5
 800825c:	4630      	mov	r0, r6
 800825e:	47c0      	blx	r8
 8008260:	4307      	orrs	r7, r0
 8008262:	3568      	adds	r5, #104	; 0x68
 8008264:	e7e9      	b.n	800823a <_fwalk_reent+0x12>

08008266 <__retarget_lock_init_recursive>:
 8008266:	4770      	bx	lr

08008268 <__retarget_lock_acquire_recursive>:
 8008268:	4770      	bx	lr

0800826a <__retarget_lock_release_recursive>:
 800826a:	4770      	bx	lr

0800826c <__swhatbuf_r>:
 800826c:	b570      	push	{r4, r5, r6, lr}
 800826e:	460e      	mov	r6, r1
 8008270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008274:	4614      	mov	r4, r2
 8008276:	2900      	cmp	r1, #0
 8008278:	461d      	mov	r5, r3
 800827a:	b096      	sub	sp, #88	; 0x58
 800827c:	da07      	bge.n	800828e <__swhatbuf_r+0x22>
 800827e:	2300      	movs	r3, #0
 8008280:	602b      	str	r3, [r5, #0]
 8008282:	89b3      	ldrh	r3, [r6, #12]
 8008284:	061a      	lsls	r2, r3, #24
 8008286:	d410      	bmi.n	80082aa <__swhatbuf_r+0x3e>
 8008288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800828c:	e00e      	b.n	80082ac <__swhatbuf_r+0x40>
 800828e:	466a      	mov	r2, sp
 8008290:	f000 f902 	bl	8008498 <_fstat_r>
 8008294:	2800      	cmp	r0, #0
 8008296:	dbf2      	blt.n	800827e <__swhatbuf_r+0x12>
 8008298:	9a01      	ldr	r2, [sp, #4]
 800829a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800829e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082a2:	425a      	negs	r2, r3
 80082a4:	415a      	adcs	r2, r3
 80082a6:	602a      	str	r2, [r5, #0]
 80082a8:	e7ee      	b.n	8008288 <__swhatbuf_r+0x1c>
 80082aa:	2340      	movs	r3, #64	; 0x40
 80082ac:	2000      	movs	r0, #0
 80082ae:	6023      	str	r3, [r4, #0]
 80082b0:	b016      	add	sp, #88	; 0x58
 80082b2:	bd70      	pop	{r4, r5, r6, pc}

080082b4 <__smakebuf_r>:
 80082b4:	898b      	ldrh	r3, [r1, #12]
 80082b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082b8:	079d      	lsls	r5, r3, #30
 80082ba:	4606      	mov	r6, r0
 80082bc:	460c      	mov	r4, r1
 80082be:	d507      	bpl.n	80082d0 <__smakebuf_r+0x1c>
 80082c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	6123      	str	r3, [r4, #16]
 80082c8:	2301      	movs	r3, #1
 80082ca:	6163      	str	r3, [r4, #20]
 80082cc:	b002      	add	sp, #8
 80082ce:	bd70      	pop	{r4, r5, r6, pc}
 80082d0:	466a      	mov	r2, sp
 80082d2:	ab01      	add	r3, sp, #4
 80082d4:	f7ff ffca 	bl	800826c <__swhatbuf_r>
 80082d8:	9900      	ldr	r1, [sp, #0]
 80082da:	4605      	mov	r5, r0
 80082dc:	4630      	mov	r0, r6
 80082de:	f7ff f989 	bl	80075f4 <_malloc_r>
 80082e2:	b948      	cbnz	r0, 80082f8 <__smakebuf_r+0x44>
 80082e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082e8:	059a      	lsls	r2, r3, #22
 80082ea:	d4ef      	bmi.n	80082cc <__smakebuf_r+0x18>
 80082ec:	f023 0303 	bic.w	r3, r3, #3
 80082f0:	f043 0302 	orr.w	r3, r3, #2
 80082f4:	81a3      	strh	r3, [r4, #12]
 80082f6:	e7e3      	b.n	80082c0 <__smakebuf_r+0xc>
 80082f8:	4b0d      	ldr	r3, [pc, #52]	; (8008330 <__smakebuf_r+0x7c>)
 80082fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	6020      	str	r0, [r4, #0]
 8008300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008304:	81a3      	strh	r3, [r4, #12]
 8008306:	9b00      	ldr	r3, [sp, #0]
 8008308:	6120      	str	r0, [r4, #16]
 800830a:	6163      	str	r3, [r4, #20]
 800830c:	9b01      	ldr	r3, [sp, #4]
 800830e:	b15b      	cbz	r3, 8008328 <__smakebuf_r+0x74>
 8008310:	4630      	mov	r0, r6
 8008312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008316:	f000 f8d1 	bl	80084bc <_isatty_r>
 800831a:	b128      	cbz	r0, 8008328 <__smakebuf_r+0x74>
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	f023 0303 	bic.w	r3, r3, #3
 8008322:	f043 0301 	orr.w	r3, r3, #1
 8008326:	81a3      	strh	r3, [r4, #12]
 8008328:	89a0      	ldrh	r0, [r4, #12]
 800832a:	4305      	orrs	r5, r0
 800832c:	81a5      	strh	r5, [r4, #12]
 800832e:	e7cd      	b.n	80082cc <__smakebuf_r+0x18>
 8008330:	080080c5 	.word	0x080080c5

08008334 <_malloc_usable_size_r>:
 8008334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008338:	1f18      	subs	r0, r3, #4
 800833a:	2b00      	cmp	r3, #0
 800833c:	bfbc      	itt	lt
 800833e:	580b      	ldrlt	r3, [r1, r0]
 8008340:	18c0      	addlt	r0, r0, r3
 8008342:	4770      	bx	lr

08008344 <_raise_r>:
 8008344:	291f      	cmp	r1, #31
 8008346:	b538      	push	{r3, r4, r5, lr}
 8008348:	4604      	mov	r4, r0
 800834a:	460d      	mov	r5, r1
 800834c:	d904      	bls.n	8008358 <_raise_r+0x14>
 800834e:	2316      	movs	r3, #22
 8008350:	6003      	str	r3, [r0, #0]
 8008352:	f04f 30ff 	mov.w	r0, #4294967295
 8008356:	bd38      	pop	{r3, r4, r5, pc}
 8008358:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800835a:	b112      	cbz	r2, 8008362 <_raise_r+0x1e>
 800835c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008360:	b94b      	cbnz	r3, 8008376 <_raise_r+0x32>
 8008362:	4620      	mov	r0, r4
 8008364:	f000 f830 	bl	80083c8 <_getpid_r>
 8008368:	462a      	mov	r2, r5
 800836a:	4601      	mov	r1, r0
 800836c:	4620      	mov	r0, r4
 800836e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008372:	f000 b817 	b.w	80083a4 <_kill_r>
 8008376:	2b01      	cmp	r3, #1
 8008378:	d00a      	beq.n	8008390 <_raise_r+0x4c>
 800837a:	1c59      	adds	r1, r3, #1
 800837c:	d103      	bne.n	8008386 <_raise_r+0x42>
 800837e:	2316      	movs	r3, #22
 8008380:	6003      	str	r3, [r0, #0]
 8008382:	2001      	movs	r0, #1
 8008384:	e7e7      	b.n	8008356 <_raise_r+0x12>
 8008386:	2400      	movs	r4, #0
 8008388:	4628      	mov	r0, r5
 800838a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800838e:	4798      	blx	r3
 8008390:	2000      	movs	r0, #0
 8008392:	e7e0      	b.n	8008356 <_raise_r+0x12>

08008394 <raise>:
 8008394:	4b02      	ldr	r3, [pc, #8]	; (80083a0 <raise+0xc>)
 8008396:	4601      	mov	r1, r0
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	f7ff bfd3 	b.w	8008344 <_raise_r>
 800839e:	bf00      	nop
 80083a0:	2000000c 	.word	0x2000000c

080083a4 <_kill_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	2300      	movs	r3, #0
 80083a8:	4d06      	ldr	r5, [pc, #24]	; (80083c4 <_kill_r+0x20>)
 80083aa:	4604      	mov	r4, r0
 80083ac:	4608      	mov	r0, r1
 80083ae:	4611      	mov	r1, r2
 80083b0:	602b      	str	r3, [r5, #0]
 80083b2:	f7f9 fa4a 	bl	800184a <_kill>
 80083b6:	1c43      	adds	r3, r0, #1
 80083b8:	d102      	bne.n	80083c0 <_kill_r+0x1c>
 80083ba:	682b      	ldr	r3, [r5, #0]
 80083bc:	b103      	cbz	r3, 80083c0 <_kill_r+0x1c>
 80083be:	6023      	str	r3, [r4, #0]
 80083c0:	bd38      	pop	{r3, r4, r5, pc}
 80083c2:	bf00      	nop
 80083c4:	2000037c 	.word	0x2000037c

080083c8 <_getpid_r>:
 80083c8:	f7f9 ba38 	b.w	800183c <_getpid>

080083cc <__sread>:
 80083cc:	b510      	push	{r4, lr}
 80083ce:	460c      	mov	r4, r1
 80083d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d4:	f000 f894 	bl	8008500 <_read_r>
 80083d8:	2800      	cmp	r0, #0
 80083da:	bfab      	itete	ge
 80083dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083de:	89a3      	ldrhlt	r3, [r4, #12]
 80083e0:	181b      	addge	r3, r3, r0
 80083e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083e6:	bfac      	ite	ge
 80083e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80083ea:	81a3      	strhlt	r3, [r4, #12]
 80083ec:	bd10      	pop	{r4, pc}

080083ee <__swrite>:
 80083ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f2:	461f      	mov	r7, r3
 80083f4:	898b      	ldrh	r3, [r1, #12]
 80083f6:	4605      	mov	r5, r0
 80083f8:	05db      	lsls	r3, r3, #23
 80083fa:	460c      	mov	r4, r1
 80083fc:	4616      	mov	r6, r2
 80083fe:	d505      	bpl.n	800840c <__swrite+0x1e>
 8008400:	2302      	movs	r3, #2
 8008402:	2200      	movs	r2, #0
 8008404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008408:	f000 f868 	bl	80084dc <_lseek_r>
 800840c:	89a3      	ldrh	r3, [r4, #12]
 800840e:	4632      	mov	r2, r6
 8008410:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008414:	81a3      	strh	r3, [r4, #12]
 8008416:	4628      	mov	r0, r5
 8008418:	463b      	mov	r3, r7
 800841a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800841e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008422:	f000 b817 	b.w	8008454 <_write_r>

08008426 <__sseek>:
 8008426:	b510      	push	{r4, lr}
 8008428:	460c      	mov	r4, r1
 800842a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800842e:	f000 f855 	bl	80084dc <_lseek_r>
 8008432:	1c43      	adds	r3, r0, #1
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	bf15      	itete	ne
 8008438:	6560      	strne	r0, [r4, #84]	; 0x54
 800843a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800843e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008442:	81a3      	strheq	r3, [r4, #12]
 8008444:	bf18      	it	ne
 8008446:	81a3      	strhne	r3, [r4, #12]
 8008448:	bd10      	pop	{r4, pc}

0800844a <__sclose>:
 800844a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800844e:	f000 b813 	b.w	8008478 <_close_r>
	...

08008454 <_write_r>:
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	4604      	mov	r4, r0
 8008458:	4608      	mov	r0, r1
 800845a:	4611      	mov	r1, r2
 800845c:	2200      	movs	r2, #0
 800845e:	4d05      	ldr	r5, [pc, #20]	; (8008474 <_write_r+0x20>)
 8008460:	602a      	str	r2, [r5, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	f7f9 fa28 	bl	80018b8 <_write>
 8008468:	1c43      	adds	r3, r0, #1
 800846a:	d102      	bne.n	8008472 <_write_r+0x1e>
 800846c:	682b      	ldr	r3, [r5, #0]
 800846e:	b103      	cbz	r3, 8008472 <_write_r+0x1e>
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	bd38      	pop	{r3, r4, r5, pc}
 8008474:	2000037c 	.word	0x2000037c

08008478 <_close_r>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	2300      	movs	r3, #0
 800847c:	4d05      	ldr	r5, [pc, #20]	; (8008494 <_close_r+0x1c>)
 800847e:	4604      	mov	r4, r0
 8008480:	4608      	mov	r0, r1
 8008482:	602b      	str	r3, [r5, #0]
 8008484:	f7f9 fa34 	bl	80018f0 <_close>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d102      	bne.n	8008492 <_close_r+0x1a>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	b103      	cbz	r3, 8008492 <_close_r+0x1a>
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	2000037c 	.word	0x2000037c

08008498 <_fstat_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	2300      	movs	r3, #0
 800849c:	4d06      	ldr	r5, [pc, #24]	; (80084b8 <_fstat_r+0x20>)
 800849e:	4604      	mov	r4, r0
 80084a0:	4608      	mov	r0, r1
 80084a2:	4611      	mov	r1, r2
 80084a4:	602b      	str	r3, [r5, #0]
 80084a6:	f7f9 fa2e 	bl	8001906 <_fstat>
 80084aa:	1c43      	adds	r3, r0, #1
 80084ac:	d102      	bne.n	80084b4 <_fstat_r+0x1c>
 80084ae:	682b      	ldr	r3, [r5, #0]
 80084b0:	b103      	cbz	r3, 80084b4 <_fstat_r+0x1c>
 80084b2:	6023      	str	r3, [r4, #0]
 80084b4:	bd38      	pop	{r3, r4, r5, pc}
 80084b6:	bf00      	nop
 80084b8:	2000037c 	.word	0x2000037c

080084bc <_isatty_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	2300      	movs	r3, #0
 80084c0:	4d05      	ldr	r5, [pc, #20]	; (80084d8 <_isatty_r+0x1c>)
 80084c2:	4604      	mov	r4, r0
 80084c4:	4608      	mov	r0, r1
 80084c6:	602b      	str	r3, [r5, #0]
 80084c8:	f7f9 fa2c 	bl	8001924 <_isatty>
 80084cc:	1c43      	adds	r3, r0, #1
 80084ce:	d102      	bne.n	80084d6 <_isatty_r+0x1a>
 80084d0:	682b      	ldr	r3, [r5, #0]
 80084d2:	b103      	cbz	r3, 80084d6 <_isatty_r+0x1a>
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	bd38      	pop	{r3, r4, r5, pc}
 80084d8:	2000037c 	.word	0x2000037c

080084dc <_lseek_r>:
 80084dc:	b538      	push	{r3, r4, r5, lr}
 80084de:	4604      	mov	r4, r0
 80084e0:	4608      	mov	r0, r1
 80084e2:	4611      	mov	r1, r2
 80084e4:	2200      	movs	r2, #0
 80084e6:	4d05      	ldr	r5, [pc, #20]	; (80084fc <_lseek_r+0x20>)
 80084e8:	602a      	str	r2, [r5, #0]
 80084ea:	461a      	mov	r2, r3
 80084ec:	f7f9 fa24 	bl	8001938 <_lseek>
 80084f0:	1c43      	adds	r3, r0, #1
 80084f2:	d102      	bne.n	80084fa <_lseek_r+0x1e>
 80084f4:	682b      	ldr	r3, [r5, #0]
 80084f6:	b103      	cbz	r3, 80084fa <_lseek_r+0x1e>
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	bd38      	pop	{r3, r4, r5, pc}
 80084fc:	2000037c 	.word	0x2000037c

08008500 <_read_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	4604      	mov	r4, r0
 8008504:	4608      	mov	r0, r1
 8008506:	4611      	mov	r1, r2
 8008508:	2200      	movs	r2, #0
 800850a:	4d05      	ldr	r5, [pc, #20]	; (8008520 <_read_r+0x20>)
 800850c:	602a      	str	r2, [r5, #0]
 800850e:	461a      	mov	r2, r3
 8008510:	f7f9 f9b5 	bl	800187e <_read>
 8008514:	1c43      	adds	r3, r0, #1
 8008516:	d102      	bne.n	800851e <_read_r+0x1e>
 8008518:	682b      	ldr	r3, [r5, #0]
 800851a:	b103      	cbz	r3, 800851e <_read_r+0x1e>
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	bd38      	pop	{r3, r4, r5, pc}
 8008520:	2000037c 	.word	0x2000037c

08008524 <_init>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr

08008530 <_fini>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	bf00      	nop
 8008534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008536:	bc08      	pop	{r3}
 8008538:	469e      	mov	lr, r3
 800853a:	4770      	bx	lr
